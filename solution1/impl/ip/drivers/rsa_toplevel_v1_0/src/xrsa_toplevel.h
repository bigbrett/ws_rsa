// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef XRSA_TOPLEVEL_H
#define XRSA_TOPLEVEL_H

#ifdef __cplusplus
extern "C" {
#endif

/***************************** Include Files *********************************/
#ifndef __linux__
#include "xil_types.h"
#include "xil_assert.h"
#include "xstatus.h"
#include "xil_io.h"
#else
#include <stdint.h>
#include <assert.h>
#include <dirent.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>
#include <unistd.h>
#include <stddef.h>
#endif
#include "xrsa_toplevel_hw.h"

/**************************** Type Definitions ******************************/
#ifdef __linux__
typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
#else
typedef struct {
    u16 DeviceId;
    u32 Axilites_BaseAddress;
} XRsa_toplevel_Config;
#endif

typedef struct {
    u32 Axilites_BaseAddress;
    u32 IsReady;
} XRsa_toplevel;

typedef struct {
    u32 word_0;
    u32 word_1;
    u32 word_2;
    u32 word_3;
    u32 word_4;
    u32 word_5;
    u32 word_6;
    u32 word_7;
    u32 word_8;
    u32 word_9;
    u32 word_10;
    u32 word_11;
    u32 word_12;
    u32 word_13;
    u32 word_14;
    u32 word_15;
    u32 word_16;
    u32 word_17;
    u32 word_18;
    u32 word_19;
    u32 word_20;
    u32 word_21;
    u32 word_22;
    u32 word_23;
    u32 word_24;
    u32 word_25;
    u32 word_26;
    u32 word_27;
    u32 word_28;
    u32 word_29;
    u32 word_30;
    u32 word_31;
} XRsa_toplevel_Indata_v;

typedef struct {
    u32 word_0;
    u32 word_1;
    u32 word_2;
    u32 word_3;
    u32 word_4;
    u32 word_5;
    u32 word_6;
    u32 word_7;
    u32 word_8;
    u32 word_9;
    u32 word_10;
    u32 word_11;
    u32 word_12;
    u32 word_13;
    u32 word_14;
    u32 word_15;
    u32 word_16;
    u32 word_17;
    u32 word_18;
    u32 word_19;
    u32 word_20;
    u32 word_21;
    u32 word_22;
    u32 word_23;
    u32 word_24;
    u32 word_25;
    u32 word_26;
    u32 word_27;
    u32 word_28;
    u32 word_29;
    u32 word_30;
    u32 word_31;
} XRsa_toplevel_Outdata_v;

/***************** Macros (Inline Functions) Definitions *********************/
#ifndef __linux__
#define XRsa_toplevel_WriteReg(BaseAddress, RegOffset, Data) \
    Xil_Out32((BaseAddress) + (RegOffset), (u32)(Data))
#define XRsa_toplevel_ReadReg(BaseAddress, RegOffset) \
    Xil_In32((BaseAddress) + (RegOffset))
#else
#define XRsa_toplevel_WriteReg(BaseAddress, RegOffset, Data) \
    *(volatile u32*)((BaseAddress) + (RegOffset)) = (u32)(Data)
#define XRsa_toplevel_ReadReg(BaseAddress, RegOffset) \
    *(volatile u32*)((BaseAddress) + (RegOffset))

#define Xil_AssertVoid(expr)    assert(expr)
#define Xil_AssertNonvoid(expr) assert(expr)

#define XST_SUCCESS             0
#define XST_DEVICE_NOT_FOUND    2
#define XST_OPEN_DEVICE_FAILED  3
#define XIL_COMPONENT_IS_READY  1
#endif

/************************** Function Prototypes *****************************/
#ifndef __linux__
int XRsa_toplevel_Initialize(XRsa_toplevel *InstancePtr, u16 DeviceId);
XRsa_toplevel_Config* XRsa_toplevel_LookupConfig(u16 DeviceId);
int XRsa_toplevel_CfgInitialize(XRsa_toplevel *InstancePtr, XRsa_toplevel_Config *ConfigPtr);
#else
int XRsa_toplevel_Initialize(XRsa_toplevel *InstancePtr, const char* InstanceName);
int XRsa_toplevel_Release(XRsa_toplevel *InstancePtr);
#endif

void XRsa_toplevel_Start(XRsa_toplevel *InstancePtr);
u32 XRsa_toplevel_IsDone(XRsa_toplevel *InstancePtr);
u32 XRsa_toplevel_IsIdle(XRsa_toplevel *InstancePtr);
u32 XRsa_toplevel_IsReady(XRsa_toplevel *InstancePtr);
void XRsa_toplevel_EnableAutoRestart(XRsa_toplevel *InstancePtr);
void XRsa_toplevel_DisableAutoRestart(XRsa_toplevel *InstancePtr);

void XRsa_toplevel_Set_inData_V(XRsa_toplevel *InstancePtr, XRsa_toplevel_Indata_v Data);
XRsa_toplevel_Indata_v XRsa_toplevel_Get_inData_V(XRsa_toplevel *InstancePtr);
XRsa_toplevel_Outdata_v XRsa_toplevel_Get_outData_V(XRsa_toplevel *InstancePtr);
u32 XRsa_toplevel_Get_outData_V_vld(XRsa_toplevel *InstancePtr);

void XRsa_toplevel_InterruptGlobalEnable(XRsa_toplevel *InstancePtr);
void XRsa_toplevel_InterruptGlobalDisable(XRsa_toplevel *InstancePtr);
void XRsa_toplevel_InterruptEnable(XRsa_toplevel *InstancePtr, u32 Mask);
void XRsa_toplevel_InterruptDisable(XRsa_toplevel *InstancePtr, u32 Mask);
void XRsa_toplevel_InterruptClear(XRsa_toplevel *InstancePtr, u32 Mask);
u32 XRsa_toplevel_InterruptGetEnabled(XRsa_toplevel *InstancePtr);
u32 XRsa_toplevel_InterruptGetStatus(XRsa_toplevel *InstancePtr);

#ifdef __cplusplus
}
#endif

#endif
