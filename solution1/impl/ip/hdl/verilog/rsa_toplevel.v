// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="rsa_toplevel,hls_ip_2016_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=100.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=62.656625,HLS_SYN_LAT=1069,HLS_SYN_TPT=1070,HLS_SYN_MEM=0,HLS_SYN_DSP=4,HLS_SYN_FF=11728,HLS_SYN_LUT=18146}" *)

module rsa_toplevel (
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        ap_clk,
        ap_rst_n,
        interrupt
);

parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    ap_const_int64_8 = 8;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 9;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_S_AXI_ADDR_WIDTH = 32;
parameter    ap_const_lv1024_lc_1 = 1024'b

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (C_S_AXI_AXILITES_DATA_WIDTH / ap_const_int64_8);
parameter C_S_AXI_WSTRB_WIDTH = (C_S_AXI_DATA_WIDTH / ap_const_int64_8);

input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1 : 0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1 : 0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1 : 0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1 : 0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1 : 0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
input   ap_clk;
input   ap_rst_n;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
wire    ap_ready;
wire    ap_done;
reg    ap_idle;
wire   [1023:0] inData_V;
wire    rsa_toplevel_Block_codeRepl5_proc_U0_ap_start;
wire    rsa_toplevel_Block_codeRepl5_proc_U0_ap_done;
wire    rsa_toplevel_Block_codeRepl5_proc_U0_ap_continue;
wire    rsa_toplevel_Block_codeRepl5_proc_U0_ap_idle;
wire    rsa_toplevel_Block_codeRepl5_proc_U0_ap_ready;
wire   [1023:0] rsa_toplevel_Block_codeRepl5_proc_U0_outData_V;
wire    rsa_toplevel_Block_codeRepl5_proc_U0_outData_V_ap_vld;
wire    ap_sig_hs_continue;
reg    ap_sig_hs_done;
wire    ap_sig_hs_ready;

rsa_toplevel_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
rsa_toplevel_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .inData_V(inData_V),
    .outData_V(rsa_toplevel_Block_codeRepl5_proc_U0_outData_V),
    .outData_V_ap_vld(rsa_toplevel_Block_codeRepl5_proc_U0_outData_V_ap_vld)
);

rsa_toplevel_Block_codeRepl5_proc rsa_toplevel_Block_codeRepl5_proc_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(rsa_toplevel_Block_codeRepl5_proc_U0_ap_start),
    .ap_done(rsa_toplevel_Block_codeRepl5_proc_U0_ap_done),
    .ap_continue(rsa_toplevel_Block_codeRepl5_proc_U0_ap_continue),
    .ap_idle(rsa_toplevel_Block_codeRepl5_proc_U0_ap_idle),
    .ap_ready(rsa_toplevel_Block_codeRepl5_proc_U0_ap_ready),
    .inData_V(inData_V),
    .outData_V(rsa_toplevel_Block_codeRepl5_proc_U0_outData_V),
    .outData_V_ap_vld(rsa_toplevel_Block_codeRepl5_proc_U0_outData_V_ap_vld)
);

always @ (*) begin
    if ((1'b1 == rsa_toplevel_Block_codeRepl5_proc_U0_ap_idle)) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == rsa_toplevel_Block_codeRepl5_proc_U0_ap_done)) begin
        ap_sig_hs_done = 1'b1;
    end else begin
        ap_sig_hs_done = 1'b0;
    end
end

assign ap_done = ap_sig_hs_done;

assign ap_ready = rsa_toplevel_Block_codeRepl5_proc_U0_ap_ready;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign ap_sig_hs_continue = 1'b1;

assign ap_sig_hs_ready = rsa_toplevel_Block_codeRepl5_proc_U0_ap_ready;

assign rsa_toplevel_Block_codeRepl5_proc_U0_ap_continue = 1'b1;

assign rsa_toplevel_Block_codeRepl5_proc_U0_ap_start = ap_start;

endmodule //rsa_toplevel
