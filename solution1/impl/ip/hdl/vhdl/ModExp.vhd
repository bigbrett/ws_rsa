-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ModExp is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    M_V : IN STD_LOGIC_VECTOR (1023 downto 0);
    e_V : IN STD_LOGIC_VECTOR (1023 downto 0);
    n_V : IN STD_LOGIC_VECTOR (1023 downto 0);
    Mbar_V : IN STD_LOGIC_VECTOR (1023 downto 0);
    xbar_in_V : IN STD_LOGIC_VECTOR (1023 downto 0);
    out_V : OUT STD_LOGIC_VECTOR (1023 downto 0);
    out_V_ap_vld : OUT STD_LOGIC );
end;


architecture behav of ModExp is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "ModExp,hls_ip_2016_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=17.010000,HLS_SYN_LAT=9452550,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=26693,HLS_SYN_LUT=10638}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1024_lc_2 : STD_LOGIC_VECTOR (1023 downto
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_20 : BOOLEAN;
    signal reg_134 : STD_LOGIC_VECTOR (1023 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_41 : BOOLEAN;
    signal tmp_fu_149_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_157_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_reg_195 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_ModExp_montMult_fu_95_ap_return : STD_LOGIC_VECTOR (1023 downto 0);
    signal xbar_V_1_reg_199 : STD_LOGIC_VECTOR (1023 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_68 : BOOLEAN;
    signal grp_ModExp_montMult_fu_95_ap_done : STD_LOGIC;
    signal i_fu_164_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_81 : BOOLEAN;
    signal grp_ModExp_montMult_fu_95_ap_start : STD_LOGIC;
    signal grp_ModExp_montMult_fu_95_ap_idle : STD_LOGIC;
    signal grp_ModExp_montMult_fu_95_ap_ready : STD_LOGIC;
    signal grp_ModExp_montMult_fu_95_X0_V : STD_LOGIC_VECTOR (1023 downto 0);
    signal grp_ModExp_montMult_fu_95_Y0_V : STD_LOGIC_VECTOR (1023 downto 0);
    signal i_assign_reg_83 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_reg_grp_ModExp_montMult_fu_95_ap_start : STD_LOGIC := '0';
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_108 : BOOLEAN;
    signal xbar_V_fu_48 : STD_LOGIC_VECTOR (1023 downto 0);
    signal i_assign_cast_fu_145_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);

    component ModExp_montMult IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        X0_V : IN STD_LOGIC_VECTOR (1023 downto 0);
        Y0_V : IN STD_LOGIC_VECTOR (1023 downto 0);
        M0_V : IN STD_LOGIC_VECTOR (1023 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (1023 downto 0) );
    end component;



begin
    grp_ModExp_montMult_fu_95 : component ModExp_montMult
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_ModExp_montMult_fu_95_ap_start,
        ap_done => grp_ModExp_montMult_fu_95_ap_done,
        ap_idle => grp_ModExp_montMult_fu_95_ap_idle,
        ap_ready => grp_ModExp_montMult_fu_95_ap_ready,
        X0_V => grp_ModExp_montMult_fu_95_X0_V,
        Y0_V => grp_ModExp_montMult_fu_95_Y0_V,
        M0_V => n_V,
        ap_return => grp_ModExp_montMult_fu_95_ap_return);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_grp_ModExp_montMult_fu_95_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_ModExp_montMult_fu_95_ap_start <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (tmp_fu_149_p3 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((tmp_fu_149_p3 = ap_const_lv1_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_logic_0 = grp_ModExp_montMult_fu_95_ap_done)) and not((ap_const_lv1_0 = tmp_9_reg_195))))) then 
                    ap_reg_grp_ModExp_montMult_fu_95_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_ModExp_montMult_fu_95_ap_ready)) then 
                    ap_reg_grp_ModExp_montMult_fu_95_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_assign_reg_83_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not(((ap_const_logic_0 = grp_ModExp_montMult_fu_95_ap_done) and not((ap_const_lv1_0 = tmp_9_reg_195)))))) then 
                i_assign_reg_83 <= i_fu_164_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                i_assign_reg_83 <= ap_const_lv11_3FF;
            end if; 
        end if;
    end process;

    xbar_V_fu_48_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_logic_0 = grp_ModExp_montMult_fu_95_ap_done)) and (ap_const_lv1_0 = tmp_9_reg_195)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = tmp_9_reg_195)) and not(((ap_const_logic_0 = grp_ModExp_montMult_fu_95_ap_done) and not((ap_const_lv1_0 = tmp_9_reg_195))))))) then 
                xbar_V_fu_48 <= grp_ModExp_montMult_fu_95_ap_return;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                xbar_V_fu_48 <= xbar_in_V;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (tmp_fu_149_p3 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((tmp_fu_149_p3 = ap_const_lv1_0))))) then
                reg_134 <= xbar_V_fu_48;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (tmp_fu_149_p3 = ap_const_lv1_0))) then
                tmp_9_reg_195 <= tmp_9_fu_157_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_logic_0 = grp_ModExp_montMult_fu_95_ap_done)))) then
                xbar_V_1_reg_199 <= grp_ModExp_montMult_fu_95_ap_return;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, tmp_fu_149_p3, tmp_9_reg_195, grp_ModExp_montMult_fu_95_ap_done)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((tmp_fu_149_p3 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                if (not((ap_const_logic_0 = grp_ModExp_montMult_fu_95_ap_done))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st4_fsm_3 => 
                if (not(((ap_const_logic_0 = grp_ModExp_montMult_fu_95_ap_done) and not((ap_const_lv1_0 = tmp_9_reg_195))))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st5_fsm_4 => 
                if (not((ap_const_logic_0 = grp_ModExp_montMult_fu_95_ap_done))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;

    ap_done_assign_proc : process(grp_ModExp_montMult_fu_95_ap_done, ap_sig_cseq_ST_st5_fsm_4)
    begin
        if ((not((ap_const_logic_0 = grp_ModExp_montMult_fu_95_ap_done)) and (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_ModExp_montMult_fu_95_ap_done, ap_sig_cseq_ST_st5_fsm_4)
    begin
        if ((not((ap_const_logic_0 = grp_ModExp_montMult_fu_95_ap_done)) and (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_108_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_108 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    ap_sig_20_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_20 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_41_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_41 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_68_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_68 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    ap_sig_81_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_81 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_20)
    begin
        if (ap_sig_20) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_41)
    begin
        if (ap_sig_41) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_68)
    begin
        if (ap_sig_68) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_81)
    begin
        if (ap_sig_81) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_108)
    begin
        if (ap_sig_108) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    grp_ModExp_montMult_fu_95_X0_V_assign_proc : process(Mbar_V, reg_134, tmp_9_reg_195, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st5_fsm_4)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = tmp_9_reg_195)))) then 
            grp_ModExp_montMult_fu_95_X0_V <= Mbar_V;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4))) then 
            grp_ModExp_montMult_fu_95_X0_V <= reg_134;
        else 
            grp_ModExp_montMult_fu
        end if; 
    end process;


    grp_ModExp_montMult_fu_95_Y0_V_assign_proc : process(reg_134, tmp_9_reg_195, xbar_V_1_reg_199, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st5_fsm_4)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = tmp_9_reg_195)))) then 
            grp_ModExp_montMult_fu_95_Y0_V <= xbar_V_1_reg_199;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            grp_ModExp_montMult_fu_95_Y0_V <= ap_const_lv1024_lc_2;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            grp_ModExp_montMult_fu_95_Y0_V <= reg_134;
        else 
            grp_ModExp_montMult_fu
        end if; 
    end process;

    grp_ModExp_montMult_fu_95_ap_start <= ap_reg_grp_ModExp_montMult_fu_95_ap_start;
        i_assign_cast_fu_145_p1 <= std_logic_vector(resize(signed(i_assign_reg_83),32));

    i_fu_164_p2 <= std_logic_vector(unsigned(i_assign_reg_83) + unsigned(ap_const_lv11_7FF));
    out_V <= grp_ModExp_montMult_fu_95_ap_return;

    out_V_ap_vld_assign_proc : process(grp_ModExp_montMult_fu_95_ap_done, ap_sig_cseq_ST_st5_fsm_4)
    begin
        if ((not((ap_const_logic_0 = grp_ModExp_montMult_fu_95_ap_done)) and (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4))) then 
            out_V_ap_vld <= ap_const_logic_1;
        else 
            out_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp_9_fu_157_p3 <= e_V(to_integer(unsigned(i_assign_cast_fu_145_p1)) downto to_integer(unsigned(i_assign_cast_fu_145_p1))) when (to_integer(unsigned(i_assign_cast_fu_145_p1))>= 0 and to_integer(unsigned(i_assign_cast_fu_145_p1))<=1023) else "-";
    tmp_fu_149_p3 <= i_assign_reg_83(10 downto 10);
end behav;
