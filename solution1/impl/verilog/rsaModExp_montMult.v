// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module rsaModExp_montMult (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        X0_V,
        Y0_V,
        M0_V,
        ap_return
);

parameter    ap_ST_st1_fsm_0 = 6'b1;
parameter    ap_ST_st2_fsm_1 = 6'b10;
parameter    ap_ST_st3_fsm_2 = 6'b100;
parameter    ap_ST_st4_fsm_3 = 6'b1000;
parameter    ap_ST_st5_fsm_4 = 6'b10000;
parameter    ap_ST_st6_fsm_5 = 6'b100000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv1025_lc_1 = 1025'b
parameter    ap_const_lv11_0 = 11'b00000000000;
parameter    ap_const_lv11_400 = 11'b10000000000;
parameter    ap_const_lv11_1 = 11'b1;
parameter    ap_const_lv32_401 = 32'b10000000001;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv1024_lc_1 = 1024'b

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [1023:0] X0_V;
input  [1023:0] Y0_V;
input  [1023:0] M0_V;
output  [1023:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[1023:0] ap_return;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_23;
reg   [1023:0] M0_V_read_reg_188;
wire   [1025:0] X_V_fu_76_p1;
reg   [1025:0] X_V_reg_193;
wire   [1025:0] Y_V_fu_80_p1;
reg   [1025:0] Y_V_reg_198;
wire   [1025:0] M_V_fu_84_p1;
reg   [1025:0] M_V_reg_203;
wire   [1024:0] M_V_cast_fu_88_p1;
reg   [1024:0] M_V_cast_reg_208;
wire   [1025:0] p_cast_fu_92_p1;
reg   [1025:0] p_cast_reg_213;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_52;
wire   [10:0] i_fu_106_p2;
reg   [10:0] i_reg_222;
wire   [0:0] tmp_8_fu_112_p3;
reg   [0:0] tmp_8_reg_227;
wire   [0:0] exitcond_fu_100_p2;
wire   [0:0] tmp_fu_124_p2;
reg   [0:0] tmp_reg_232;
wire   [1023:0] tmp_6_fu_133_p1;
reg   [1023:0] tmp_6_reg_242;
wire   [1025:0] p_Val2_1_fu_142_p3;
reg   [1025:0] p_Val2_1_reg_247;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_77;
wire   [0:0] tmp_9_fu_148_p1;
reg   [0:0] tmp_9_reg_252;
reg   [1024:0] tmp_4_reg_257;
wire   [1024:0] tmp_5_fu_176_p3;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_90;
reg   [1024:0] p_s_reg_54;
reg   [10:0] i_assign_reg_65;
wire   [31:0] i_assign_cast1_fu_96_p1;
wire   [1025:0] grp_fu_119_p1;
wire   [1023:0] grp_fu_137_p0;
wire   [1025:0] grp_fu_119_p2;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_139;
wire   [1025:0] grp_fu_162_p2;
wire   [1024:0] tmp_3_fu_166_p4;
wire   [1023:0] grp_fu_137_p2;
reg    ap_sig_cseq_ST_st6_fsm_5;
reg    ap_sig_158;
wire   [1023:0] ssdm_int_V_write_assign_fu_182_p3;
reg   [1023:0] ap_return_preg;
reg   [5:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'b1;
#0 ap_return_preg = 1024'b
end

rsaModExp_add_1026ns_1026ns_1026_2 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 1026 ),
    .din1_WIDTH( 1026 ),
    .dout_WIDTH( 1026 ))
rsaModExp_add_1026ns_1026ns_1026_2_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(Y_V_reg_198),
    .din1(grp_fu_119_p1),
    .ce(1'b1),
    .dout(grp_fu_119_p2)
);

rsaModExp_sub_1024ns_1024ns_1024_2 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 1024 ),
    .din1_WIDTH( 1024 ),
    .dout_WIDTH( 1024 ))
rsaModExp_sub_1024ns_1024ns_1024_2_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_137_p0),
    .din1(M0_V_read_reg_188),
    .ce(1'b1),
    .dout(grp_fu_137_p2)
);

rsaModExp_add_1026ns_1026ns_1026_2 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 1026 ),
    .din1_WIDTH( 1026 ),
    .dout_WIDTH( 1026 ))
rsaModExp_add_1026ns_1026ns_1026_2_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(M_V_reg_203),
    .din1(p_Val2_1_reg_247),
    .ce(1'b1),
    .dout(grp_fu_162_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= ap_const_lv1024_lc_1;
    end else begin
        if ((1'b1 == ap_sig_cseq_ST_st6_fsm_5)) begin
            ap_return_preg <= ssdm_int_V_write_assign_fu_182_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        i_assign_reg_65 <= i_reg_222;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        i_assign_reg_65 <= ap_const_lv11_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        p_s_reg_54 <= tmp_5_fu_176_p3;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        p_s_reg_54 <= ap_const_lv1025_lc_1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        M0_V_read_reg_188 <= M0_V;
        M_V_cast_reg_208[1023 : 0] <= M_V_cast_fu_88_p1[1023 : 0];
        M_V_reg_203[1023 : 0] <= M_V_fu_84_p1[1023 : 0];
        X_V_reg_193[1023 : 0] <= X_V_fu_76_p1[1023 : 0];
        Y_V_reg_198[1023 : 0] <= Y_V_fu_80_p1[1023 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        ap_return <= ssdm_int_V_write_assign_fu_182_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        i_reg_222 <= i_fu_106_p2;
        p_cast_reg_213[1024 : 0] <= p_cast_fu_92_p1[1024 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        p_Val2_1_reg_247 <= p_Val2_1_fu_142_p3;
        tmp_4_reg_257 <= {{p_Val2_1_fu_142_p3[ap_const_lv32_401 : ap_const_lv32_1]}};
        tmp_9_reg_252 <= tmp_9_fu_148_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond_fu_100_p2 == 1'b0))) begin
        tmp_6_reg_242 <= tmp_6_fu_133_p1;
        tmp_reg_232 <= tmp_fu_124_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond_fu_100_p2 == 1'b0))) begin
        tmp_8_reg_227 <= tmp_8_fu_112_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_23) begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_52) begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_77) begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_139) begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_90) begin
        ap_sig_cseq_ST_st5_fsm_4 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_158) begin
        ap_sig_cseq_ST_st6_fsm_5 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st6_fsm_5 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : begin
            if (~(exitcond_fu_100_p2 == 1'b0)) begin
                ap_NS_fsm = ap_ST_st6_fsm_5;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : begin
            ap_NS_fsm = ap_ST_st4_fsm_3;
        end
        ap_ST_st4_fsm_3 : begin
            ap_NS_fsm = ap_ST_st5_fsm_4;
        end
        ap_ST_st5_fsm_4 : begin
            ap_NS_fsm = ap_ST_st2_fsm_1;
        end
        ap_ST_st6_fsm_5 : begin
            ap_NS_fsm = ap_ST_st1_fsm_0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign M_V_cast_fu_88_p1 = M0_V;

assign M_V_fu_84_p1 = M0_V;

assign X_V_fu_76_p1 = X0_V;

assign Y_V_fu_80_p1 = Y0_V;

always @ (*) begin
    ap_sig_139 = (1'b1 == ap_CS_fsm[ap_const_lv32_3]);
end

always @ (*) begin
    ap_sig_158 = (1'b1 == ap_CS_fsm[ap_const_lv32_5]);
end

always @ (*) begin
    ap_sig_23 = (ap_CS_fsm[ap_const_lv32_0] == 1'b1);
end

always @ (*) begin
    ap_sig_52 = (1'b1 == ap_CS_fsm[ap_const_lv32_1]);
end

always @ (*) begin
    ap_sig_77 = (1'b1 == ap_CS_fsm[ap_const_lv32_2]);
end

always @ (*) begin
    ap_sig_90 = (1'b1 == ap_CS_fsm[ap_const_lv32_4]);
end

assign exitcond_fu_100_p2 = ((i_assign_reg_65 == ap_const_lv11_400) ? 1'b1 : 1'b0);

assign grp_fu_119_p1 = p_s_reg_54;

assign grp_fu_137_p0 = p_s_reg_54[1023:0];

assign i_assign_cast1_fu_96_p1 = i_assign_reg_65;

assign i_fu_106_p2 = (i_assign_reg_65 + ap_const_lv11_1);

assign p_Val2_1_fu_142_p3 = ((tmp_8_reg_227[0:0] === 1'b1) ? grp_fu_119_p2 : p_cast_reg_213);

assign p_cast_fu_92_p1 = p_s_reg_54;

assign ssdm_int_V_write_assign_fu_182_p3 = ((tmp_reg_232[0:0] === 1'b1) ? tmp_6_reg_242 : grp_fu_137_p2);

assign tmp_3_fu_166_p4 = {{grp_fu_162_p2[ap_const_lv32_401 : ap_const_lv32_1]}};

assign tmp_5_fu_176_p3 = ((tmp_9_reg_252[0:0] === 1'b1) ? tmp_3_fu_166_p4 : tmp_4_reg_257);

assign tmp_6_fu_133_p1 = p_s_reg_54[1023:0];

assign tmp_8_fu_112_p3 = X_V_reg_193[i_assign_cast1_fu_96_p1];

assign tmp_9_fu_148_p1 = p_Val2_1_fu_142_p3[0:0];

assign tmp_fu_124_p2 = ((p_s_reg_54 < M_V_cast_reg_208) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    X_V_reg_193[1025:1024] <= 2'b00;
    Y_V_reg_198[1025:1024] <= 2'b00;
    M_V_reg_203[1025:1024] <= 2'b00;
    M_V_cast_reg_208[1024] <= 1'b0;
    p_cast_reg_213[1025] <= 1'b0;
end

endmodule //rsaModExp_montMult
