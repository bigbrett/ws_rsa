-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity rsaModExp_interleaveModMult is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    Y_V : IN STD_LOGIC_VECTOR (1023 downto 0);
    M_V : IN STD_LOGIC_VECTOR (1023 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (1023 downto 0) );
end;


architecture behav of rsaModExp_interleaveModMult is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1028_lc_1 : STD_LOGIC_VECTOR (1027 downto
    constant ap_const_lv12_400 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv1028_lc_2 : STD_LOGIC_VECTOR (1027 downto
    constant ap_const_lv1025_lc_3 : STD_LOGIC_VECTOR (1024 downto
    constant ap_const_lv12_FFF : STD_LOGIC_VECTOR (11 downto 0) := "111111111111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1024_lc_1 : STD_LOGIC_VECTOR (1023 downto

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_24 : BOOLEAN;
    signal tmp_fu_60_p1 : STD_LOGIC_VECTOR (1027 downto 0);
    signal tmp_reg_144 : STD_LOGIC_VECTOR (1027 downto 0);
    signal tmp_s_fu_64_p1 : STD_LOGIC_VECTOR (1027 downto 0);
    signal tmp_s_reg_152 : STD_LOGIC_VECTOR (1027 downto 0);
    signal r_V_fu_80_p2 : STD_LOGIC_VECTOR (1027 downto 0);
    signal r_V_reg_160 : STD_LOGIC_VECTOR (1027 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_46 : BOOLEAN;
    signal tmp_10_fu_72_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_86_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_reg_166 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_99_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_reg_171 : STD_LOGIC_VECTOR (11 downto 0);
    signal P_V_4_fu_109_p3 : STD_LOGIC_VECTOR (1027 downto 0);
    signal P_V_4_reg_176 : STD_LOGIC_VECTOR (1027 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_63 : BOOLEAN;
    signal p_036_1_P_V_2_fu_123_p3 : STD_LOGIC_VECTOR (1027 downto 0);
    signal p_036_1_P_V_2_reg_183 : STD_LOGIC_VECTOR (1027 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_72 : BOOLEAN;
    signal tmp_5_fu_130_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_190 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_81 : BOOLEAN;
    signal P_V_5_fu_138_p3 : STD_LOGIC_VECTOR (1027 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_90 : BOOLEAN;
    signal p_Val2_s_reg_38 : STD_LOGIC_VECTOR (1027 downto 0);
    signal i_assign_reg_49 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_assign_cast_fu_68_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_94_p0 : STD_LOGIC_VECTOR (1027 downto 0);
    signal grp_fu_94_p2 : STD_LOGIC_VECTOR (1027 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_130 : BOOLEAN;
    signal tmp_4_fu_119_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_115_p2 : STD_LOGIC_VECTOR (1027 downto 0);
    signal grp_fu_134_p2 : STD_LOGIC_VECTOR (1027 downto 0);
    signal tmp_11_fu_105_p1 : STD_LOGIC_VECTOR (1023 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (1023 downto
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);

    component rsaModExp_add_1028ns_1028ns_1028_2 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (1027 downto 0);
        din1 : IN STD_LOGIC_VECTOR (1027 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (1027 downto 0) );
    end component;


    component rsaModExp_sub_1028ns_1028ns_1028_2 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (1027 downto 0);
        din1 : IN STD_LOGIC_VECTOR (1027 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (1027 downto 0) );
    end component;



begin
    rsaModExp_add_1028ns_1028ns_1028_2_U1 : component rsaModExp_add_1028ns_1028ns_1028_2
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 1028,
        din1_WIDTH => 1028,
        dout_WIDTH => 1028)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_94_p0,
        din1 => tmp_s_reg_152,
        ce => ap_const_logic_1,
        dout => grp_fu_94_p2);

    rsaModExp_sub_1028ns_1028ns_1028_2_U2 : component rsaModExp_sub_1028ns_1028ns_1028_2
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 1028,
        din1_WIDTH => 1028,
        dout_WIDTH => 1028)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => P_V_4_reg_176,
        din1 => tmp_reg_144,
        ce => ap_const_logic_1,
        dout => grp_fu_115_p2);

    rsaModExp_sub_1028ns_1028ns_1028_2_U3 : component rsaModExp_sub_1028ns_1028ns_1028_2
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 1028,
        din1_WIDTH => 1028,
        dout_WIDTH => 1028)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_036_1_P_V_2_reg_183,
        din1 => tmp_reg_144,
        ce => ap_const_logic_1,
        dout => grp_fu_134_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv1024_lc_1;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((tmp_10_fu_72_p3 = ap_const_lv1_0)))) then 
                    ap_return_preg <= tmp_11_fu_105_p1;
                end if; 
            end if;
        end if;
    end process;


    i_assign_reg_49_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
                i_assign_reg_49 <= i_reg_171;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                i_assign_reg_49 <= ap_const_lv12_400;
            end if; 
        end if;
    end process;

    p_Val2_s_reg_38_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
                p_Val2_s_reg_38 <= P_V_5_fu_138_p3;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                p_Val2_s_reg_38 <= ap_const_lv1028_lc_1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                P_V_4_reg_176 <= P_V_4_fu_109_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((tmp_10_fu_72_p3 = ap_const_lv1_0)))) then
                ap_return <= tmp_11_fu_105_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (tmp_10_fu_72_p3 = ap_const_lv1_0))) then
                i_reg_171 <= i_fu_99_p2;
                    r_V_reg_160(1027 downto 1) <= r_V_fu_80_p2(1027 downto 1);
                tmp_13_reg_166 <= tmp_13_fu_86_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then
                p_036_1_P_V_2_reg_183 <= p_036_1_P_V_2_fu_123_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then
                tmp_5_reg_190 <= tmp_5_fu_130_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then
                    tmp_reg_144(1023 downto 0) <= tmp_fu_60_p1(1023 downto 0);
                    tmp_s_reg_152(1023 downto 0) <= tmp_s_fu_64_p1(1023 downto 0);
            end if;
        end if;
    end process;
    tmp_reg_144(1027 downto 1024) <= "0000";
    tmp_s_reg_152(1027 downto 1024) <= "0000";
    r_V_reg_160(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, tmp_10_fu_72_p3)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((tmp_10_fu_72_p3 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st2_fsm_1;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    P_V_4_fu_109_p3 <= 
        grp_fu_94_p2 when (tmp_13_reg_166(0) = '1') else 
        r_V_reg_160;
    P_V_5_fu_138_p3 <= 
        p_036_1_P_V_2_reg_183 when (tmp_5_reg_190(0) = '1') else 
        grp_fu_134_p2;

    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, tmp_10_fu_72_p3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((tmp_10_fu_72_p3 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_130_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_130 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    ap_sig_24_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_24 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_46_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_46 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_63_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_63 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    ap_sig_72_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_72 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    ap_sig_81_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_81 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    ap_sig_90_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_90 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_24)
    begin
        if (ap_sig_24) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_46)
    begin
        if (ap_sig_46) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_63)
    begin
        if (ap_sig_63) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_130)
    begin
        if (ap_sig_130) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_72)
    begin
        if (ap_sig_72) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_81)
    begin
        if (ap_sig_81) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_90)
    begin
        if (ap_sig_90) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_94_p0 <= std_logic_vector(shift_left(unsigned(p_Val2_s_reg_38),to_integer(unsigned('0' & ap_const_lv1028_lc_2(31-1 downto 0)))));
        i_assign_cast_fu_68_p1 <= std_logic_vector(resize(signed(i_assign_reg_49),32));

    i_fu_99_p2 <= std_logic_vector(signed(ap_const_lv12_FFF) + signed(i_assign_reg_49));
    p_036_1_P_V_2_fu_123_p3 <= 
        P_V_4_reg_176 when (tmp_4_fu_119_p2(0) = '1') else 
        grp_fu_115_p2;
    r_V_fu_80_p2 <= std_logic_vector(shift_left(unsigned(p_Val2_s_reg_38),to_integer(unsigned('0' & ap_const_lv1028_lc_2(31-1 downto 0)))));
    tmp_10_fu_72_p3 <= i_assign_reg_49(11 downto 11);
    tmp_11_fu_105_p1 <= p_Val2_s_reg_38(1024 - 1 downto 0);
    tmp_13_fu_86_p3 <= ap_const_lv1025_lc_3(to_integer(unsigned(i_assign_cast_fu_68_p1)) downto to_integer(unsigned(i_assign_cast_fu_68_p1))) when (to_integer(unsigned(i_assign_cast_fu_68_p1))>= 0 and to_integer(unsigned(i_assign_cast_fu_68_p1))<=1024) else "-";
    tmp_4_fu_119_p2 <= "1" when (unsigned(P_V_4_reg_176) < unsigned(tmp_reg_144)) else "0";
    tmp_5_fu_130_p2 <= "1" when (unsigned(p_036_1_P_V_2_reg_183) < unsigned(tmp_reg_144)) else "0";
    tmp_fu_60_p1 <= std_logic_vector(resize(unsigned(M_V),1028));
    tmp_s_fu_64_p1 <= std_logic_vector(resize(unsigned(Y_V),1028));
end behav;
