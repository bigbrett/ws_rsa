// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "rsaModExp.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic rsaModExp::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic rsaModExp::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<7> rsaModExp::ap_ST_st1_fsm_0 = "1";
const sc_lv<7> rsaModExp::ap_ST_st2_fsm_1 = "10";
const sc_lv<7> rsaModExp::ap_ST_st3_fsm_2 = "100";
const sc_lv<7> rsaModExp::ap_ST_st4_fsm_3 = "1000";
const sc_lv<7> rsaModExp::ap_ST_st5_fsm_4 = "10000";
const sc_lv<7> rsaModExp::ap_ST_st6_fsm_5 = "100000";
const sc_lv<7> rsaModExp::ap_ST_st7_fsm_6 = "1000000";
const sc_lv<32> rsaModExp::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> rsaModExp::ap_const_lv1_1 = "1";
const sc_lv<32> rsaModExp::ap_const_lv32_3 = "11";
const sc_lv<1> rsaModExp::ap_const_lv1_0 = "0";
const sc_lv<32> rsaModExp::ap_const_lv32_1 = "1";
const sc_lv<32> rsaModExp::ap_const_lv32_2 = "10";
const sc_lv<32> rsaModExp::ap_const_lv32_4 = "100";
const sc_lv<32> rsaModExp::ap_const_lv32_5 = "101";
const sc_lv<12> rsaModExp::ap_const_lv12_7FF = "11111111111";
const sc_lv<2048> rsaModExp::ap_const_lv2048_lc_2 = "1";
const sc_lv<32> rsaModExp::ap_const_lv32_6 = "110";
const sc_lv<32> rsaModExp::ap_const_lv32_B = "1011";
const sc_lv<12> rsaModExp::ap_const_lv12_FFF = "111111111111";

rsaModExp::rsaModExp(sc_module_name name) : sc_module(name), mVcdFile(0) {
    grp_rsaModExp_interleaveModMult_fu_89 = new rsaModExp_interleaveModMult("grp_rsaModExp_interleaveModMult_fu_89");
    grp_rsaModExp_interleaveModMult_fu_89->ap_clk(ap_clk);
    grp_rsaModExp_interleaveModMult_fu_89->ap_rst(ap_rst);
    grp_rsaModExp_interleaveModMult_fu_89->ap_start(grp_rsaModExp_interleaveModMult_fu_89_ap_start);
    grp_rsaModExp_interleaveModMult_fu_89->ap_done(grp_rsaModExp_interleaveModMult_fu_89_ap_done);
    grp_rsaModExp_interleaveModMult_fu_89->ap_idle(grp_rsaModExp_interleaveModMult_fu_89_ap_idle);
    grp_rsaModExp_interleaveModMult_fu_89->ap_ready(grp_rsaModExp_interleaveModMult_fu_89_ap_ready);
    grp_rsaModExp_interleaveModMult_fu_89->Y_V(grp_rsaModExp_interleaveModMult_fu_89_Y_V);
    grp_rsaModExp_interleaveModMult_fu_89->M_V(n_V);
    grp_rsaModExp_interleaveModMult_fu_89->ap_return(grp_rsaModExp_interleaveModMult_fu_89_ap_return);
    grp_rsaModExp_montMult_fu_112 = new rsaModExp_montMult("grp_rsaModExp_montMult_fu_112");
    grp_rsaModExp_montMult_fu_112->ap_clk(ap_clk);
    grp_rsaModExp_montMult_fu_112->ap_rst(ap_rst);
    grp_rsaModExp_montMult_fu_112->ap_start(grp_rsaModExp_montMult_fu_112_ap_start);
    grp_rsaModExp_montMult_fu_112->ap_done(grp_rsaModExp_montMult_fu_112_ap_done);
    grp_rsaModExp_montMult_fu_112->ap_idle(grp_rsaModExp_montMult_fu_112_ap_idle);
    grp_rsaModExp_montMult_fu_112->ap_ready(grp_rsaModExp_montMult_fu_112_ap_ready);
    grp_rsaModExp_montMult_fu_112->X0_V(grp_rsaModExp_montMult_fu_112_X0_V);
    grp_rsaModExp_montMult_fu_112->Y0_V(grp_rsaModExp_montMult_fu_112_Y0_V);
    grp_rsaModExp_montMult_fu_112->M0_V(n_V);
    grp_rsaModExp_montMult_fu_112->ap_return(grp_rsaModExp_montMult_fu_112_ap_return);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_done);
    sensitive << ( grp_rsaModExp_montMult_fu_112_ap_done );
    sensitive << ( ap_sig_cseq_ST_st7_fsm_6 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( grp_rsaModExp_montMult_fu_112_ap_done );
    sensitive << ( ap_sig_cseq_ST_st7_fsm_6 );

    SC_METHOD(thread_ap_sig_102);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_141);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_22);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_41);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_64);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_77);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_89);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_cseq_ST_st1_fsm_0);
    sensitive << ( ap_sig_22 );

    SC_METHOD(thread_ap_sig_cseq_ST_st2_fsm_1);
    sensitive << ( ap_sig_64 );

    SC_METHOD(thread_ap_sig_cseq_ST_st3_fsm_2);
    sensitive << ( ap_sig_77 );

    SC_METHOD(thread_ap_sig_cseq_ST_st4_fsm_3);
    sensitive << ( ap_sig_41 );

    SC_METHOD(thread_ap_sig_cseq_ST_st5_fsm_4);
    sensitive << ( ap_sig_89 );

    SC_METHOD(thread_ap_sig_cseq_ST_st6_fsm_5);
    sensitive << ( ap_sig_102 );

    SC_METHOD(thread_ap_sig_cseq_ST_st7_fsm_6);
    sensitive << ( ap_sig_141 );

    SC_METHOD(thread_grp_rsaModExp_interleaveModMult_fu_89_Y_V);
    sensitive << ( M_V );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );

    SC_METHOD(thread_grp_rsaModExp_interleaveModMult_fu_89_ap_start);
    sensitive << ( ap_reg_grp_rsaModExp_interleaveModMult_fu_89_ap_start );

    SC_METHOD(thread_grp_rsaModExp_montMult_fu_112_X0_V);
    sensitive << ( reg_151 );
    sensitive << ( Mbar_V_reg_205 );
    sensitive << ( tmp_1_reg_218 );
    sensitive << ( ap_sig_cseq_ST_st5_fsm_4 );
    sensitive << ( ap_sig_cseq_ST_st6_fsm_5 );
    sensitive << ( ap_sig_cseq_ST_st7_fsm_6 );

    SC_METHOD(thread_grp_rsaModExp_montMult_fu_112_Y0_V);
    sensitive << ( reg_151 );
    sensitive << ( tmp_1_reg_218 );
    sensitive << ( xbar_V_2_reg_222 );
    sensitive << ( ap_sig_cseq_ST_st5_fsm_4 );
    sensitive << ( ap_sig_cseq_ST_st6_fsm_5 );
    sensitive << ( ap_sig_cseq_ST_st7_fsm_6 );

    SC_METHOD(thread_grp_rsaModExp_montMult_fu_112_ap_start);
    sensitive << ( ap_reg_grp_rsaModExp_montMult_fu_112_ap_start );

    SC_METHOD(thread_i_assign_cast_fu_162_p1);
    sensitive << ( i_assign_reg_77 );

    SC_METHOD(thread_i_fu_181_p2);
    sensitive << ( i_assign_reg_77 );

    SC_METHOD(thread_out_V);
    sensitive << ( grp_rsaModExp_montMult_fu_112_ap_return );
    sensitive << ( grp_rsaModExp_montMult_fu_112_ap_done );
    sensitive << ( ap_sig_cseq_ST_st7_fsm_6 );

    SC_METHOD(thread_out_V_ap_vld);
    sensitive << ( grp_rsaModExp_montMult_fu_112_ap_done );
    sensitive << ( ap_sig_cseq_ST_st7_fsm_6 );

    SC_METHOD(thread_tmp_1_fu_174_p3);
    sensitive << ( e_V );
    sensitive << ( i_assign_cast_fu_162_p1 );

    SC_METHOD(thread_tmp_fu_166_p3);
    sensitive << ( i_assign_reg_77 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( tmp_fu_166_p3 );
    sensitive << ( grp_rsaModExp_interleaveModMult_fu_89_ap_done );
    sensitive << ( tmp_1_reg_218 );
    sensitive << ( grp_rsaModExp_montMult_fu_112_ap_done );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "0000001";
    ap_reg_grp_rsaModExp_interleaveModMult_fu_89_ap_start = SC_LOGIC_0;
    ap_reg_grp_rsaModExp_montMult_fu_112_ap_start = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "rsaModExp_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, M_V, "(port)M_V");
    sc_trace(mVcdFile, e_V, "(port)e_V");
    sc_trace(mVcdFile, n_V, "(port)n_V");
    sc_trace(mVcdFile, out_V, "(port)out_V");
    sc_trace(mVcdFile, out_V_ap_vld, "(port)out_V_ap_vld");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st1_fsm_0, "ap_sig_cseq_ST_st1_fsm_0");
    sc_trace(mVcdFile, ap_sig_22, "ap_sig_22");
    sc_trace(mVcdFile, reg_151, "reg_151");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st4_fsm_3, "ap_sig_cseq_ST_st4_fsm_3");
    sc_trace(mVcdFile, ap_sig_41, "ap_sig_41");
    sc_trace(mVcdFile, tmp_fu_166_p3, "tmp_fu_166_p3");
    sc_trace(mVcdFile, grp_rsaModExp_interleaveModMult_fu_89_ap_return, "grp_rsaModExp_interleaveModMult_fu_89_ap_return");
    sc_trace(mVcdFile, Mbar_V_reg_205, "Mbar_V_reg_205");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st2_fsm_1, "ap_sig_cseq_ST_st2_fsm_1");
    sc_trace(mVcdFile, ap_sig_64, "ap_sig_64");
    sc_trace(mVcdFile, grp_rsaModExp_interleaveModMult_fu_89_ap_done, "grp_rsaModExp_interleaveModMult_fu_89_ap_done");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st3_fsm_2, "ap_sig_cseq_ST_st3_fsm_2");
    sc_trace(mVcdFile, ap_sig_77, "ap_sig_77");
    sc_trace(mVcdFile, tmp_1_fu_174_p3, "tmp_1_fu_174_p3");
    sc_trace(mVcdFile, tmp_1_reg_218, "tmp_1_reg_218");
    sc_trace(mVcdFile, grp_rsaModExp_montMult_fu_112_ap_return, "grp_rsaModExp_montMult_fu_112_ap_return");
    sc_trace(mVcdFile, xbar_V_2_reg_222, "xbar_V_2_reg_222");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st5_fsm_4, "ap_sig_cseq_ST_st5_fsm_4");
    sc_trace(mVcdFile, ap_sig_89, "ap_sig_89");
    sc_trace(mVcdFile, grp_rsaModExp_montMult_fu_112_ap_done, "grp_rsaModExp_montMult_fu_112_ap_done");
    sc_trace(mVcdFile, i_fu_181_p2, "i_fu_181_p2");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st6_fsm_5, "ap_sig_cseq_ST_st6_fsm_5");
    sc_trace(mVcdFile, ap_sig_102, "ap_sig_102");
    sc_trace(mVcdFile, grp_rsaModExp_interleaveModMult_fu_89_ap_start, "grp_rsaModExp_interleaveModMult_fu_89_ap_start");
    sc_trace(mVcdFile, grp_rsaModExp_interleaveModMult_fu_89_ap_idle, "grp_rsaModExp_interleaveModMult_fu_89_ap_idle");
    sc_trace(mVcdFile, grp_rsaModExp_interleaveModMult_fu_89_ap_ready, "grp_rsaModExp_interleaveModMult_fu_89_ap_ready");
    sc_trace(mVcdFile, grp_rsaModExp_interleaveModMult_fu_89_Y_V, "grp_rsaModExp_interleaveModMult_fu_89_Y_V");
    sc_trace(mVcdFile, grp_rsaModExp_montMult_fu_112_ap_start, "grp_rsaModExp_montMult_fu_112_ap_start");
    sc_trace(mVcdFile, grp_rsaModExp_montMult_fu_112_ap_idle, "grp_rsaModExp_montMult_fu_112_ap_idle");
    sc_trace(mVcdFile, grp_rsaModExp_montMult_fu_112_ap_ready, "grp_rsaModExp_montMult_fu_112_ap_ready");
    sc_trace(mVcdFile, grp_rsaModExp_montMult_fu_112_X0_V, "grp_rsaModExp_montMult_fu_112_X0_V");
    sc_trace(mVcdFile, grp_rsaModExp_montMult_fu_112_Y0_V, "grp_rsaModExp_montMult_fu_112_Y0_V");
    sc_trace(mVcdFile, i_assign_reg_77, "i_assign_reg_77");
    sc_trace(mVcdFile, ap_reg_grp_rsaModExp_interleaveModMult_fu_89_ap_start, "ap_reg_grp_rsaModExp_interleaveModMult_fu_89_ap_start");
    sc_trace(mVcdFile, ap_reg_grp_rsaModExp_montMult_fu_112_ap_start, "ap_reg_grp_rsaModExp_montMult_fu_112_ap_start");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st7_fsm_6, "ap_sig_cseq_ST_st7_fsm_6");
    sc_trace(mVcdFile, ap_sig_141, "ap_sig_141");
    sc_trace(mVcdFile, xbar_V_1_fu_48, "xbar_V_1_fu_48");
    sc_trace(mVcdFile, i_assign_cast_fu_162_p1, "i_assign_cast_fu_162_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("rsaModExp.hdltvin.dat");
    mHdltvoutHandle.open("rsaModExp.hdltvout.dat");
}

rsaModExp::~rsaModExp() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete grp_rsaModExp_interleaveModMult_fu_89;
    delete grp_rsaModExp_montMult_fu_112;
}

void rsaModExp::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_grp_rsaModExp_interleaveModMult_fu_89_ap_start = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
              !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
              !esl_seteq<1,1,1>(ap_const_logic_0, grp_rsaModExp_interleaveModMult_fu_89_ap_done.read())))) {
            ap_reg_grp_rsaModExp_interleaveModMult_fu_89_ap_start = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_rsaModExp_interleaveModMult_fu_89_ap_ready.read())) {
            ap_reg_grp_rsaModExp_interleaveModMult_fu_89_ap_start = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_grp_rsaModExp_montMult_fu_112_ap_start = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()) && 
              esl_seteq<1,1,1>(tmp_fu_166_p3.read(), ap_const_lv1_0)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()) && 
              !esl_seteq<1,1,1>(tmp_fu_166_p3.read(), ap_const_lv1_0)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st5_fsm_4.read()) && 
              !esl_seteq<1,1,1>(ap_const_logic_0, grp_rsaModExp_montMult_fu_112_ap_done.read()) && 
              !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_reg_218.read())))) {
            ap_reg_grp_rsaModExp_montMult_fu_112_ap_start = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_rsaModExp_montMult_fu_112_ap_ready.read())) {
            ap_reg_grp_rsaModExp_montMult_fu_112_ap_start = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st6_fsm_5.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, grp_rsaModExp_montMult_fu_112_ap_done.read()) && !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_reg_218.read())))) {
        i_assign_reg_77 = i_fu_181_p2.read();
    } else if ((!esl_seteq<1,1,1>(ap_const_logic_0, grp_rsaModExp_interleaveModMult_fu_89_ap_done.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()))) {
        i_assign_reg_77 = ap_const_lv12_7FF;
    }
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st5_fsm_4.read()) && 
          !esl_seteq<1,1,1>(ap_const_logic_0, grp_rsaModExp_montMult_fu_112_ap_done.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_reg_218.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st6_fsm_5.read()) && 
          !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_reg_218.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, grp_rsaModExp_montMult_fu_112_ap_done.read()) && !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_reg_218.read()))))) {
        xbar_V_1_fu_48 = grp_rsaModExp_montMult_fu_112_ap_return.read();
    } else if ((!esl_seteq<1,1,1>(ap_const_logic_0, grp_rsaModExp_interleaveModMult_fu_89_ap_done.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()))) {
        xbar_V_1_fu_48 = grp_rsaModExp_interleaveModMult_fu_89_ap_return.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && !esl_seteq<1,1,1>(ap_const_logic_0, grp_rsaModExp_interleaveModMult_fu_89_ap_done.read()))) {
        Mbar_V_reg_205 = grp_rsaModExp_interleaveModMult_fu_89_ap_return.read();
    }
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()) && 
  esl_seteq<1,1,1>(tmp_fu_166_p3.read(), ap_const_lv1_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()) && 
  !esl_seteq<1,1,1>(tmp_fu_166_p3.read(), ap_const_lv1_0)))) {
        reg_151 = xbar_V_1_fu_48.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()) && esl_seteq<1,1,1>(tmp_fu_166_p3.read(), ap_const_lv1_0))) {
        tmp_1_reg_218 = tmp_1_fu_174_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st5_fsm_4.read()) && !esl_seteq<1,1,1>(ap_const_logic_0, grp_rsaModExp_montMult_fu_112_ap_done.read()))) {
        xbar_V_2_reg_222 = grp_rsaModExp_montMult_fu_112_ap_return.read();
    }
}

void rsaModExp::thread_ap_done() {
    if ((!esl_seteq<1,1,1>(ap_const_logic_0, grp_rsaModExp_montMult_fu_112_ap_done.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st7_fsm_6.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void rsaModExp::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void rsaModExp::thread_ap_ready() {
    if ((!esl_seteq<1,1,1>(ap_const_logic_0, grp_rsaModExp_montMult_fu_112_ap_done.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st7_fsm_6.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void rsaModExp::thread_ap_sig_102() {
    ap_sig_102 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(5, 5));
}

void rsaModExp::thread_ap_sig_141() {
    ap_sig_141 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(6, 6));
}

void rsaModExp::thread_ap_sig_22() {
    ap_sig_22 = esl_seteq<1,1,1>(ap_CS_fsm.read().range(0, 0), ap_const_lv1_1);
}

void rsaModExp::thread_ap_sig_41() {
    ap_sig_41 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(3, 3));
}

void rsaModExp::thread_ap_sig_64() {
    ap_sig_64 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(1, 1));
}

void rsaModExp::thread_ap_sig_77() {
    ap_sig_77 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(2, 2));
}

void rsaModExp::thread_ap_sig_89() {
    ap_sig_89 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(4, 4));
}

void rsaModExp::thread_ap_sig_cseq_ST_st1_fsm_0() {
    if (ap_sig_22.read()) {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    }
}

void rsaModExp::thread_ap_sig_cseq_ST_st2_fsm_1() {
    if (ap_sig_64.read()) {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    }
}

void rsaModExp::thread_ap_sig_cseq_ST_st3_fsm_2() {
    if (ap_sig_77.read()) {
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    }
}

void rsaModExp::thread_ap_sig_cseq_ST_st4_fsm_3() {
    if (ap_sig_41.read()) {
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    }
}

void rsaModExp::thread_ap_sig_cseq_ST_st5_fsm_4() {
    if (ap_sig_89.read()) {
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_0;
    }
}

void rsaModExp::thread_ap_sig_cseq_ST_st6_fsm_5() {
    if (ap_sig_102.read()) {
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_0;
    }
}

void rsaModExp::thread_ap_sig_cseq_ST_st7_fsm_6() {
    if (ap_sig_141.read()) {
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_0;
    }
}

void rsaModExp::thread_grp_rsaModExp_interleaveModMult_fu_89_Y_V() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read())) {
        grp_rsaModExp_interleaveModMult_fu_89_Y_V = ap_const_lv2048_lc_2;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read())) {
        grp_rsaModExp_interleaveModMult_fu_89_Y_V = M_V.read();
    } else {
        grp_rsaModExp_interleaveModMult_fu
    }
}

void rsaModExp::thread_grp_rsaModExp_interleaveModMult_fu_89_ap_start() {
    grp_rsaModExp_interleaveModMult_fu_89_ap_start = ap_reg_grp_rsaModExp_interleaveModMult_fu_89_ap_start.read();
}

void rsaModExp::thread_grp_rsaModExp_montMult_fu_112_X0_V() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st6_fsm_5.read()) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_reg_218.read()))) {
        grp_rsaModExp_montMult_fu_112_X0_V = Mbar_V_reg_205.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st5_fsm_4.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st7_fsm_6.read()))) {
        grp_rsaModExp_montMult_fu_112_X0_V = reg_151.read();
    } else {
        grp_rsaModExp_montMult_fu
    }
}

void rsaModExp::thread_grp_rsaModExp_montMult_fu_112_Y0_V() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st6_fsm_5.read()) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_reg_218.read()))) {
        grp_rsaModExp_montMult_fu_112_Y0_V = xbar_V_2_reg_222.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st7_fsm_6.read())) {
        grp_rsaModExp_montMult_fu_112_Y0_V = ap_const_lv2048_lc_2;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st5_fsm_4.read())) {
        grp_rsaModExp_montMult_fu_112_Y0_V = reg_151.read();
    } else {
        grp_rsaModExp_montMult_fu
    }
}

void rsaModExp::thread_grp_rsaModExp_montMult_fu_112_ap_start() {
    grp_rsaModExp_montMult_fu_112_ap_start = ap_reg_grp_rsaModExp_montMult_fu_112_ap_start.read();
}

void rsaModExp::thread_i_assign_cast_fu_162_p1() {
    i_assign_cast_fu_162_p1 = esl_sext<32,12>(i_assign_reg_77.read());
}

void rsaModExp::thread_i_fu_181_p2() {
    i_fu_181_p2 = (!i_assign_reg_77.read().is_01() || !ap_const_lv12_FFF.is_01())? sc_lv<12>(): (sc_biguint<12>(i_assign_reg_77.read()) + sc_bigint<12>(ap_const_lv12_FFF));
}

void rsaModExp::thread_out_V() {
    out_V = grp_rsaModExp_montMult_fu_112_ap_return.read();
}

void rsaModExp::thread_out_V_ap_vld() {
    if ((!esl_seteq<1,1,1>(ap_const_logic_0, grp_rsaModExp_montMult_fu_112_ap_done.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st7_fsm_6.read()))) {
        out_V_ap_vld = ap_const_logic_1;
    } else {
        out_V_ap_vld = ap_const_logic_0;
    }
}

void rsaModExp::thread_tmp_1_fu_174_p3() {
    tmp_1_fu_174_p3 = (!i_assign_cast_fu_162_p1.read().is_01() || sc_biguint<32>(i_assign_cast_fu_162_p1.read()).to_uint() >= 2048)? sc_lv<1>(): e_V.read().range(sc_biguint<32>(i_assign_cast_fu_162_p1.read()).to_uint(), sc_biguint<32>(i_assign_cast_fu_162_p1.read()).to_uint());
}

void rsaModExp::thread_tmp_fu_166_p3() {
    tmp_fu_166_p3 = i_assign_reg_77.read().range(11, 11);
}

void rsaModExp::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            }
            break;
        case 2 : 
            if (!esl_seteq<1,1,1>(ap_const_logic_0, grp_rsaModExp_interleaveModMult_fu_89_ap_done.read())) {
                ap_NS_fsm = ap_ST_st3_fsm_2;
            } else {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            }
            break;
        case 4 : 
            if (!esl_seteq<1,1,1>(ap_const_logic_0, grp_rsaModExp_interleaveModMult_fu_89_ap_done.read())) {
                ap_NS_fsm = ap_ST_st4_fsm_3;
            } else {
                ap_NS_fsm = ap_ST_st3_fsm_2;
            }
            break;
        case 8 : 
            if (!esl_seteq<1,1,1>(tmp_fu_166_p3.read(), ap_const_lv1_0)) {
                ap_NS_fsm = ap_ST_st7_fsm_6;
            } else {
                ap_NS_fsm = ap_ST_st5_fsm_4;
            }
            break;
        case 16 : 
            if (!esl_seteq<1,1,1>(ap_const_logic_0, grp_rsaModExp_montMult_fu_112_ap_done.read())) {
                ap_NS_fsm = ap_ST_st6_fsm_5;
            } else {
                ap_NS_fsm = ap_ST_st5_fsm_4;
            }
            break;
        case 32 : 
            if (!(esl_seteq<1,1,1>(ap_const_logic_0, grp_rsaModExp_montMult_fu_112_ap_done.read()) && !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_reg_218.read()))) {
                ap_NS_fsm = ap_ST_st4_fsm_3;
            } else {
                ap_NS_fsm = ap_ST_st6_fsm_5;
            }
            break;
        case 64 : 
            if (!esl_seteq<1,1,1>(ap_const_logic_0, grp_rsaModExp_montMult_fu_112_ap_done.read())) {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            } else {
                ap_NS_fsm = ap_ST_st7_fsm_6;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<7>) ("XXXXXXX");
            break;
    }
}

void rsaModExp::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"M_V\" :  \"" << M_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"e_V\" :  \"" << e_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"n_V\" :  \"" << n_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_V\" :  \"" << out_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_V_ap_vld\" :  \"" << out_V_ap_vld.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

