// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "montMult.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic montMult::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic montMult::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<12> montMult::ap_ST_fsm_state1 = "1";
const sc_lv<12> montMult::ap_ST_fsm_state2 = "10";
const sc_lv<12> montMult::ap_ST_fsm_state3 = "100";
const sc_lv<12> montMult::ap_ST_fsm_state4 = "1000";
const sc_lv<12> montMult::ap_ST_fsm_state5 = "10000";
const sc_lv<12> montMult::ap_ST_fsm_state6 = "100000";
const sc_lv<12> montMult::ap_ST_fsm_state7 = "1000000";
const sc_lv<12> montMult::ap_ST_fsm_state8 = "10000000";
const sc_lv<12> montMult::ap_ST_fsm_state9 = "100000000";
const sc_lv<12> montMult::ap_ST_fsm_state10 = "1000000000";
const sc_lv<12> montMult::ap_ST_fsm_state11 = "10000000000";
const sc_lv<12> montMult::ap_ST_fsm_state12 = "100000000000";
const sc_lv<32> montMult::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> montMult::ap_const_lv1_1 = "1";
const sc_lv<32> montMult::ap_const_lv32_1 = "1";
const sc_lv<1> montMult::ap_const_lv1_0 = "0";
const sc_lv<32> montMult::ap_const_lv32_4 = "100";
const sc_lv<32> montMult::ap_const_lv32_8 = "1000";
const sc_lv<2049> montMult::ap_const_lv2049_lc
const sc_lv<12> montMult::ap_const_lv12_0 = "000000000000";
const sc_lv<12> montMult::ap_const_lv12_800 = "100000000000";
const sc_lv<12> montMult::ap_const_lv12_1 = "1";
const sc_lv<32> montMult::ap_const_lv32_801 = "100000000001";
const sc_lv<32> montMult::ap_const_lv32_5 = "101";
const sc_lv<32> montMult::ap_const_lv32_B = "1011";
const sc_lv<2048> montMult::ap_const_lv2048_lc

montMult::montMult(sc_module_name name) : sc_module(name), mVcdFile(0) {
    rsaModExp_add_205bkb_U1 = new rsaModExp_add_205bkb<1,4,2050,2050,2050>("rsaModExp_add_205bkb_U1");
    rsaModExp_add_205bkb_U1->clk(ap_clk);
    rsaModExp_add_205bkb_U1->reset(ap_rst);
    rsaModExp_add_205bkb_U1->din0(Y_V_reg_190);
    rsaModExp_add_205bkb_U1->din1(grp_fu_111_p1);
    rsaModExp_add_205bkb_U1->ce(ap_var_for_const0);
    rsaModExp_add_205bkb_U1->dout(grp_fu_111_p2);
    rsaModExp_sub_204cud_U2 = new rsaModExp_sub_204cud<1,4,2048,2048,2048>("rsaModExp_sub_204cud_U2");
    rsaModExp_sub_204cud_U2->clk(ap_clk);
    rsaModExp_sub_204cud_U2->reset(ap_rst);
    rsaModExp_sub_204cud_U2->din0(grp_fu_129_p0);
    rsaModExp_sub_204cud_U2->din1(M0_V_read_reg_180);
    rsaModExp_sub_204cud_U2->ce(ap_var_for_const0);
    rsaModExp_sub_204cud_U2->dout(grp_fu_129_p2);
    rsaModExp_add_205bkb_U3 = new rsaModExp_add_205bkb<1,4,2050,2050,2050>("rsaModExp_add_205bkb_U3");
    rsaModExp_add_205bkb_U3->clk(ap_clk);
    rsaModExp_add_205bkb_U3->reset(ap_rst);
    rsaModExp_add_205bkb_U3->din0(M_V_reg_195);
    rsaModExp_add_205bkb_U3->din1(p_Val2_1_reg_239);
    rsaModExp_add_205bkb_U3->ce(ap_var_for_const0);
    rsaModExp_add_205bkb_U3->dout(grp_fu_154_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_M_V_cast_fu_80_p1);
    sensitive << ( M0_V );

    SC_METHOD(thread_M_V_fu_76_p1);
    sensitive << ( M0_V );

    SC_METHOD(thread_X_V_fu_68_p1);
    sensitive << ( X0_V );

    SC_METHOD(thread_Y_V_fu_72_p1);
    sensitive << ( Y0_V );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_exitcond_fu_92_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_assign_reg_57 );

    SC_METHOD(thread_grp_fu_111_p1);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( p_s_reg_46 );

    SC_METHOD(thread_grp_fu_129_p0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( p_s_reg_46 );

    SC_METHOD(thread_i_assign_cast1_fu_88_p1);
    sensitive << ( i_assign_reg_57 );

    SC_METHOD(thread_i_fu_98_p2);
    sensitive << ( i_assign_reg_57 );

    SC_METHOD(thread_p_Val2_1_fu_134_p3);
    sensitive << ( p_cast_reg_205 );
    sensitive << ( tmp_13_reg_219 );
    sensitive << ( grp_fu_111_p2 );

    SC_METHOD(thread_p_cast_fu_84_p1);
    sensitive << ( p_s_reg_46 );

    SC_METHOD(thread_ssdm_int_V_write_ass_fu_174_p3);
    sensitive << ( tmp_reg_224 );
    sensitive << ( tmp_11_reg_234 );
    sensitive << ( grp_fu_129_p2 );

    SC_METHOD(thread_tmp_11_fu_125_p1);
    sensitive << ( p_s_reg_46 );

    SC_METHOD(thread_tmp_13_fu_104_p3);
    sensitive << ( X_V_reg_185 );
    sensitive << ( i_assign_cast1_fu_88_p1 );

    SC_METHOD(thread_tmp_14_fu_140_p1);
    sensitive << ( p_Val2_1_fu_134_p3 );

    SC_METHOD(thread_tmp_3_fu_158_p4);
    sensitive << ( grp_fu_154_p2 );

    SC_METHOD(thread_tmp_5_fu_168_p3);
    sensitive << ( tmp_14_reg_244 );
    sensitive << ( tmp_4_reg_249 );
    sensitive << ( tmp_3_fu_158_p4 );

    SC_METHOD(thread_tmp_fu_116_p2);
    sensitive << ( M_V_cast_reg_200 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_92_p2 );
    sensitive << ( p_s_reg_46 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( exitcond_fu_92_p2 );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "000000000001";
    ap_return_preg
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "montMult_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, X0_V, "(port)X0_V");
    sc_trace(mVcdFile, Y0_V, "(port)Y0_V");
    sc_trace(mVcdFile, M0_V, "(port)M0_V");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, M0_V_read_reg_180, "M0_V_read_reg_180");
    sc_trace(mVcdFile, X_V_fu_68_p1, "X_V_fu_68_p1");
    sc_trace(mVcdFile, X_V_reg_185, "X_V_reg_185");
    sc_trace(mVcdFile, Y_V_fu_72_p1, "Y_V_fu_72_p1");
    sc_trace(mVcdFile, Y_V_reg_190, "Y_V_reg_190");
    sc_trace(mVcdFile, M_V_fu_76_p1, "M_V_fu_76_p1");
    sc_trace(mVcdFile, M_V_reg_195, "M_V_reg_195");
    sc_trace(mVcdFile, M_V_cast_fu_80_p1, "M_V_cast_fu_80_p1");
    sc_trace(mVcdFile, M_V_cast_reg_200, "M_V_cast_reg_200");
    sc_trace(mVcdFile, p_cast_fu_84_p1, "p_cast_fu_84_p1");
    sc_trace(mVcdFile, p_cast_reg_205, "p_cast_reg_205");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, i_fu_98_p2, "i_fu_98_p2");
    sc_trace(mVcdFile, i_reg_214, "i_reg_214");
    sc_trace(mVcdFile, tmp_13_fu_104_p3, "tmp_13_fu_104_p3");
    sc_trace(mVcdFile, tmp_13_reg_219, "tmp_13_reg_219");
    sc_trace(mVcdFile, exitcond_fu_92_p2, "exitcond_fu_92_p2");
    sc_trace(mVcdFile, tmp_fu_116_p2, "tmp_fu_116_p2");
    sc_trace(mVcdFile, tmp_reg_224, "tmp_reg_224");
    sc_trace(mVcdFile, tmp_11_fu_125_p1, "tmp_11_fu_125_p1");
    sc_trace(mVcdFile, tmp_11_reg_234, "tmp_11_reg_234");
    sc_trace(mVcdFile, p_Val2_1_fu_134_p3, "p_Val2_1_fu_134_p3");
    sc_trace(mVcdFile, p_Val2_1_reg_239, "p_Val2_1_reg_239");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, tmp_14_fu_140_p1, "tmp_14_fu_140_p1");
    sc_trace(mVcdFile, tmp_14_reg_244, "tmp_14_reg_244");
    sc_trace(mVcdFile, tmp_4_reg_249, "tmp_4_reg_249");
    sc_trace(mVcdFile, tmp_5_fu_168_p3, "tmp_5_fu_168_p3");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, p_s_reg_46, "p_s_reg_46");
    sc_trace(mVcdFile, i_assign_reg_57, "i_assign_reg_57");
    sc_trace(mVcdFile, i_assign_cast1_fu_88_p1, "i_assign_cast1_fu_88_p1");
    sc_trace(mVcdFile, grp_fu_111_p1, "grp_fu_111_p1");
    sc_trace(mVcdFile, grp_fu_129_p0, "grp_fu_129_p0");
    sc_trace(mVcdFile, grp_fu_111_p2, "grp_fu_111_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, grp_fu_154_p2, "grp_fu_154_p2");
    sc_trace(mVcdFile, tmp_3_fu_158_p4, "tmp_3_fu_158_p4");
    sc_trace(mVcdFile, grp_fu_129_p2, "grp_fu_129_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, ssdm_int_V_write_ass_fu_174_p3, "ssdm_int_V_write_ass_fu_174_p3");
    sc_trace(mVcdFile, ap_return_preg, "ap_return_preg");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

montMult::~montMult() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete rsaModExp_add_205bkb_U1;
    delete rsaModExp_sub_204cud_U2;
    delete rsaModExp_add_205bkb_U3;
}

void montMult::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void montMult::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_preg = ap_const_lv2048_lc_1;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state12.read()))) {
            ap_return_preg = ssdm_int_V_write_ass_fu_174_p3.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state9.read()))) {
        i_assign_reg_57 = i_reg_214.read();
    } else if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
                !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        i_assign_reg_57 = ap_const_lv12_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state9.read()))) {
        p_s_reg_46 = tmp_5_fu_168_p3.read();
    } else if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
                !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        p_s_reg_46 = ap_const_lv2049_lc_1;
    }
    if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        M0_V_read_reg_180 = M0_V.read();
        M_V_cast_reg_200 = M_V_cast_fu_80_p1.read();
        M_V_reg_195 = M_V_fu_76_p1.read();
        X_V_reg_185 = X_V_fu_68_p1.read();
        Y_V_reg_190 = Y_V_fu_72_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state12.read()))) {
        ap_return = ssdm_int_V_write_ass_fu_174_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()))) {
        i_reg_214 = i_fu_98_p2.read();
        p_cast_reg_205 = p_cast_fu_84_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state5.read()))) {
        p_Val2_1_reg_239 = p_Val2_1_fu_134_p3.read();
        tmp_14_reg_244 = tmp_14_fu_140_p1.read();
        tmp_4_reg_249 = p_Val2_1_fu_134_p3.read().range(2049, 1);
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()) && !esl_seteq<1,1,1>(exitcond_fu_92_p2.read(), ap_const_lv1_0))) {
        tmp_11_reg_234 = tmp_11_fu_125_p1.read();
        tmp_reg_224 = tmp_fu_116_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond_fu_92_p2.read(), ap_const_lv1_0))) {
        tmp_13_reg_219 = tmp_13_fu_104_p3.read();
    }
}

void montMult::thread_M_V_cast_fu_80_p1() {
    M_V_cast_fu_80_p1 = esl_zext<2049,2048>(M0_V.read());
}

void montMult::thread_M_V_fu_76_p1() {
    M_V_fu_76_p1 = esl_zext<2050,2048>(M0_V.read());
}

void montMult::thread_X_V_fu_68_p1() {
    X_V_fu_68_p1 = esl_zext<2050,2048>(X0_V.read());
}

void montMult::thread_Y_V_fu_72_p1() {
    Y_V_fu_72_p1 = esl_zext<2050,2048>(Y0_V.read());
}

void montMult::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read().range(0, 0);
}

void montMult::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read().range(11, 11);
}

void montMult::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read().range(1, 1);
}

void montMult::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read().range(4, 4);
}

void montMult::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read().range(5, 5);
}

void montMult::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read().range(8, 8);
}

void montMult::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void montMult::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void montMult::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state12.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void montMult::thread_exitcond_fu_92_p2() {
    exitcond_fu_92_p2 = (!i_assign_reg_57.read().is_01() || !ap_const_lv12_800.is_01())? sc_lv<1>(): sc_lv<1>(i_assign_reg_57.read() == ap_const_lv12_800);
}

void montMult::thread_grp_fu_111_p1() {
    grp_fu_111_p1 = esl_zext<2050,2049>(p_s_reg_46.read());
}

void montMult::thread_grp_fu_129_p0() {
    grp_fu_129_p0 = p_s_reg_46.read().range(2048-1, 0);
}

void montMult::thread_i_assign_cast1_fu_88_p1() {
    i_assign_cast1_fu_88_p1 = esl_zext<32,12>(i_assign_reg_57.read());
}

void montMult::thread_i_fu_98_p2() {
    i_fu_98_p2 = (!i_assign_reg_57.read().is_01() || !ap_const_lv12_1.is_01())? sc_lv<12>(): (sc_biguint<12>(i_assign_reg_57.read()) + sc_biguint<12>(ap_const_lv12_1));
}

void montMult::thread_p_Val2_1_fu_134_p3() {
    p_Val2_1_fu_134_p3 = (!tmp_13_reg_219.read()[0].is_01())? sc_lv<2050>(): ((tmp_13_reg_219.read()[0].to_bool())? grp_fu_111_p2.read(): p_cast_reg_205.read());
}

void montMult::thread_p_cast_fu_84_p1() {
    p_cast_fu_84_p1 = esl_zext<2050,2049>(p_s_reg_46.read());
}

void montMult::thread_ssdm_int_V_write_ass_fu_174_p3() {
    ssdm_int_V_write_ass_fu_174_p3 = (!tmp_reg_224.read()[0].is_01())? sc_lv<2048>(): ((tmp_reg_224.read()[0].to_bool())? tmp_11_reg_234.read(): grp_fu_129_p2.read());
}

void montMult::thread_tmp_11_fu_125_p1() {
    tmp_11_fu_125_p1 = p_s_reg_46.read().range(2048-1, 0);
}

void montMult::thread_tmp_13_fu_104_p3() {
    tmp_13_fu_104_p3 = (!i_assign_cast1_fu_88_p1.read().is_01() || sc_biguint<32>(i_assign_cast1_fu_88_p1.read()).to_uint() >= 2050)? sc_lv<1>(): X_V_reg_185.read().range(sc_biguint<32>(i_assign_cast1_fu_88_p1.read()).to_uint(), sc_biguint<32>(i_assign_cast1_fu_88_p1.read()).to_uint());
}

void montMult::thread_tmp_14_fu_140_p1() {
    tmp_14_fu_140_p1 = p_Val2_1_fu_134_p3.read().range(1-1, 0);
}

void montMult::thread_tmp_3_fu_158_p4() {
    tmp_3_fu_158_p4 = grp_fu_154_p2.read().range(2049, 1);
}

void montMult::thread_tmp_5_fu_168_p3() {
    tmp_5_fu_168_p3 = (!tmp_14_reg_244.read()[0].is_01())? sc_lv<2049>(): ((tmp_14_reg_244.read()[0].to_bool())? tmp_3_fu_158_p4.read(): tmp_4_reg_249.read());
}

void montMult::thread_tmp_fu_116_p2() {
    tmp_fu_116_p2 = (!p_s_reg_46.read().is_01() || !M_V_cast_reg_200.read().is_01())? sc_lv<1>(): (sc_biguint<2049>(p_s_reg_46.read()) < sc_biguint<2049>(M_V_cast_reg_200.read()));
}

void montMult::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if (!esl_seteq<1,1,1>(exitcond_fu_92_p2.read(), ap_const_lv1_0)) {
                ap_NS_fsm = ap_ST_fsm_state10;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XXXXXXXXXXXX";
            break;
    }
}

}

