// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "rsaModExp_interleaveModMult.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic rsaModExp_interleaveModMult::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic rsaModExp_interleaveModMult::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<7> rsaModExp_interleaveModMult::ap_ST_st1_fsm_0 = "1";
const sc_lv<7> rsaModExp_interleaveModMult::ap_ST_st2_fsm_1 = "10";
const sc_lv<7> rsaModExp_interleaveModMult::ap_ST_st3_fsm_2 = "100";
const sc_lv<7> rsaModExp_interleaveModMult::ap_ST_st4_fsm_3 = "1000";
const sc_lv<7> rsaModExp_interleaveModMult::ap_ST_st5_fsm_4 = "10000";
const sc_lv<7> rsaModExp_interleaveModMult::ap_ST_st6_fsm_5 = "100000";
const sc_lv<7> rsaModExp_interleaveModMult::ap_ST_st7_fsm_6 = "1000000";
const sc_lv<32> rsaModExp_interleaveModMult::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> rsaModExp_interleaveModMult::ap_const_lv1_1 = "1";
const sc_lv<32> rsaModExp_interleaveModMult::ap_const_lv32_1 = "1";
const sc_lv<1> rsaModExp_interleaveModMult::ap_const_lv1_0 = "0";
const sc_lv<32> rsaModExp_interleaveModMult::ap_const_lv32_2 = "10";
const sc_lv<32> rsaModExp_interleaveModMult::ap_const_lv32_4 = "100";
const sc_lv<32> rsaModExp_interleaveModMult::ap_const_lv32_5 = "101";
const sc_lv<32> rsaModExp_interleaveModMult::ap_const_lv32_6 = "110";
const sc_lv<1028> rsaModExp_interleaveModMult::ap_const_lv1028_lc
const sc_lv<12> rsaModExp_interleaveModMult::ap_const_lv12_400 = "10000000000";
const sc_lv<32> rsaModExp_interleaveModMult::ap_const_lv32_B = "1011";
const sc_lv<1028> rsaModExp_interleaveModMult::ap_const_lv1028_lc_2 = "1";
const sc_lv<1025> rsaModExp_interleaveModMult::ap_const_lv1025_lc
const sc_lv<12> rsaModExp_interleaveModMult::ap_const_lv12_FFF = "111111111111";
const sc_lv<32> rsaModExp_interleaveModMult::ap_const_lv32_3 = "11";
const sc_lv<1024> rsaModExp_interleaveModMult::ap_const_lv1024_lc

rsaModExp_interleaveModMult::rsaModExp_interleaveModMult(sc_module_name name) : sc_module(name), mVcdFile(0) {
    rsaModExp_add_1028ns_1028ns_1028_2_U1 = new rsaModExp_add_1028ns_1028ns_1028_2<1,2,1028,1028,1028>("rsaModExp_add_1028ns_1028ns_1028_2_U1");
    rsaModExp_add_1028ns_1028ns_1028_2_U1->clk(ap_clk);
    rsaModExp_add_1028ns_1028ns_1028_2_U1->reset(ap_rst);
    rsaModExp_add_1028ns_1028ns_1028_2_U1->din0(grp_fu_94_p0);
    rsaModExp_add_1028ns_1028ns_1028_2_U1->din1(tmp_s_reg_152);
    rsaModExp_add_1028ns_1028ns_1028_2_U1->ce(ap_var_for_const0);
    rsaModExp_add_1028ns_1028ns_1028_2_U1->dout(grp_fu_94_p2);
    rsaModExp_sub_1028ns_1028ns_1028_2_U2 = new rsaModExp_sub_1028ns_1028ns_1028_2<1,2,1028,1028,1028>("rsaModExp_sub_1028ns_1028ns_1028_2_U2");
    rsaModExp_sub_1028ns_1028ns_1028_2_U2->clk(ap_clk);
    rsaModExp_sub_1028ns_1028ns_1028_2_U2->reset(ap_rst);
    rsaModExp_sub_1028ns_1028ns_1028_2_U2->din0(P_V_4_reg_176);
    rsaModExp_sub_1028ns_1028ns_1028_2_U2->din1(tmp_reg_144);
    rsaModExp_sub_1028ns_1028ns_1028_2_U2->ce(ap_var_for_const0);
    rsaModExp_sub_1028ns_1028ns_1028_2_U2->dout(grp_fu_115_p2);
    rsaModExp_sub_1028ns_1028ns_1028_2_U3 = new rsaModExp_sub_1028ns_1028ns_1028_2<1,2,1028,1028,1028>("rsaModExp_sub_1028ns_1028ns_1028_2_U3");
    rsaModExp_sub_1028ns_1028ns_1028_2_U3->clk(ap_clk);
    rsaModExp_sub_1028ns_1028ns_1028_2_U3->reset(ap_rst);
    rsaModExp_sub_1028ns_1028ns_1028_2_U3->din0(p_036_1_P_V_2_reg_183);
    rsaModExp_sub_1028ns_1028ns_1028_2_U3->din1(tmp_reg_144);
    rsaModExp_sub_1028ns_1028ns_1028_2_U3->ce(ap_var_for_const0);
    rsaModExp_sub_1028ns_1028ns_1028_2_U3->dout(grp_fu_134_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_P_V_4_fu_109_p3);
    sensitive << ( r_V_reg_160 );
    sensitive << ( tmp_13_reg_166 );
    sensitive << ( grp_fu_94_p2 );

    SC_METHOD(thread_P_V_5_fu_138_p3);
    sensitive << ( p_036_1_P_V_2_reg_183 );
    sensitive << ( tmp_5_reg_190 );
    sensitive << ( grp_fu_134_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( tmp_10_fu_72_p3 );

    SC_METHOD(thread_ap_sig_130);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_24);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_46);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_63);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_72);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_81);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_90);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_cseq_ST_st1_fsm_0);
    sensitive << ( ap_sig_24 );

    SC_METHOD(thread_ap_sig_cseq_ST_st2_fsm_1);
    sensitive << ( ap_sig_46 );

    SC_METHOD(thread_ap_sig_cseq_ST_st3_fsm_2);
    sensitive << ( ap_sig_63 );

    SC_METHOD(thread_ap_sig_cseq_ST_st4_fsm_3);
    sensitive << ( ap_sig_130 );

    SC_METHOD(thread_ap_sig_cseq_ST_st5_fsm_4);
    sensitive << ( ap_sig_72 );

    SC_METHOD(thread_ap_sig_cseq_ST_st6_fsm_5);
    sensitive << ( ap_sig_81 );

    SC_METHOD(thread_ap_sig_cseq_ST_st7_fsm_6);
    sensitive << ( ap_sig_90 );

    SC_METHOD(thread_grp_fu_94_p0);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( p_Val2_s_reg_38 );

    SC_METHOD(thread_i_assign_cast_fu_68_p1);
    sensitive << ( i_assign_reg_49 );

    SC_METHOD(thread_i_fu_99_p2);
    sensitive << ( i_assign_reg_49 );

    SC_METHOD(thread_p_036_1_P_V_2_fu_123_p3);
    sensitive << ( P_V_4_reg_176 );
    sensitive << ( tmp_4_fu_119_p2 );
    sensitive << ( grp_fu_115_p2 );

    SC_METHOD(thread_r_V_fu_80_p2);
    sensitive << ( p_Val2_s_reg_38 );

    SC_METHOD(thread_tmp_10_fu_72_p3);
    sensitive << ( i_assign_reg_49 );

    SC_METHOD(thread_tmp_11_fu_105_p1);
    sensitive << ( p_Val2_s_reg_38 );

    SC_METHOD(thread_tmp_13_fu_86_p3);
    sensitive << ( i_assign_cast_fu_68_p1 );

    SC_METHOD(thread_tmp_4_fu_119_p2);
    sensitive << ( tmp_reg_144 );
    sensitive << ( P_V_4_reg_176 );
    sensitive << ( ap_sig_cseq_ST_st5_fsm_4 );

    SC_METHOD(thread_tmp_5_fu_130_p2);
    sensitive << ( tmp_reg_144 );
    sensitive << ( p_036_1_P_V_2_reg_183 );
    sensitive << ( ap_sig_cseq_ST_st6_fsm_5 );

    SC_METHOD(thread_tmp_fu_60_p1);
    sensitive << ( M_V );

    SC_METHOD(thread_tmp_s_fu_64_p1);
    sensitive << ( Y_V );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( tmp_10_fu_72_p3 );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "0000001";
    ap_return_preg
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "rsaModExp_interleaveModMult_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, Y_V, "(port)Y_V");
    sc_trace(mVcdFile, M_V, "(port)M_V");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st1_fsm_0, "ap_sig_cseq_ST_st1_fsm_0");
    sc_trace(mVcdFile, ap_sig_24, "ap_sig_24");
    sc_trace(mVcdFile, tmp_fu_60_p1, "tmp_fu_60_p1");
    sc_trace(mVcdFile, tmp_reg_144, "tmp_reg_144");
    sc_trace(mVcdFile, tmp_s_fu_64_p1, "tmp_s_fu_64_p1");
    sc_trace(mVcdFile, tmp_s_reg_152, "tmp_s_reg_152");
    sc_trace(mVcdFile, r_V_fu_80_p2, "r_V_fu_80_p2");
    sc_trace(mVcdFile, r_V_reg_160, "r_V_reg_160");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st2_fsm_1, "ap_sig_cseq_ST_st2_fsm_1");
    sc_trace(mVcdFile, ap_sig_46, "ap_sig_46");
    sc_trace(mVcdFile, tmp_10_fu_72_p3, "tmp_10_fu_72_p3");
    sc_trace(mVcdFile, tmp_13_fu_86_p3, "tmp_13_fu_86_p3");
    sc_trace(mVcdFile, tmp_13_reg_166, "tmp_13_reg_166");
    sc_trace(mVcdFile, i_fu_99_p2, "i_fu_99_p2");
    sc_trace(mVcdFile, i_reg_171, "i_reg_171");
    sc_trace(mVcdFile, P_V_4_fu_109_p3, "P_V_4_fu_109_p3");
    sc_trace(mVcdFile, P_V_4_reg_176, "P_V_4_reg_176");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st3_fsm_2, "ap_sig_cseq_ST_st3_fsm_2");
    sc_trace(mVcdFile, ap_sig_63, "ap_sig_63");
    sc_trace(mVcdFile, p_036_1_P_V_2_fu_123_p3, "p_036_1_P_V_2_fu_123_p3");
    sc_trace(mVcdFile, p_036_1_P_V_2_reg_183, "p_036_1_P_V_2_reg_183");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st5_fsm_4, "ap_sig_cseq_ST_st5_fsm_4");
    sc_trace(mVcdFile, ap_sig_72, "ap_sig_72");
    sc_trace(mVcdFile, tmp_5_fu_130_p2, "tmp_5_fu_130_p2");
    sc_trace(mVcdFile, tmp_5_reg_190, "tmp_5_reg_190");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st6_fsm_5, "ap_sig_cseq_ST_st6_fsm_5");
    sc_trace(mVcdFile, ap_sig_81, "ap_sig_81");
    sc_trace(mVcdFile, P_V_5_fu_138_p3, "P_V_5_fu_138_p3");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st7_fsm_6, "ap_sig_cseq_ST_st7_fsm_6");
    sc_trace(mVcdFile, ap_sig_90, "ap_sig_90");
    sc_trace(mVcdFile, p_Val2_s_reg_38, "p_Val2_s_reg_38");
    sc_trace(mVcdFile, i_assign_reg_49, "i_assign_reg_49");
    sc_trace(mVcdFile, i_assign_cast_fu_68_p1, "i_assign_cast_fu_68_p1");
    sc_trace(mVcdFile, grp_fu_94_p0, "grp_fu_94_p0");
    sc_trace(mVcdFile, grp_fu_94_p2, "grp_fu_94_p2");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st4_fsm_3, "ap_sig_cseq_ST_st4_fsm_3");
    sc_trace(mVcdFile, ap_sig_130, "ap_sig_130");
    sc_trace(mVcdFile, tmp_4_fu_119_p2, "tmp_4_fu_119_p2");
    sc_trace(mVcdFile, grp_fu_115_p2, "grp_fu_115_p2");
    sc_trace(mVcdFile, grp_fu_134_p2, "grp_fu_134_p2");
    sc_trace(mVcdFile, tmp_11_fu_105_p1, "tmp_11_fu_105_p1");
    sc_trace(mVcdFile, ap_return_preg, "ap_return_preg");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

rsaModExp_interleaveModMult::~rsaModExp_interleaveModMult() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete rsaModExp_add_1028ns_1028ns_1028_2_U1;
    delete rsaModExp_sub_1028ns_1028ns_1028_2_U2;
    delete rsaModExp_sub_1028ns_1028ns_1028_2_U3;
}

void rsaModExp_interleaveModMult::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void rsaModExp_interleaveModMult::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_preg = ap_const_lv1024_lc_1;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
             !esl_seteq<1,1,1>(tmp_10_fu_72_p3.read(), ap_const_lv1_0))) {
            ap_return_preg = tmp_11_fu_105_p1.read();
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st7_fsm_6.read())) {
        i_assign_reg_49 = i_reg_171.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
                !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        i_assign_reg_49 = ap_const_lv12_400;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st7_fsm_6.read())) {
        p_Val2_s_reg_38 = P_V_5_fu_138_p3.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
                !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        p_Val2_s_reg_38 = ap_const_lv1028_lc_1;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read())) {
        P_V_4_reg_176 = P_V_4_fu_109_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && !esl_seteq<1,1,1>(tmp_10_fu_72_p3.read(), ap_const_lv1_0))) {
        ap_return = tmp_11_fu_105_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && esl_seteq<1,1,1>(tmp_10_fu_72_p3.read(), ap_const_lv1_0))) {
        i_reg_171 = i_fu_99_p2.read();
        r_V_reg_160 = r_V_fu_80_p2.read();
        tmp_13_reg_166 = tmp_13_fu_86_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st5_fsm_4.read())) {
        p_036_1_P_V_2_reg_183 = p_036_1_P_V_2_fu_123_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st6_fsm_5.read())) {
        tmp_5_reg_190 = tmp_5_fu_130_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        tmp_reg_144 = tmp_fu_60_p1.read();
        tmp_s_reg_152 = tmp_s_fu_64_p1.read();
    }
}

void rsaModExp_interleaveModMult::thread_P_V_4_fu_109_p3() {
    P_V_4_fu_109_p3 = (!tmp_13_reg_166.read()[0].is_01())? sc_lv<1028>(): ((tmp_13_reg_166.read()[0].to_bool())? grp_fu_94_p2.read(): r_V_reg_160.read());
}

void rsaModExp_interleaveModMult::thread_P_V_5_fu_138_p3() {
    P_V_5_fu_138_p3 = (!tmp_5_reg_190.read()[0].is_01())? sc_lv<1028>(): ((tmp_5_reg_190.read()[0].to_bool())? p_036_1_P_V_2_reg_183.read(): grp_fu_134_p2.read());
}

void rsaModExp_interleaveModMult::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void rsaModExp_interleaveModMult::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void rsaModExp_interleaveModMult::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
         !esl_seteq<1,1,1>(tmp_10_fu_72_p3.read(), ap_const_lv1_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void rsaModExp_interleaveModMult::thread_ap_sig_130() {
    ap_sig_130 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(3, 3));
}

void rsaModExp_interleaveModMult::thread_ap_sig_24() {
    ap_sig_24 = esl_seteq<1,1,1>(ap_CS_fsm.read().range(0, 0), ap_const_lv1_1);
}

void rsaModExp_interleaveModMult::thread_ap_sig_46() {
    ap_sig_46 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(1, 1));
}

void rsaModExp_interleaveModMult::thread_ap_sig_63() {
    ap_sig_63 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(2, 2));
}

void rsaModExp_interleaveModMult::thread_ap_sig_72() {
    ap_sig_72 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(4, 4));
}

void rsaModExp_interleaveModMult::thread_ap_sig_81() {
    ap_sig_81 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(5, 5));
}

void rsaModExp_interleaveModMult::thread_ap_sig_90() {
    ap_sig_90 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(6, 6));
}

void rsaModExp_interleaveModMult::thread_ap_sig_cseq_ST_st1_fsm_0() {
    if (ap_sig_24.read()) {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    }
}

void rsaModExp_interleaveModMult::thread_ap_sig_cseq_ST_st2_fsm_1() {
    if (ap_sig_46.read()) {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    }
}

void rsaModExp_interleaveModMult::thread_ap_sig_cseq_ST_st3_fsm_2() {
    if (ap_sig_63.read()) {
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    }
}

void rsaModExp_interleaveModMult::thread_ap_sig_cseq_ST_st4_fsm_3() {
    if (ap_sig_130.read()) {
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    }
}

void rsaModExp_interleaveModMult::thread_ap_sig_cseq_ST_st5_fsm_4() {
    if (ap_sig_72.read()) {
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_0;
    }
}

void rsaModExp_interleaveModMult::thread_ap_sig_cseq_ST_st6_fsm_5() {
    if (ap_sig_81.read()) {
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_0;
    }
}

void rsaModExp_interleaveModMult::thread_ap_sig_cseq_ST_st7_fsm_6() {
    if (ap_sig_90.read()) {
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_0;
    }
}

void rsaModExp_interleaveModMult::thread_grp_fu_94_p0() {
    grp_fu_94_p0 = (!ap_const_lv1028_lc_2.is_01())? sc_lv<1028>(): p_Val2_s_reg_38.read() << (unsigned short)ap_const_lv1028_lc_2.to_uint();
}

void rsaModExp_interleaveModMult::thread_i_assign_cast_fu_68_p1() {
    i_assign_cast_fu_68_p1 = esl_sext<32,12>(i_assign_reg_49.read());
}

void rsaModExp_interleaveModMult::thread_i_fu_99_p2() {
    i_fu_99_p2 = (!ap_const_lv12_FFF.is_01() || !i_assign_reg_49.read().is_01())? sc_lv<12>(): (sc_bigint<12>(ap_const_lv12_FFF) + sc_biguint<12>(i_assign_reg_49.read()));
}

void rsaModExp_interleaveModMult::thread_p_036_1_P_V_2_fu_123_p3() {
    p_036_1_P_V_2_fu_123_p3 = (!tmp_4_fu_119_p2.read()[0].is_01())? sc_lv<1028>(): ((tmp_4_fu_119_p2.read()[0].to_bool())? P_V_4_reg_176.read(): grp_fu_115_p2.read());
}

void rsaModExp_interleaveModMult::thread_r_V_fu_80_p2() {
    r_V_fu_80_p2 = (!ap_const_lv1028_lc_2.is_01())? sc_lv<1028>(): p_Val2_s_reg_38.read() << (unsigned short)ap_const_lv1028_lc_2.to_uint();
}

void rsaModExp_interleaveModMult::thread_tmp_10_fu_72_p3() {
    tmp_10_fu_72_p3 = i_assign_reg_49.read().range(11, 11);
}

void rsaModExp_interleaveModMult::thread_tmp_11_fu_105_p1() {
    tmp_11_fu_105_p1 = p_Val2_s_reg_38.read().range(1024-1, 0);
}

void rsaModExp_interleaveModMult::thread_tmp_13_fu_86_p3() {
    tmp_13_fu_86_p3 = (!i_assign_cast_fu_68_p1.read().is_01() || sc_biguint<32>(i_assign_cast_fu_68_p1.read()).to_uint() >= 1025)? sc_lv<1>(): ap_const_lv1025_lc_3.range(sc_biguint<32>(i_assign_cast_fu_68_p1.read()).to_uint(), sc_biguint<32>(i_assign_cast_fu_68_p1.read()).to_uint());
}

void rsaModExp_interleaveModMult::thread_tmp_4_fu_119_p2() {
    tmp_4_fu_119_p2 = (!P_V_4_reg_176.read().is_01() || !tmp_reg_144.read().is_01())? sc_lv<1>(): (sc_biguint<1028>(P_V_4_reg_176.read()) < sc_biguint<1028>(tmp_reg_144.read()));
}

void rsaModExp_interleaveModMult::thread_tmp_5_fu_130_p2() {
    tmp_5_fu_130_p2 = (!p_036_1_P_V_2_reg_183.read().is_01() || !tmp_reg_144.read().is_01())? sc_lv<1>(): (sc_biguint<1028>(p_036_1_P_V_2_reg_183.read()) < sc_biguint<1028>(tmp_reg_144.read()));
}

void rsaModExp_interleaveModMult::thread_tmp_fu_60_p1() {
    tmp_fu_60_p1 = esl_zext<1028,1024>(M_V.read());
}

void rsaModExp_interleaveModMult::thread_tmp_s_fu_64_p1() {
    tmp_s_fu_64_p1 = esl_zext<1028,1024>(Y_V.read());
}

void rsaModExp_interleaveModMult::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            }
            break;
        case 2 : 
            if (!esl_seteq<1,1,1>(tmp_10_fu_72_p3.read(), ap_const_lv1_0)) {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            } else {
                ap_NS_fsm = ap_ST_st3_fsm_2;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_st4_fsm_3;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_st5_fsm_4;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_st6_fsm_5;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_st7_fsm_6;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_st2_fsm_1;
            break;
        default : 
            ap_NS_fsm = "XXXXXXX";
            break;
    }
}

}

