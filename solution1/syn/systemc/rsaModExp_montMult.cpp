// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "rsaModExp_montMult.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic rsaModExp_montMult::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic rsaModExp_montMult::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<12> rsaModExp_montMult::ap_ST_st1_fsm_0 = "1";
const sc_lv<12> rsaModExp_montMult::ap_ST_st2_fsm_1 = "10";
const sc_lv<12> rsaModExp_montMult::ap_ST_st3_fsm_2 = "100";
const sc_lv<12> rsaModExp_montMult::ap_ST_st4_fsm_3 = "1000";
const sc_lv<12> rsaModExp_montMult::ap_ST_st5_fsm_4 = "10000";
const sc_lv<12> rsaModExp_montMult::ap_ST_st6_fsm_5 = "100000";
const sc_lv<12> rsaModExp_montMult::ap_ST_st7_fsm_6 = "1000000";
const sc_lv<12> rsaModExp_montMult::ap_ST_st8_fsm_7 = "10000000";
const sc_lv<12> rsaModExp_montMult::ap_ST_st9_fsm_8 = "100000000";
const sc_lv<12> rsaModExp_montMult::ap_ST_st10_fsm_9 = "1000000000";
const sc_lv<12> rsaModExp_montMult::ap_ST_st11_fsm_10 = "10000000000";
const sc_lv<12> rsaModExp_montMult::ap_ST_st12_fsm_11 = "100000000000";
const sc_lv<32> rsaModExp_montMult::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> rsaModExp_montMult::ap_const_lv1_1 = "1";
const sc_lv<32> rsaModExp_montMult::ap_const_lv32_1 = "1";
const sc_lv<1> rsaModExp_montMult::ap_const_lv1_0 = "0";
const sc_lv<32> rsaModExp_montMult::ap_const_lv32_4 = "100";
const sc_lv<32> rsaModExp_montMult::ap_const_lv32_8 = "1000";
const sc_lv<2049> rsaModExp_montMult::ap_const_lv2049_lc_1 = "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<12> rsaModExp_montMult::ap_const_lv12_0 = "000000000000";
const sc_lv<12> rsaModExp_montMult::ap_const_lv12_800 = "100000000000";
const sc_lv<12> rsaModExp_montMult::ap_const_lv12_1 = "1";
const sc_lv<32> rsaModExp_montMult::ap_const_lv32_801 = "100000000001";
const sc_lv<32> rsaModExp_montMult::ap_const_lv32_5 = "101";
const sc_lv<32> rsaModExp_montMult::ap_const_lv32_B = "1011";
const sc_lv<2048> rsaModExp_montMult::ap_const_lv2048_lc

rsaModExp_montMult::rsaModExp_montMult(sc_module_name name) : sc_module(name), mVcdFile(0) {
    rsaModExp_add_2050ns_2050ns_2050_4_U6 = new rsaModExp_add_2050ns_2050ns_2050_4<1,4,2050,2050,2050>("rsaModExp_add_2050ns_2050ns_2050_4_U6");
    rsaModExp_add_2050ns_2050ns_2050_4_U6->clk(ap_clk);
    rsaModExp_add_2050ns_2050ns_2050_4_U6->reset(ap_rst);
    rsaModExp_add_2050ns_2050ns_2050_4_U6->din0(Y_V_reg_198);
    rsaModExp_add_2050ns_2050ns_2050_4_U6->din1(grp_fu_119_p1);
    rsaModExp_add_2050ns_2050ns_2050_4_U6->ce(ap_var_for_const0);
    rsaModExp_add_2050ns_2050ns_2050_4_U6->dout(grp_fu_119_p2);
    rsaModExp_sub_2048ns_2048ns_2048_4_U7 = new rsaModExp_sub_2048ns_2048ns_2048_4<1,4,2048,2048,2048>("rsaModExp_sub_2048ns_2048ns_2048_4_U7");
    rsaModExp_sub_2048ns_2048ns_2048_4_U7->clk(ap_clk);
    rsaModExp_sub_2048ns_2048ns_2048_4_U7->reset(ap_rst);
    rsaModExp_sub_2048ns_2048ns_2048_4_U7->din0(grp_fu_137_p0);
    rsaModExp_sub_2048ns_2048ns_2048_4_U7->din1(M0_V_read_reg_188);
    rsaModExp_sub_2048ns_2048ns_2048_4_U7->ce(ap_var_for_const0);
    rsaModExp_sub_2048ns_2048ns_2048_4_U7->dout(grp_fu_137_p2);
    rsaModExp_add_2050ns_2050ns_2050_4_U8 = new rsaModExp_add_2050ns_2050ns_2050_4<1,4,2050,2050,2050>("rsaModExp_add_2050ns_2050ns_2050_4_U8");
    rsaModExp_add_2050ns_2050ns_2050_4_U8->clk(ap_clk);
    rsaModExp_add_2050ns_2050ns_2050_4_U8->reset(ap_rst);
    rsaModExp_add_2050ns_2050ns_2050_4_U8->din0(M_V_reg_203);
    rsaModExp_add_2050ns_2050ns_2050_4_U8->din1(p_Val2_1_reg_247);
    rsaModExp_add_2050ns_2050ns_2050_4_U8->ce(ap_var_for_const0);
    rsaModExp_add_2050ns_2050ns_2050_4_U8->dout(grp_fu_162_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_M_V_cast_fu_88_p1);
    sensitive << ( M0_V );

    SC_METHOD(thread_M_V_fu_84_p1);
    sensitive << ( M0_V );

    SC_METHOD(thread_X_V_fu_76_p1);
    sensitive << ( X0_V );

    SC_METHOD(thread_Y_V_fu_80_p1);
    sensitive << ( Y0_V );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_sig_cseq_ST_st12_fsm_11 );

    SC_METHOD(thread_ap_sig_145);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_164);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_29);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_58);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_83);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_96);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_cseq_ST_st12_fsm_11);
    sensitive << ( ap_sig_164 );

    SC_METHOD(thread_ap_sig_cseq_ST_st1_fsm_0);
    sensitive << ( ap_sig_29 );

    SC_METHOD(thread_ap_sig_cseq_ST_st2_fsm_1);
    sensitive << ( ap_sig_58 );

    SC_METHOD(thread_ap_sig_cseq_ST_st5_fsm_4);
    sensitive << ( ap_sig_83 );

    SC_METHOD(thread_ap_sig_cseq_ST_st6_fsm_5);
    sensitive << ( ap_sig_145 );

    SC_METHOD(thread_ap_sig_cseq_ST_st9_fsm_8);
    sensitive << ( ap_sig_96 );

    SC_METHOD(thread_exitcond_fu_100_p2);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( i_assign_reg_65 );

    SC_METHOD(thread_grp_fu_119_p1);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( p_s_reg_54 );

    SC_METHOD(thread_grp_fu_137_p0);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( p_s_reg_54 );

    SC_METHOD(thread_i_assign_cast1_fu_96_p1);
    sensitive << ( i_assign_reg_65 );

    SC_METHOD(thread_i_fu_106_p2);
    sensitive << ( i_assign_reg_65 );

    SC_METHOD(thread_p_Val2_1_fu_142_p3);
    sensitive << ( p_cast_reg_213 );
    sensitive << ( tmp_8_reg_227 );
    sensitive << ( grp_fu_119_p2 );

    SC_METHOD(thread_p_cast_fu_92_p1);
    sensitive << ( p_s_reg_54 );

    SC_METHOD(thread_ssdm_int_V_write_assign_fu_182_p3);
    sensitive << ( tmp_reg_232 );
    sensitive << ( tmp_6_reg_242 );
    sensitive << ( grp_fu_137_p2 );

    SC_METHOD(thread_tmp_3_fu_166_p4);
    sensitive << ( grp_fu_162_p2 );

    SC_METHOD(thread_tmp_5_fu_176_p3);
    sensitive << ( tmp_9_reg_252 );
    sensitive << ( tmp_4_reg_257 );
    sensitive << ( tmp_3_fu_166_p4 );

    SC_METHOD(thread_tmp_6_fu_133_p1);
    sensitive << ( p_s_reg_54 );

    SC_METHOD(thread_tmp_8_fu_112_p3);
    sensitive << ( X_V_reg_193 );
    sensitive << ( i_assign_cast1_fu_96_p1 );

    SC_METHOD(thread_tmp_9_fu_148_p1);
    sensitive << ( p_Val2_1_fu_142_p3 );

    SC_METHOD(thread_tmp_fu_124_p2);
    sensitive << ( M_V_cast_reg_208 );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( exitcond_fu_100_p2 );
    sensitive << ( p_s_reg_54 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( exitcond_fu_100_p2 );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "000000000001";
    ap_return_preg
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "rsaModExp_montMult_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, X0_V, "(port)X0_V");
    sc_trace(mVcdFile, Y0_V, "(port)Y0_V");
    sc_trace(mVcdFile, M0_V, "(port)M0_V");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st1_fsm_0, "ap_sig_cseq_ST_st1_fsm_0");
    sc_trace(mVcdFile, ap_sig_29, "ap_sig_29");
    sc_trace(mVcdFile, M0_V_read_reg_188, "M0_V_read_reg_188");
    sc_trace(mVcdFile, X_V_fu_76_p1, "X_V_fu_76_p1");
    sc_trace(mVcdFile, X_V_reg_193, "X_V_reg_193");
    sc_trace(mVcdFile, Y_V_fu_80_p1, "Y_V_fu_80_p1");
    sc_trace(mVcdFile, Y_V_reg_198, "Y_V_reg_198");
    sc_trace(mVcdFile, M_V_fu_84_p1, "M_V_fu_84_p1");
    sc_trace(mVcdFile, M_V_reg_203, "M_V_reg_203");
    sc_trace(mVcdFile, M_V_cast_fu_88_p1, "M_V_cast_fu_88_p1");
    sc_trace(mVcdFile, M_V_cast_reg_208, "M_V_cast_reg_208");
    sc_trace(mVcdFile, p_cast_fu_92_p1, "p_cast_fu_92_p1");
    sc_trace(mVcdFile, p_cast_reg_213, "p_cast_reg_213");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st2_fsm_1, "ap_sig_cseq_ST_st2_fsm_1");
    sc_trace(mVcdFile, ap_sig_58, "ap_sig_58");
    sc_trace(mVcdFile, i_fu_106_p2, "i_fu_106_p2");
    sc_trace(mVcdFile, i_reg_222, "i_reg_222");
    sc_trace(mVcdFile, tmp_8_fu_112_p3, "tmp_8_fu_112_p3");
    sc_trace(mVcdFile, tmp_8_reg_227, "tmp_8_reg_227");
    sc_trace(mVcdFile, exitcond_fu_100_p2, "exitcond_fu_100_p2");
    sc_trace(mVcdFile, tmp_fu_124_p2, "tmp_fu_124_p2");
    sc_trace(mVcdFile, tmp_reg_232, "tmp_reg_232");
    sc_trace(mVcdFile, tmp_6_fu_133_p1, "tmp_6_fu_133_p1");
    sc_trace(mVcdFile, tmp_6_reg_242, "tmp_6_reg_242");
    sc_trace(mVcdFile, p_Val2_1_fu_142_p3, "p_Val2_1_fu_142_p3");
    sc_trace(mVcdFile, p_Val2_1_reg_247, "p_Val2_1_reg_247");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st5_fsm_4, "ap_sig_cseq_ST_st5_fsm_4");
    sc_trace(mVcdFile, ap_sig_83, "ap_sig_83");
    sc_trace(mVcdFile, tmp_9_fu_148_p1, "tmp_9_fu_148_p1");
    sc_trace(mVcdFile, tmp_9_reg_252, "tmp_9_reg_252");
    sc_trace(mVcdFile, tmp_4_reg_257, "tmp_4_reg_257");
    sc_trace(mVcdFile, tmp_5_fu_176_p3, "tmp_5_fu_176_p3");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st9_fsm_8, "ap_sig_cseq_ST_st9_fsm_8");
    sc_trace(mVcdFile, ap_sig_96, "ap_sig_96");
    sc_trace(mVcdFile, p_s_reg_54, "p_s_reg_54");
    sc_trace(mVcdFile, i_assign_reg_65, "i_assign_reg_65");
    sc_trace(mVcdFile, i_assign_cast1_fu_96_p1, "i_assign_cast1_fu_96_p1");
    sc_trace(mVcdFile, grp_fu_119_p1, "grp_fu_119_p1");
    sc_trace(mVcdFile, grp_fu_137_p0, "grp_fu_137_p0");
    sc_trace(mVcdFile, grp_fu_119_p2, "grp_fu_119_p2");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st6_fsm_5, "ap_sig_cseq_ST_st6_fsm_5");
    sc_trace(mVcdFile, ap_sig_145, "ap_sig_145");
    sc_trace(mVcdFile, grp_fu_162_p2, "grp_fu_162_p2");
    sc_trace(mVcdFile, tmp_3_fu_166_p4, "tmp_3_fu_166_p4");
    sc_trace(mVcdFile, grp_fu_137_p2, "grp_fu_137_p2");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st12_fsm_11, "ap_sig_cseq_ST_st12_fsm_11");
    sc_trace(mVcdFile, ap_sig_164, "ap_sig_164");
    sc_trace(mVcdFile, ssdm_int_V_write_assign_fu_182_p3, "ssdm_int_V_write_assign_fu_182_p3");
    sc_trace(mVcdFile, ap_return_preg, "ap_return_preg");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

rsaModExp_montMult::~rsaModExp_montMult() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete rsaModExp_add_2050ns_2050ns_2050_4_U6;
    delete rsaModExp_sub_2048ns_2048ns_2048_4_U7;
    delete rsaModExp_add_2050ns_2050ns_2050_4_U8;
}

void rsaModExp_montMult::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void rsaModExp_montMult::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_preg = ap_const_lv2048_lc_1;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st12_fsm_11.read())) {
            ap_return_preg = ssdm_int_V_write_assign_fu_182_p3.read();
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st9_fsm_8.read())) {
        i_assign_reg_65 = i_reg_222.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
                !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        i_assign_reg_65 = ap_const_lv12_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st9_fsm_8.read())) {
        p_s_reg_54 = tmp_5_fu_176_p3.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
                !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        p_s_reg_54 = ap_const_lv2049_lc_1;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        M0_V_read_reg_188 = M0_V.read();
        M_V_cast_reg_208 = M_V_cast_fu_88_p1.read();
        M_V_reg_203 = M_V_fu_84_p1.read();
        X_V_reg_193 = X_V_fu_76_p1.read();
        Y_V_reg_198 = Y_V_fu_80_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st12_fsm_11.read())) {
        ap_return = ssdm_int_V_write_assign_fu_182_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read())) {
        i_reg_222 = i_fu_106_p2.read();
        p_cast_reg_213 = p_cast_fu_92_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st5_fsm_4.read())) {
        p_Val2_1_reg_247 = p_Val2_1_fu_142_p3.read();
        tmp_4_reg_257 = p_Val2_1_fu_142_p3.read().range(2049, 1);
        tmp_9_reg_252 = tmp_9_fu_148_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && !esl_seteq<1,1,1>(exitcond_fu_100_p2.read(), ap_const_lv1_0))) {
        tmp_6_reg_242 = tmp_6_fu_133_p1.read();
        tmp_reg_232 = tmp_fu_124_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && esl_seteq<1,1,1>(exitcond_fu_100_p2.read(), ap_const_lv1_0))) {
        tmp_8_reg_227 = tmp_8_fu_112_p3.read();
    }
}

void rsaModExp_montMult::thread_M_V_cast_fu_88_p1() {
    M_V_cast_fu_88_p1 = esl_zext<2049,2048>(M0_V.read());
}

void rsaModExp_montMult::thread_M_V_fu_84_p1() {
    M_V_fu_84_p1 = esl_zext<2050,2048>(M0_V.read());
}

void rsaModExp_montMult::thread_X_V_fu_76_p1() {
    X_V_fu_76_p1 = esl_zext<2050,2048>(X0_V.read());
}

void rsaModExp_montMult::thread_Y_V_fu_80_p1() {
    Y_V_fu_80_p1 = esl_zext<2050,2048>(Y0_V.read());
}

void rsaModExp_montMult::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void rsaModExp_montMult::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void rsaModExp_montMult::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st12_fsm_11.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void rsaModExp_montMult::thread_ap_sig_145() {
    ap_sig_145 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(5, 5));
}

void rsaModExp_montMult::thread_ap_sig_164() {
    ap_sig_164 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(11, 11));
}

void rsaModExp_montMult::thread_ap_sig_29() {
    ap_sig_29 = esl_seteq<1,1,1>(ap_CS_fsm.read().range(0, 0), ap_const_lv1_1);
}

void rsaModExp_montMult::thread_ap_sig_58() {
    ap_sig_58 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(1, 1));
}

void rsaModExp_montMult::thread_ap_sig_83() {
    ap_sig_83 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(4, 4));
}

void rsaModExp_montMult::thread_ap_sig_96() {
    ap_sig_96 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(8, 8));
}

void rsaModExp_montMult::thread_ap_sig_cseq_ST_st12_fsm_11() {
    if (ap_sig_164.read()) {
        ap_sig_cseq_ST_st12_fsm_11 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st12_fsm_11 = ap_const_logic_0;
    }
}

void rsaModExp_montMult::thread_ap_sig_cseq_ST_st1_fsm_0() {
    if (ap_sig_29.read()) {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    }
}

void rsaModExp_montMult::thread_ap_sig_cseq_ST_st2_fsm_1() {
    if (ap_sig_58.read()) {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    }
}

void rsaModExp_montMult::thread_ap_sig_cseq_ST_st5_fsm_4() {
    if (ap_sig_83.read()) {
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_0;
    }
}

void rsaModExp_montMult::thread_ap_sig_cseq_ST_st6_fsm_5() {
    if (ap_sig_145.read()) {
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_0;
    }
}

void rsaModExp_montMult::thread_ap_sig_cseq_ST_st9_fsm_8() {
    if (ap_sig_96.read()) {
        ap_sig_cseq_ST_st9_fsm_8 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st9_fsm_8 = ap_const_logic_0;
    }
}

void rsaModExp_montMult::thread_exitcond_fu_100_p2() {
    exitcond_fu_100_p2 = (!i_assign_reg_65.read().is_01() || !ap_const_lv12_800.is_01())? sc_lv<1>(): sc_lv<1>(i_assign_reg_65.read() == ap_const_lv12_800);
}

void rsaModExp_montMult::thread_grp_fu_119_p1() {
    grp_fu_119_p1 = esl_zext<2050,2049>(p_s_reg_54.read());
}

void rsaModExp_montMult::thread_grp_fu_137_p0() {
    grp_fu_137_p0 = p_s_reg_54.read().range(2048-1, 0);
}

void rsaModExp_montMult::thread_i_assign_cast1_fu_96_p1() {
    i_assign_cast1_fu_96_p1 = esl_zext<32,12>(i_assign_reg_65.read());
}

void rsaModExp_montMult::thread_i_fu_106_p2() {
    i_fu_106_p2 = (!i_assign_reg_65.read().is_01() || !ap_const_lv12_1.is_01())? sc_lv<12>(): (sc_biguint<12>(i_assign_reg_65.read()) + sc_biguint<12>(ap_const_lv12_1));
}

void rsaModExp_montMult::thread_p_Val2_1_fu_142_p3() {
    p_Val2_1_fu_142_p3 = (!tmp_8_reg_227.read()[0].is_01())? sc_lv<2050>(): ((tmp_8_reg_227.read()[0].to_bool())? grp_fu_119_p2.read(): p_cast_reg_213.read());
}

void rsaModExp_montMult::thread_p_cast_fu_92_p1() {
    p_cast_fu_92_p1 = esl_zext<2050,2049>(p_s_reg_54.read());
}

void rsaModExp_montMult::thread_ssdm_int_V_write_assign_fu_182_p3() {
    ssdm_int_V_write_assign_fu_182_p3 = (!tmp_reg_232.read()[0].is_01())? sc_lv<2048>(): ((tmp_reg_232.read()[0].to_bool())? tmp_6_reg_242.read(): grp_fu_137_p2.read());
}

void rsaModExp_montMult::thread_tmp_3_fu_166_p4() {
    tmp_3_fu_166_p4 = grp_fu_162_p2.read().range(2049, 1);
}

void rsaModExp_montMult::thread_tmp_5_fu_176_p3() {
    tmp_5_fu_176_p3 = (!tmp_9_reg_252.read()[0].is_01())? sc_lv<2049>(): ((tmp_9_reg_252.read()[0].to_bool())? tmp_3_fu_166_p4.read(): tmp_4_reg_257.read());
}

void rsaModExp_montMult::thread_tmp_6_fu_133_p1() {
    tmp_6_fu_133_p1 = p_s_reg_54.read().range(2048-1, 0);
}

void rsaModExp_montMult::thread_tmp_8_fu_112_p3() {
    tmp_8_fu_112_p3 = (!i_assign_cast1_fu_96_p1.read().is_01() || sc_biguint<32>(i_assign_cast1_fu_96_p1.read()).to_uint() >= 2050)? sc_lv<1>(): X_V_reg_193.read().range(sc_biguint<32>(i_assign_cast1_fu_96_p1.read()).to_uint(), sc_biguint<32>(i_assign_cast1_fu_96_p1.read()).to_uint());
}

void rsaModExp_montMult::thread_tmp_9_fu_148_p1() {
    tmp_9_fu_148_p1 = p_Val2_1_fu_142_p3.read().range(1-1, 0);
}

void rsaModExp_montMult::thread_tmp_fu_124_p2() {
    tmp_fu_124_p2 = (!p_s_reg_54.read().is_01() || !M_V_cast_reg_208.read().is_01())? sc_lv<1>(): (sc_biguint<2049>(p_s_reg_54.read()) < sc_biguint<2049>(M_V_cast_reg_208.read()));
}

void rsaModExp_montMult::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            }
            break;
        case 2 : 
            if (!esl_seteq<1,1,1>(exitcond_fu_100_p2.read(), ap_const_lv1_0)) {
                ap_NS_fsm = ap_ST_st10_fsm_9;
            } else {
                ap_NS_fsm = ap_ST_st3_fsm_2;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_st4_fsm_3;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_st5_fsm_4;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_st6_fsm_5;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_st7_fsm_6;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_st8_fsm_7;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_st9_fsm_8;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_st2_fsm_1;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_st11_fsm_10;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_st12_fsm_11;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_st1_fsm_0;
            break;
        default : 
            ap_NS_fsm = "XXXXXXXXXXXX";
            break;
    }
}

}

