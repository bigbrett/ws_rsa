// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _ModExp_montMult_HH_
#define _ModExp_montMult_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "ModExp_add_1026ns_1026ns_1026_2.h"
#include "ModExp_sub_1024ns_1024ns_1024_2.h"

namespace ap_rtl {

struct ModExp_montMult : public sc_module {
    // Port declarations 10
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<1024> > X0_V;
    sc_in< sc_lv<1024> > Y0_V;
    sc_in< sc_lv<1024> > M0_V;
    sc_out< sc_lv<1024> > ap_return;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    ModExp_montMult(sc_module_name name);
    SC_HAS_PROCESS(ModExp_montMult);

    ~ModExp_montMult();

    sc_trace_file* mVcdFile;

    ModExp_add_1026ns_1026ns_1026_2<1,2,1026,1026,1026>* ModExp_add_1026ns_1026ns_1026_2_U1;
    ModExp_sub_1024ns_1024ns_1024_2<1,2,1024,1024,1024>* ModExp_sub_1024ns_1024ns_1024_2_U2;
    ModExp_add_1026ns_1026ns_1026_2<1,2,1026,1026,1026>* ModExp_add_1026ns_1026ns_1026_2_U3;
    sc_signal< sc_lv<9> > ap_CS_fsm;
    sc_signal< sc_logic > ap_sig_cseq_ST_st1_fsm_0;
    sc_signal< bool > ap_sig_26;
    sc_signal< sc_lv<1024> > M0_V_read_reg_185;
    sc_signal< sc_lv<1026> > X_V_fu_76_p1;
    sc_signal< sc_lv<1026> > X_V_reg_190;
    sc_signal< sc_lv<1026> > Y_V_fu_80_p1;
    sc_signal< sc_lv<1026> > Y_V_reg_195;
    sc_signal< sc_lv<1026> > M_V_fu_84_p1;
    sc_signal< sc_lv<1026> > M_V_reg_200;
    sc_signal< sc_lv<1025> > M_V_cast_fu_88_p1;
    sc_signal< sc_lv<1025> > M_V_cast_reg_205;
    sc_signal< sc_lv<1026> > p_cast_fu_92_p1;
    sc_signal< sc_lv<1026> > p_cast_reg_210;
    sc_signal< sc_logic > ap_sig_cseq_ST_st2_fsm_1;
    sc_signal< bool > ap_sig_55;
    sc_signal< sc_lv<11> > i_fu_106_p2;
    sc_signal< sc_lv<11> > i_reg_219;
    sc_signal< sc_lv<1> > tmp_7_fu_112_p3;
    sc_signal< sc_lv<1> > tmp_7_reg_224;
    sc_signal< sc_lv<1> > exitcond_fu_100_p2;
    sc_signal< sc_lv<1> > tmp_fu_124_p2;
    sc_signal< sc_lv<1> > tmp_reg_229;
    sc_signal< sc_lv<1024> > tmp_4_fu_133_p1;
    sc_signal< sc_lv<1024> > tmp_4_reg_239;
    sc_signal< sc_lv<1026> > grp_fu_119_p2;
    sc_signal< sc_lv<1026> > S_V_reg_244;
    sc_signal< sc_logic > ap_sig_cseq_ST_st3_fsm_2;
    sc_signal< bool > ap_sig_80;
    sc_signal< sc_lv<1026> > p_Val2_1_fu_142_p3;
    sc_signal< sc_lv<1026> > p_Val2_1_reg_249;
    sc_signal< sc_logic > ap_sig_cseq_ST_st4_fsm_3;
    sc_signal< bool > ap_sig_89;
    sc_signal< sc_lv<1> > tmp_8_fu_147_p1;
    sc_signal< sc_lv<1> > tmp_8_reg_254;
    sc_signal< sc_lv<1025> > tmp_3_reg_259;
    sc_signal< sc_lv<1025> > tmp_2_reg_264;
    sc_signal< sc_logic > ap_sig_cseq_ST_st6_fsm_5;
    sc_signal< bool > ap_sig_102;
    sc_signal< sc_lv<1025> > tmp_5_fu_175_p3;
    sc_signal< sc_logic > ap_sig_cseq_ST_st7_fsm_6;
    sc_signal< bool > ap_sig_114;
    sc_signal< sc_lv<1024> > grp_fu_137_p2;
    sc_signal< sc_lv<1024> > tmp_6_reg_274;
    sc_signal< sc_logic > ap_sig_cseq_ST_st8_fsm_7;
    sc_signal< bool > ap_sig_123;
    sc_signal< sc_lv<1025> > p_s_reg_54;
    sc_signal< sc_lv<11> > i_assign_reg_65;
    sc_signal< sc_lv<32> > i_assign_cast1_fu_96_p1;
    sc_signal< sc_lv<1026> > grp_fu_119_p1;
    sc_signal< sc_lv<1024> > grp_fu_137_p0;
    sc_signal< sc_logic > ap_sig_cseq_ST_st5_fsm_4;
    sc_signal< bool > ap_sig_171;
    sc_signal< sc_lv<1026> > grp_fu_161_p2;
    sc_signal< sc_logic > ap_sig_cseq_ST_st9_fsm_8;
    sc_signal< bool > ap_sig_188;
    sc_signal< sc_lv<1024> > ssdm_int_V_write_assign_fu_180_p3;
    sc_signal< sc_lv<9> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<9> ap_ST_st1_fsm_0;
    static const sc_lv<9> ap_ST_st2_fsm_1;
    static const sc_lv<9> ap_ST_st3_fsm_2;
    static const sc_lv<9> ap_ST_st4_fsm_3;
    static const sc_lv<9> ap_ST_st5_fsm_4;
    static const sc_lv<9> ap_ST_st6_fsm_5;
    static const sc_lv<9> ap_ST_st7_fsm_6;
    static const sc_lv<9> ap_ST_st8_fsm_7;
    static const sc_lv<9> ap_ST_st9_fsm_8;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<1025> ap_const_lv1025_lc_1;
    static const sc_lv<11> ap_const_lv11_0;
    static const sc_lv<11> ap_const_lv11_400;
    static const sc_lv<11> ap_const_lv11_1;
    static const sc_lv<32> ap_const_lv32_401;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_8;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_M_V_cast_fu_88_p1();
    void thread_M_V_fu_84_p1();
    void thread_X_V_fu_76_p1();
    void thread_Y_V_fu_80_p1();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sig_102();
    void thread_ap_sig_114();
    void thread_ap_sig_123();
    void thread_ap_sig_171();
    void thread_ap_sig_188();
    void thread_ap_sig_26();
    void thread_ap_sig_55();
    void thread_ap_sig_80();
    void thread_ap_sig_89();
    void thread_ap_sig_cseq_ST_st1_fsm_0();
    void thread_ap_sig_cseq_ST_st2_fsm_1();
    void thread_ap_sig_cseq_ST_st3_fsm_2();
    void thread_ap_sig_cseq_ST_st4_fsm_3();
    void thread_ap_sig_cseq_ST_st5_fsm_4();
    void thread_ap_sig_cseq_ST_st6_fsm_5();
    void thread_ap_sig_cseq_ST_st7_fsm_6();
    void thread_ap_sig_cseq_ST_st8_fsm_7();
    void thread_ap_sig_cseq_ST_st9_fsm_8();
    void thread_exitcond_fu_100_p2();
    void thread_grp_fu_119_p1();
    void thread_grp_fu_137_p0();
    void thread_i_assign_cast1_fu_96_p1();
    void thread_i_fu_106_p2();
    void thread_p_Val2_1_fu_142_p3();
    void thread_p_cast_fu_92_p1();
    void thread_ssdm_int_V_write_assign_fu_180_p3();
    void thread_tmp_4_fu_133_p1();
    void thread_tmp_5_fu_175_p3();
    void thread_tmp_7_fu_112_p3();
    void thread_tmp_8_fu_147_p1();
    void thread_tmp_fu_124_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
