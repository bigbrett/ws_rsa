// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _ModExp_montMult_HH_
#define _ModExp_montMult_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "ModExp_sub_1024ns_1024ns_1024_2.h"
#include "ModExp_add_1024ns_1024ns_1024_2.h"
#include "ModExp_add_1025ns_1025ns_1025_2.h"

namespace ap_rtl {

struct ModExp_montMult : public sc_module {
    // Port declarations 10
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<1024> > X_V;
    sc_in< sc_lv<1024> > Y_V;
    sc_in< sc_lv<1024> > M_V;
    sc_out< sc_lv<1024> > ap_return;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    ModExp_montMult(sc_module_name name);
    SC_HAS_PROCESS(ModExp_montMult);

    ~ModExp_montMult();

    sc_trace_file* mVcdFile;

    ModExp_sub_1024ns_1024ns_1024_2<1,2,1024,1024,1024>* ModExp_sub_1024ns_1024ns_1024_2_U1;
    ModExp_add_1024ns_1024ns_1024_2<1,2,1024,1024,1024>* ModExp_add_1024ns_1024ns_1024_2_U2;
    ModExp_add_1025ns_1025ns_1025_2<1,2,1025,1025,1025>* ModExp_add_1025ns_1025ns_1025_2_U3;
    ModExp_add_1025ns_1025ns_1025_2<1,2,1025,1025,1025>* ModExp_add_1025ns_1025ns_1025_2_U4;
    sc_signal< sc_lv<9> > ap_CS_fsm;
    sc_signal< sc_logic > ap_sig_cseq_ST_st1_fsm_0;
    sc_signal< bool > ap_sig_26;
    sc_signal< sc_lv<1024> > M_V_read_reg_185;
    sc_signal< sc_lv<1024> > Y_V_read_reg_191;
    sc_signal< sc_lv<1024> > X_V_read_reg_196;
    sc_signal< sc_lv<1025> > tmp_1_fu_79_p1;
    sc_signal< sc_lv<1025> > tmp_1_reg_201;
    sc_signal< sc_lv<1025> > p_cast_fu_83_p1;
    sc_signal< sc_lv<1025> > p_cast_reg_206;
    sc_signal< sc_logic > ap_sig_cseq_ST_st2_fsm_1;
    sc_signal< bool > ap_sig_53;
    sc_signal< sc_lv<11> > i_fu_97_p2;
    sc_signal< sc_lv<11> > i_reg_214;
    sc_signal< sc_lv<1024> > r_V_fu_118_p2;
    sc_signal< sc_lv<1024> > r_V_reg_219;
    sc_signal< sc_lv<1> > exitcond_fu_91_p2;
    sc_signal< sc_lv<1> > tmp_2_fu_123_p2;
    sc_signal< sc_lv<1> > tmp_2_reg_225;
    sc_signal< sc_logic > ap_sig_cseq_ST_st3_fsm_2;
    sc_signal< bool > ap_sig_74;
    sc_signal< sc_lv<1025> > grp_fu_141_p2;
    sc_signal< sc_lv<1025> > S_V_3_reg_235;
    sc_signal< sc_logic > ap_sig_cseq_ST_st4_fsm_3;
    sc_signal< bool > ap_sig_83;
    sc_signal< sc_lv<1> > tmp_7_fu_146_p1;
    sc_signal< sc_lv<1> > tmp_7_reg_240;
    sc_signal< sc_lv<1024> > tmp_3_reg_245;
    sc_signal< sc_lv<1024> > tmp_reg_250;
    sc_signal< sc_logic > ap_sig_cseq_ST_st6_fsm_5;
    sc_signal< bool > ap_sig_96;
    sc_signal< sc_lv<1024> > tmp_4_fu_174_p3;
    sc_signal< sc_logic > ap_sig_cseq_ST_st7_fsm_6;
    sc_signal< bool > ap_sig_108;
    sc_signal< sc_lv<1024> > grp_fu_128_p2;
    sc_signal< sc_lv<1024> > S_V_reg_260;
    sc_signal< sc_logic > ap_sig_cseq_ST_st8_fsm_7;
    sc_signal< bool > ap_sig_117;
    sc_signal< sc_lv<1024> > p_s_reg_56;
    sc_signal< sc_lv<11> > bvh_d_index_reg_68;
    sc_signal< sc_lv<32> > index_assign_cast1_fu_87_p1;
    sc_signal< sc_lv<1> > tmp_5_fu_103_p3;
    sc_signal< sc_lv<1024> > tmp_cast_fu_110_p3;
    sc_signal< sc_lv<1025> > grp_fu_141_p0;
    sc_signal< sc_lv<1024> > grp_fu_136_p2;
    sc_signal< sc_logic > ap_sig_cseq_ST_st5_fsm_4;
    sc_signal< bool > ap_sig_167;
    sc_signal< sc_lv<1025> > grp_fu_160_p2;
    sc_signal< sc_logic > ap_sig_cseq_ST_st9_fsm_8;
    sc_signal< bool > ap_sig_184;
    sc_signal< sc_lv<1024> > ssdm_int_V_write_assign_fu_179_p3;
    sc_signal< sc_lv<9> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<9> ap_ST_st1_fsm_0;
    static const sc_lv<9> ap_ST_st2_fsm_1;
    static const sc_lv<9> ap_ST_st3_fsm_2;
    static const sc_lv<9> ap_ST_st4_fsm_3;
    static const sc_lv<9> ap_ST_st5_fsm_4;
    static const sc_lv<9> ap_ST_st6_fsm_5;
    static const sc_lv<9> ap_ST_st7_fsm_6;
    static const sc_lv<9> ap_ST_st8_fsm_7;
    static const sc_lv<9> ap_ST_st9_fsm_8;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<1024> ap_const_lv1024_lc_1;
    static const sc_lv<11> ap_const_lv11_0;
    static const sc_lv<11> ap_const_lv11_400;
    static const sc_lv<11> ap_const_lv11_1;
    static const sc_lv<1024> ap_const_lv1024_lc_2;
    static const sc_lv<32> ap_const_lv32_400;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_8;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sig_108();
    void thread_ap_sig_117();
    void thread_ap_sig_167();
    void thread_ap_sig_184();
    void thread_ap_sig_26();
    void thread_ap_sig_53();
    void thread_ap_sig_74();
    void thread_ap_sig_83();
    void thread_ap_sig_96();
    void thread_ap_sig_cseq_ST_st1_fsm_0();
    void thread_ap_sig_cseq_ST_st2_fsm_1();
    void thread_ap_sig_cseq_ST_st3_fsm_2();
    void thread_ap_sig_cseq_ST_st4_fsm_3();
    void thread_ap_sig_cseq_ST_st5_fsm_4();
    void thread_ap_sig_cseq_ST_st6_fsm_5();
    void thread_ap_sig_cseq_ST_st7_fsm_6();
    void thread_ap_sig_cseq_ST_st8_fsm_7();
    void thread_ap_sig_cseq_ST_st9_fsm_8();
    void thread_exitcond_fu_91_p2();
    void thread_grp_fu_141_p0();
    void thread_i_fu_97_p2();
    void thread_index_assign_cast1_fu_87_p1();
    void thread_p_cast_fu_83_p1();
    void thread_r_V_fu_118_p2();
    void thread_ssdm_int_V_write_assign_fu_179_p3();
    void thread_tmp_1_fu_79_p1();
    void thread_tmp_2_fu_123_p2();
    void thread_tmp_4_fu_174_p3();
    void thread_tmp_5_fu_103_p3();
    void thread_tmp_7_fu_146_p1();
    void thread_tmp_cast_fu_110_p3();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
