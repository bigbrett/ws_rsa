// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "ModExp_montMult.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic ModExp_montMult::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic ModExp_montMult::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<9> ModExp_montMult::ap_ST_st1_fsm_0 = "1";
const sc_lv<9> ModExp_montMult::ap_ST_st2_fsm_1 = "10";
const sc_lv<9> ModExp_montMult::ap_ST_st3_fsm_2 = "100";
const sc_lv<9> ModExp_montMult::ap_ST_st4_fsm_3 = "1000";
const sc_lv<9> ModExp_montMult::ap_ST_st5_fsm_4 = "10000";
const sc_lv<9> ModExp_montMult::ap_ST_st6_fsm_5 = "100000";
const sc_lv<9> ModExp_montMult::ap_ST_st7_fsm_6 = "1000000";
const sc_lv<9> ModExp_montMult::ap_ST_st8_fsm_7 = "10000000";
const sc_lv<9> ModExp_montMult::ap_ST_st9_fsm_8 = "100000000";
const sc_lv<32> ModExp_montMult::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> ModExp_montMult::ap_const_lv1_1 = "1";
const sc_lv<32> ModExp_montMult::ap_const_lv32_1 = "1";
const sc_lv<1> ModExp_montMult::ap_const_lv1_0 = "0";
const sc_lv<32> ModExp_montMult::ap_const_lv32_2 = "10";
const sc_lv<32> ModExp_montMult::ap_const_lv32_3 = "11";
const sc_lv<32> ModExp_montMult::ap_const_lv32_5 = "101";
const sc_lv<32> ModExp_montMult::ap_const_lv32_6 = "110";
const sc_lv<32> ModExp_montMult::ap_const_lv32_7 = "111";
const sc_lv<1025> ModExp_montMult::ap_const_lv1025_lc
const sc_lv<11> ModExp_montMult::ap_const_lv11_0 = "00000000000";
const sc_lv<11> ModExp_montMult::ap_const_lv11_400 = "10000000000";
const sc_lv<11> ModExp_montMult::ap_const_lv11_1 = "1";
const sc_lv<32> ModExp_montMult::ap_const_lv32_401 = "10000000001";
const sc_lv<32> ModExp_montMult::ap_const_lv32_4 = "100";
const sc_lv<32> ModExp_montMult::ap_const_lv32_8 = "1000";

ModExp_montMult::ModExp_montMult(sc_module_name name) : sc_module(name), mVcdFile(0) {
    ModExp_add_1026ns_1026ns_1026_2_U1 = new ModExp_add_1026ns_1026ns_1026_2<1,2,1026,1026,1026>("ModExp_add_1026ns_1026ns_1026_2_U1");
    ModExp_add_1026ns_1026ns_1026_2_U1->clk(ap_clk);
    ModExp_add_1026ns_1026ns_1026_2_U1->reset(ap_rst);
    ModExp_add_1026ns_1026ns_1026_2_U1->din0(Y_V_reg_195);
    ModExp_add_1026ns_1026ns_1026_2_U1->din1(grp_fu_119_p1);
    ModExp_add_1026ns_1026ns_1026_2_U1->ce(ap_var_for_const0);
    ModExp_add_1026ns_1026ns_1026_2_U1->dout(grp_fu_119_p2);
    ModExp_sub_1024ns_1024ns_1024_2_U2 = new ModExp_sub_1024ns_1024ns_1024_2<1,2,1024,1024,1024>("ModExp_sub_1024ns_1024ns_1024_2_U2");
    ModExp_sub_1024ns_1024ns_1024_2_U2->clk(ap_clk);
    ModExp_sub_1024ns_1024ns_1024_2_U2->reset(ap_rst);
    ModExp_sub_1024ns_1024ns_1024_2_U2->din0(grp_fu_137_p0);
    ModExp_sub_1024ns_1024ns_1024_2_U2->din1(M0_V_read_reg_185);
    ModExp_sub_1024ns_1024ns_1024_2_U2->ce(ap_var_for_const0);
    ModExp_sub_1024ns_1024ns_1024_2_U2->dout(grp_fu_137_p2);
    ModExp_add_1026ns_1026ns_1026_2_U3 = new ModExp_add_1026ns_1026ns_1026_2<1,2,1026,1026,1026>("ModExp_add_1026ns_1026ns_1026_2_U3");
    ModExp_add_1026ns_1026ns_1026_2_U3->clk(ap_clk);
    ModExp_add_1026ns_1026ns_1026_2_U3->reset(ap_rst);
    ModExp_add_1026ns_1026ns_1026_2_U3->din0(M_V_reg_200);
    ModExp_add_1026ns_1026ns_1026_2_U3->din1(p_Val2_1_reg_249);
    ModExp_add_1026ns_1026ns_1026_2_U3->ce(ap_var_for_const0);
    ModExp_add_1026ns_1026ns_1026_2_U3->dout(grp_fu_161_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_M_V_cast_fu_88_p1);
    sensitive << ( M0_V );

    SC_METHOD(thread_M_V_fu_84_p1);
    sensitive << ( M0_V );

    SC_METHOD(thread_X_V_fu_76_p1);
    sensitive << ( X0_V );

    SC_METHOD(thread_Y_V_fu_80_p1);
    sensitive << ( Y0_V );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_sig_cseq_ST_st9_fsm_8 );

    SC_METHOD(thread_ap_sig_102);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_114);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_123);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_171);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_188);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_26);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_55);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_80);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_89);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_cseq_ST_st1_fsm_0);
    sensitive << ( ap_sig_26 );

    SC_METHOD(thread_ap_sig_cseq_ST_st2_fsm_1);
    sensitive << ( ap_sig_55 );

    SC_METHOD(thread_ap_sig_cseq_ST_st3_fsm_2);
    sensitive << ( ap_sig_80 );

    SC_METHOD(thread_ap_sig_cseq_ST_st4_fsm_3);
    sensitive << ( ap_sig_89 );

    SC_METHOD(thread_ap_sig_cseq_ST_st5_fsm_4);
    sensitive << ( ap_sig_171 );

    SC_METHOD(thread_ap_sig_cseq_ST_st6_fsm_5);
    sensitive << ( ap_sig_102 );

    SC_METHOD(thread_ap_sig_cseq_ST_st7_fsm_6);
    sensitive << ( ap_sig_114 );

    SC_METHOD(thread_ap_sig_cseq_ST_st8_fsm_7);
    sensitive << ( ap_sig_123 );

    SC_METHOD(thread_ap_sig_cseq_ST_st9_fsm_8);
    sensitive << ( ap_sig_188 );

    SC_METHOD(thread_exitcond_fu_100_p2);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( i_assign_reg_65 );

    SC_METHOD(thread_grp_fu_119_p1);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( p_s_reg_54 );

    SC_METHOD(thread_grp_fu_137_p0);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( p_s_reg_54 );

    SC_METHOD(thread_i_assign_cast1_fu_96_p1);
    sensitive << ( i_assign_reg_65 );

    SC_METHOD(thread_i_fu_106_p2);
    sensitive << ( i_assign_reg_65 );

    SC_METHOD(thread_p_Val2_1_fu_142_p3);
    sensitive << ( p_cast_reg_210 );
    sensitive << ( tmp_7_reg_224 );
    sensitive << ( S_V_reg_244 );

    SC_METHOD(thread_p_cast_fu_92_p1);
    sensitive << ( p_s_reg_54 );

    SC_METHOD(thread_ssdm_int_V_write_assign_fu_180_p3);
    sensitive << ( tmp_reg_229 );
    sensitive << ( tmp_4_reg_239 );
    sensitive << ( tmp_6_reg_274 );

    SC_METHOD(thread_tmp_4_fu_133_p1);
    sensitive << ( p_s_reg_54 );

    SC_METHOD(thread_tmp_5_fu_175_p3);
    sensitive << ( tmp_8_reg_254 );
    sensitive << ( tmp_3_reg_259 );
    sensitive << ( tmp_2_reg_264 );

    SC_METHOD(thread_tmp_7_fu_112_p3);
    sensitive << ( X_V_reg_190 );
    sensitive << ( i_assign_cast1_fu_96_p1 );

    SC_METHOD(thread_tmp_8_fu_147_p1);
    sensitive << ( p_Val2_1_fu_142_p3 );

    SC_METHOD(thread_tmp_fu_124_p2);
    sensitive << ( M_V_cast_reg_205 );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( exitcond_fu_100_p2 );
    sensitive << ( p_s_reg_54 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( exitcond_fu_100_p2 );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "ModExp_montMult_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, X0_V, "(port)X0_V");
    sc_trace(mVcdFile, Y0_V, "(port)Y0_V");
    sc_trace(mVcdFile, M0_V, "(port)M0_V");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st1_fsm_0, "ap_sig_cseq_ST_st1_fsm_0");
    sc_trace(mVcdFile, ap_sig_26, "ap_sig_26");
    sc_trace(mVcdFile, M0_V_read_reg_185, "M0_V_read_reg_185");
    sc_trace(mVcdFile, X_V_fu_76_p1, "X_V_fu_76_p1");
    sc_trace(mVcdFile, X_V_reg_190, "X_V_reg_190");
    sc_trace(mVcdFile, Y_V_fu_80_p1, "Y_V_fu_80_p1");
    sc_trace(mVcdFile, Y_V_reg_195, "Y_V_reg_195");
    sc_trace(mVcdFile, M_V_fu_84_p1, "M_V_fu_84_p1");
    sc_trace(mVcdFile, M_V_reg_200, "M_V_reg_200");
    sc_trace(mVcdFile, M_V_cast_fu_88_p1, "M_V_cast_fu_88_p1");
    sc_trace(mVcdFile, M_V_cast_reg_205, "M_V_cast_reg_205");
    sc_trace(mVcdFile, p_cast_fu_92_p1, "p_cast_fu_92_p1");
    sc_trace(mVcdFile, p_cast_reg_210, "p_cast_reg_210");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st2_fsm_1, "ap_sig_cseq_ST_st2_fsm_1");
    sc_trace(mVcdFile, ap_sig_55, "ap_sig_55");
    sc_trace(mVcdFile, i_fu_106_p2, "i_fu_106_p2");
    sc_trace(mVcdFile, i_reg_219, "i_reg_219");
    sc_trace(mVcdFile, tmp_7_fu_112_p3, "tmp_7_fu_112_p3");
    sc_trace(mVcdFile, tmp_7_reg_224, "tmp_7_reg_224");
    sc_trace(mVcdFile, exitcond_fu_100_p2, "exitcond_fu_100_p2");
    sc_trace(mVcdFile, tmp_fu_124_p2, "tmp_fu_124_p2");
    sc_trace(mVcdFile, tmp_reg_229, "tmp_reg_229");
    sc_trace(mVcdFile, tmp_4_fu_133_p1, "tmp_4_fu_133_p1");
    sc_trace(mVcdFile, tmp_4_reg_239, "tmp_4_reg_239");
    sc_trace(mVcdFile, grp_fu_119_p2, "grp_fu_119_p2");
    sc_trace(mVcdFile, S_V_reg_244, "S_V_reg_244");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st3_fsm_2, "ap_sig_cseq_ST_st3_fsm_2");
    sc_trace(mVcdFile, ap_sig_80, "ap_sig_80");
    sc_trace(mVcdFile, p_Val2_1_fu_142_p3, "p_Val2_1_fu_142_p3");
    sc_trace(mVcdFile, p_Val2_1_reg_249, "p_Val2_1_reg_249");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st4_fsm_3, "ap_sig_cseq_ST_st4_fsm_3");
    sc_trace(mVcdFile, ap_sig_89, "ap_sig_89");
    sc_trace(mVcdFile, tmp_8_fu_147_p1, "tmp_8_fu_147_p1");
    sc_trace(mVcdFile, tmp_8_reg_254, "tmp_8_reg_254");
    sc_trace(mVcdFile, tmp_3_reg_259, "tmp_3_reg_259");
    sc_trace(mVcdFile, tmp_2_reg_264, "tmp_2_reg_264");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st6_fsm_5, "ap_sig_cseq_ST_st6_fsm_5");
    sc_trace(mVcdFile, ap_sig_102, "ap_sig_102");
    sc_trace(mVcdFile, tmp_5_fu_175_p3, "tmp_5_fu_175_p3");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st7_fsm_6, "ap_sig_cseq_ST_st7_fsm_6");
    sc_trace(mVcdFile, ap_sig_114, "ap_sig_114");
    sc_trace(mVcdFile, grp_fu_137_p2, "grp_fu_137_p2");
    sc_trace(mVcdFile, tmp_6_reg_274, "tmp_6_reg_274");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st8_fsm_7, "ap_sig_cseq_ST_st8_fsm_7");
    sc_trace(mVcdFile, ap_sig_123, "ap_sig_123");
    sc_trace(mVcdFile, p_s_reg_54, "p_s_reg_54");
    sc_trace(mVcdFile, i_assign_reg_65, "i_assign_reg_65");
    sc_trace(mVcdFile, i_assign_cast1_fu_96_p1, "i_assign_cast1_fu_96_p1");
    sc_trace(mVcdFile, grp_fu_119_p1, "grp_fu_119_p1");
    sc_trace(mVcdFile, grp_fu_137_p0, "grp_fu_137_p0");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st5_fsm_4, "ap_sig_cseq_ST_st5_fsm_4");
    sc_trace(mVcdFile, ap_sig_171, "ap_sig_171");
    sc_trace(mVcdFile, grp_fu_161_p2, "grp_fu_161_p2");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st9_fsm_8, "ap_sig_cseq_ST_st9_fsm_8");
    sc_trace(mVcdFile, ap_sig_188, "ap_sig_188");
    sc_trace(mVcdFile, ssdm_int_V_write_assign_fu_180_p3, "ssdm_int_V_write_assign_fu_180_p3");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

ModExp_montMult::~ModExp_montMult() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete ModExp_add_1026ns_1026ns_1026_2_U1;
    delete ModExp_sub_1024ns_1024ns_1024_2_U2;
    delete ModExp_add_1026ns_1026ns_1026_2_U3;
}

void ModExp_montMult::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void ModExp_montMult::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st7_fsm_6.read())) {
        i_assign_reg_65 = i_reg_219.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
                !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        i_assign_reg_65 = ap_const_lv11_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st7_fsm_6.read())) {
        p_s_reg_54 = tmp_5_fu_175_p3.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
                !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        p_s_reg_54 = ap_const_lv1025_lc_1;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        M0_V_read_reg_185 = M0_V.read();
        M_V_cast_reg_205 = M_V_cast_fu_88_p1.read();
        M_V_reg_200 = M_V_fu_84_p1.read();
        X_V_reg_190 = X_V_fu_76_p1.read();
        Y_V_reg_195 = Y_V_fu_80_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read())) {
        S_V_reg_244 = grp_fu_119_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st9_fsm_8.read())) {
        ap_return = ssdm_int_V_write_assign_fu_180_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read())) {
        i_reg_219 = i_fu_106_p2.read();
        p_cast_reg_210 = p_cast_fu_92_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read())) {
        p_Val2_1_reg_249 = p_Val2_1_fu_142_p3.read();
        tmp_3_reg_259 = p_Val2_1_fu_142_p3.read().range(1025, 1);
        tmp_8_reg_254 = tmp_8_fu_147_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st6_fsm_5.read()) && !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_8_reg_254.read()))) {
        tmp_2_reg_264 = grp_fu_161_p2.read().range(1025, 1);
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && !esl_seteq<1,1,1>(exitcond_fu_100_p2.read(), ap_const_lv1_0))) {
        tmp_4_reg_239 = tmp_4_fu_133_p1.read();
        tmp_reg_229 = tmp_fu_124_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st8_fsm_7.read())) {
        tmp_6_reg_274 = grp_fu_137_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && esl_seteq<1,1,1>(exitcond_fu_100_p2.read(), ap_const_lv1_0))) {
        tmp_7_reg_224 = tmp_7_fu_112_p3.read();
    }
}

void ModExp_montMult::thread_M_V_cast_fu_88_p1() {
    M_V_cast_fu_88_p1 = esl_zext<1025,1024>(M0_V.read());
}

void ModExp_montMult::thread_M_V_fu_84_p1() {
    M_V_fu_84_p1 = esl_zext<1026,1024>(M0_V.read());
}

void ModExp_montMult::thread_X_V_fu_76_p1() {
    X_V_fu_76_p1 = esl_zext<1026,1024>(X0_V.read());
}

void ModExp_montMult::thread_Y_V_fu_80_p1() {
    Y_V_fu_80_p1 = esl_zext<1026,1024>(Y0_V.read());
}

void ModExp_montMult::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void ModExp_montMult::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void ModExp_montMult::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st9_fsm_8.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void ModExp_montMult::thread_ap_sig_102() {
    ap_sig_102 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(5, 5));
}

void ModExp_montMult::thread_ap_sig_114() {
    ap_sig_114 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(6, 6));
}

void ModExp_montMult::thread_ap_sig_123() {
    ap_sig_123 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(7, 7));
}

void ModExp_montMult::thread_ap_sig_171() {
    ap_sig_171 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(4, 4));
}

void ModExp_montMult::thread_ap_sig_188() {
    ap_sig_188 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(8, 8));
}

void ModExp_montMult::thread_ap_sig_26() {
    ap_sig_26 = esl_seteq<1,1,1>(ap_CS_fsm.read().range(0, 0), ap_const_lv1_1);
}

void ModExp_montMult::thread_ap_sig_55() {
    ap_sig_55 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(1, 1));
}

void ModExp_montMult::thread_ap_sig_80() {
    ap_sig_80 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(2, 2));
}

void ModExp_montMult::thread_ap_sig_89() {
    ap_sig_89 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(3, 3));
}

void ModExp_montMult::thread_ap_sig_cseq_ST_st1_fsm_0() {
    if (ap_sig_26.read()) {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    }
}

void ModExp_montMult::thread_ap_sig_cseq_ST_st2_fsm_1() {
    if (ap_sig_55.read()) {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    }
}

void ModExp_montMult::thread_ap_sig_cseq_ST_st3_fsm_2() {
    if (ap_sig_80.read()) {
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    }
}

void ModExp_montMult::thread_ap_sig_cseq_ST_st4_fsm_3() {
    if (ap_sig_89.read()) {
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    }
}

void ModExp_montMult::thread_ap_sig_cseq_ST_st5_fsm_4() {
    if (ap_sig_171.read()) {
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_0;
    }
}

void ModExp_montMult::thread_ap_sig_cseq_ST_st6_fsm_5() {
    if (ap_sig_102.read()) {
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_0;
    }
}

void ModExp_montMult::thread_ap_sig_cseq_ST_st7_fsm_6() {
    if (ap_sig_114.read()) {
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_0;
    }
}

void ModExp_montMult::thread_ap_sig_cseq_ST_st8_fsm_7() {
    if (ap_sig_123.read()) {
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_0;
    }
}

void ModExp_montMult::thread_ap_sig_cseq_ST_st9_fsm_8() {
    if (ap_sig_188.read()) {
        ap_sig_cseq_ST_st9_fsm_8 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st9_fsm_8 = ap_const_logic_0;
    }
}

void ModExp_montMult::thread_exitcond_fu_100_p2() {
    exitcond_fu_100_p2 = (!i_assign_reg_65.read().is_01() || !ap_const_lv11_400.is_01())? sc_lv<1>(): sc_lv<1>(i_assign_reg_65.read() == ap_const_lv11_400);
}

void ModExp_montMult::thread_grp_fu_119_p1() {
    grp_fu_119_p1 = esl_zext<1026,1025>(p_s_reg_54.read());
}

void ModExp_montMult::thread_grp_fu_137_p0() {
    grp_fu_137_p0 = p_s_reg_54.read().range(1024-1, 0);
}

void ModExp_montMult::thread_i_assign_cast1_fu_96_p1() {
    i_assign_cast1_fu_96_p1 = esl_zext<32,11>(i_assign_reg_65.read());
}

void ModExp_montMult::thread_i_fu_106_p2() {
    i_fu_106_p2 = (!i_assign_reg_65.read().is_01() || !ap_const_lv11_1.is_01())? sc_lv<11>(): (sc_biguint<11>(i_assign_reg_65.read()) + sc_biguint<11>(ap_const_lv11_1));
}

void ModExp_montMult::thread_p_Val2_1_fu_142_p3() {
    p_Val2_1_fu_142_p3 = (!tmp_7_reg_224.read()[0].is_01())? sc_lv<1026>(): ((tmp_7_reg_224.read()[0].to_bool())? S_V_reg_244.read(): p_cast_reg_210.read());
}

void ModExp_montMult::thread_p_cast_fu_92_p1() {
    p_cast_fu_92_p1 = esl_zext<1026,1025>(p_s_reg_54.read());
}

void ModExp_montMult::thread_ssdm_int_V_write_assign_fu_180_p3() {
    ssdm_int_V_write_assign_fu_180_p3 = (!tmp_reg_229.read()[0].is_01())? sc_lv<1024>(): ((tmp_reg_229.read()[0].to_bool())? tmp_4_reg_239.read(): tmp_6_reg_274.read());
}

void ModExp_montMult::thread_tmp_4_fu_133_p1() {
    tmp_4_fu_133_p1 = p_s_reg_54.read().range(1024-1, 0);
}

void ModExp_montMult::thread_tmp_5_fu_175_p3() {
    tmp_5_fu_175_p3 = (!tmp_8_reg_254.read()[0].is_01())? sc_lv<1025>(): ((tmp_8_reg_254.read()[0].to_bool())? tmp_2_reg_264.read(): tmp_3_reg_259.read());
}

void ModExp_montMult::thread_tmp_7_fu_112_p3() {
    tmp_7_fu_112_p3 = (!i_assign_cast1_fu_96_p1.read().is_01() || sc_biguint<32>(i_assign_cast1_fu_96_p1.read()).to_uint() >= 1026)? sc_lv<1>(): X_V_reg_190.read().range(sc_biguint<32>(i_assign_cast1_fu_96_p1.read()).to_uint(), sc_biguint<32>(i_assign_cast1_fu_96_p1.read()).to_uint());
}

void ModExp_montMult::thread_tmp_8_fu_147_p1() {
    tmp_8_fu_147_p1 = p_Val2_1_fu_142_p3.read().range(1-1, 0);
}

void ModExp_montMult::thread_tmp_fu_124_p2() {
    tmp_fu_124_p2 = (!p_s_reg_54.read().is_01() || !M_V_cast_reg_205.read().is_01())? sc_lv<1>(): (sc_biguint<1025>(p_s_reg_54.read()) < sc_biguint<1025>(M_V_cast_reg_205.read()));
}

void ModExp_montMult::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            }
            break;
        case 2 : 
            if (!esl_seteq<1,1,1>(exitcond_fu_100_p2.read(), ap_const_lv1_0)) {
                ap_NS_fsm = ap_ST_st8_fsm_7;
            } else {
                ap_NS_fsm = ap_ST_st3_fsm_2;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_st4_fsm_3;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_st5_fsm_4;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_st6_fsm_5;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_st7_fsm_6;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_st2_fsm_1;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_st9_fsm_8;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_st1_fsm_0;
            break;
        default : 
            ap_NS_fsm = "XXXXXXXXX";
            break;
    }
}

}

