// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "ModExp_montMult.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic ModExp_montMult::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic ModExp_montMult::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<9> ModExp_montMult::ap_ST_st1_fsm_0 = "1";
const sc_lv<9> ModExp_montMult::ap_ST_st2_fsm_1 = "10";
const sc_lv<9> ModExp_montMult::ap_ST_st3_fsm_2 = "100";
const sc_lv<9> ModExp_montMult::ap_ST_st4_fsm_3 = "1000";
const sc_lv<9> ModExp_montMult::ap_ST_st5_fsm_4 = "10000";
const sc_lv<9> ModExp_montMult::ap_ST_st6_fsm_5 = "100000";
const sc_lv<9> ModExp_montMult::ap_ST_st7_fsm_6 = "1000000";
const sc_lv<9> ModExp_montMult::ap_ST_st8_fsm_7 = "10000000";
const sc_lv<9> ModExp_montMult::ap_ST_st9_fsm_8 = "100000000";
const sc_lv<32> ModExp_montMult::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> ModExp_montMult::ap_const_lv1_1 = "1";
const sc_lv<32> ModExp_montMult::ap_const_lv32_1 = "1";
const sc_lv<1> ModExp_montMult::ap_const_lv1_0 = "0";
const sc_lv<32> ModExp_montMult::ap_const_lv32_2 = "10";
const sc_lv<32> ModExp_montMult::ap_const_lv32_3 = "11";
const sc_lv<32> ModExp_montMult::ap_const_lv32_5 = "101";
const sc_lv<32> ModExp_montMult::ap_const_lv32_6 = "110";
const sc_lv<32> ModExp_montMult::ap_const_lv32_7 = "111";
const sc_lv<1024> ModExp_montMult::ap_const_lv1024_lc
const sc_lv<11> ModExp_montMult::ap_const_lv11_0 = "00000000000";
const sc_lv<11> ModExp_montMult::ap_const_lv11_400 = "10000000000";
const sc_lv<11> ModExp_montMult::ap_const_lv11_1 = "1";
const sc_lv<1024> ModExp_montMult::ap_const_lv1024_lc
const sc_lv<32> ModExp_montMult::ap_const_lv32_400 = "10000000000";
const sc_lv<32> ModExp_montMult::ap_const_lv32_4 = "100";
const sc_lv<32> ModExp_montMult::ap_const_lv32_8 = "1000";

ModExp_montMult::ModExp_montMult(sc_module_name name) : sc_module(name), mVcdFile(0) {
    ModExp_sub_1024ns_1024ns_1024_2_U1 = new ModExp_sub_1024ns_1024ns_1024_2<1,2,1024,1024,1024>("ModExp_sub_1024ns_1024ns_1024_2_U1");
    ModExp_sub_1024ns_1024ns_1024_2_U1->clk(ap_clk);
    ModExp_sub_1024ns_1024ns_1024_2_U1->reset(ap_rst);
    ModExp_sub_1024ns_1024ns_1024_2_U1->din0(p_s_reg_56);
    ModExp_sub_1024ns_1024ns_1024_2_U1->din1(M_V_read_reg_185);
    ModExp_sub_1024ns_1024ns_1024_2_U1->ce(ap_var_for_const0);
    ModExp_sub_1024ns_1024ns_1024_2_U1->dout(grp_fu_128_p2);
    ModExp_add_1024ns_1024ns_1024_2_U2 = new ModExp_add_1024ns_1024ns_1024_2<1,2,1024,1024,1024>("ModExp_add_1024ns_1024ns_1024_2_U2");
    ModExp_add_1024ns_1024ns_1024_2_U2->clk(ap_clk);
    ModExp_add_1024ns_1024ns_1024_2_U2->reset(ap_rst);
    ModExp_add_1024ns_1024ns_1024_2_U2->din0(p_s_reg_56);
    ModExp_add_1024ns_1024ns_1024_2_U2->din1(r_V_reg_219);
    ModExp_add_1024ns_1024ns_1024_2_U2->ce(ap_var_for_const0);
    ModExp_add_1024ns_1024ns_1024_2_U2->dout(grp_fu_136_p2);
    ModExp_add_1025ns_1025ns_1025_2_U3 = new ModExp_add_1025ns_1025ns_1025_2<1,2,1025,1025,1025>("ModExp_add_1025ns_1025ns_1025_2_U3");
    ModExp_add_1025ns_1025ns_1025_2_U3->clk(ap_clk);
    ModExp_add_1025ns_1025ns_1025_2_U3->reset(ap_rst);
    ModExp_add_1025ns_1025ns_1025_2_U3->din0(grp_fu_141_p0);
    ModExp_add_1025ns_1025ns_1025_2_U3->din1(p_cast_reg_206);
    ModExp_add_1025ns_1025ns_1025_2_U3->ce(ap_var_for_const0);
    ModExp_add_1025ns_1025ns_1025_2_U3->dout(grp_fu_141_p2);
    ModExp_add_1025ns_1025ns_1025_2_U4 = new ModExp_add_1025ns_1025ns_1025_2<1,2,1025,1025,1025>("ModExp_add_1025ns_1025ns_1025_2_U4");
    ModExp_add_1025ns_1025ns_1025_2_U4->clk(ap_clk);
    ModExp_add_1025ns_1025ns_1025_2_U4->reset(ap_rst);
    ModExp_add_1025ns_1025ns_1025_2_U4->din0(tmp_1_reg_201);
    ModExp_add_1025ns_1025ns_1025_2_U4->din1(S_V_3_reg_235);
    ModExp_add_1025ns_1025ns_1025_2_U4->ce(ap_var_for_const0);
    ModExp_add_1025ns_1025ns_1025_2_U4->dout(grp_fu_160_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_sig_cseq_ST_st9_fsm_8 );

    SC_METHOD(thread_ap_sig_108);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_117);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_167);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_184);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_26);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_53);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_74);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_83);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_96);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_cseq_ST_st1_fsm_0);
    sensitive << ( ap_sig_26 );

    SC_METHOD(thread_ap_sig_cseq_ST_st2_fsm_1);
    sensitive << ( ap_sig_53 );

    SC_METHOD(thread_ap_sig_cseq_ST_st3_fsm_2);
    sensitive << ( ap_sig_74 );

    SC_METHOD(thread_ap_sig_cseq_ST_st4_fsm_3);
    sensitive << ( ap_sig_83 );

    SC_METHOD(thread_ap_sig_cseq_ST_st5_fsm_4);
    sensitive << ( ap_sig_167 );

    SC_METHOD(thread_ap_sig_cseq_ST_st6_fsm_5);
    sensitive << ( ap_sig_96 );

    SC_METHOD(thread_ap_sig_cseq_ST_st7_fsm_6);
    sensitive << ( ap_sig_108 );

    SC_METHOD(thread_ap_sig_cseq_ST_st8_fsm_7);
    sensitive << ( ap_sig_117 );

    SC_METHOD(thread_ap_sig_cseq_ST_st9_fsm_8);
    sensitive << ( ap_sig_184 );

    SC_METHOD(thread_exitcond_fu_91_p2);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( bvh_d_index_reg_68 );

    SC_METHOD(thread_grp_fu_141_p0);
    sensitive << ( r_V_reg_219 );
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );

    SC_METHOD(thread_i_fu_97_p2);
    sensitive << ( bvh_d_index_reg_68 );

    SC_METHOD(thread_index_assign_cast1_fu_87_p1);
    sensitive << ( bvh_d_index_reg_68 );

    SC_METHOD(thread_p_cast_fu_83_p1);
    sensitive << ( p_s_reg_56 );

    SC_METHOD(thread_r_V_fu_118_p2);
    sensitive << ( Y_V_read_reg_191 );
    sensitive << ( tmp_cast_fu_110_p3 );

    SC_METHOD(thread_ssdm_int_V_write_assign_fu_179_p3);
    sensitive << ( tmp_2_reg_225 );
    sensitive << ( S_V_reg_260 );
    sensitive << ( p_s_reg_56 );

    SC_METHOD(thread_tmp_1_fu_79_p1);
    sensitive << ( M_V );

    SC_METHOD(thread_tmp_2_fu_123_p2);
    sensitive << ( M_V_read_reg_185 );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( exitcond_fu_91_p2 );
    sensitive << ( p_s_reg_56 );

    SC_METHOD(thread_tmp_4_fu_174_p3);
    sensitive << ( tmp_7_reg_240 );
    sensitive << ( tmp_3_reg_245 );
    sensitive << ( tmp_reg_250 );

    SC_METHOD(thread_tmp_5_fu_103_p3);
    sensitive << ( X_V_read_reg_196 );
    sensitive << ( index_assign_cast1_fu_87_p1 );

    SC_METHOD(thread_tmp_7_fu_146_p1);
    sensitive << ( grp_fu_136_p2 );

    SC_METHOD(thread_tmp_cast_fu_110_p3);
    sensitive << ( tmp_5_fu_103_p3 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( exitcond_fu_91_p2 );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "ModExp_montMult_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, X_V, "(port)X_V");
    sc_trace(mVcdFile, Y_V, "(port)Y_V");
    sc_trace(mVcdFile, M_V, "(port)M_V");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st1_fsm_0, "ap_sig_cseq_ST_st1_fsm_0");
    sc_trace(mVcdFile, ap_sig_26, "ap_sig_26");
    sc_trace(mVcdFile, M_V_read_reg_185, "M_V_read_reg_185");
    sc_trace(mVcdFile, Y_V_read_reg_191, "Y_V_read_reg_191");
    sc_trace(mVcdFile, X_V_read_reg_196, "X_V_read_reg_196");
    sc_trace(mVcdFile, tmp_1_fu_79_p1, "tmp_1_fu_79_p1");
    sc_trace(mVcdFile, tmp_1_reg_201, "tmp_1_reg_201");
    sc_trace(mVcdFile, p_cast_fu_83_p1, "p_cast_fu_83_p1");
    sc_trace(mVcdFile, p_cast_reg_206, "p_cast_reg_206");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st2_fsm_1, "ap_sig_cseq_ST_st2_fsm_1");
    sc_trace(mVcdFile, ap_sig_53, "ap_sig_53");
    sc_trace(mVcdFile, i_fu_97_p2, "i_fu_97_p2");
    sc_trace(mVcdFile, i_reg_214, "i_reg_214");
    sc_trace(mVcdFile, r_V_fu_118_p2, "r_V_fu_118_p2");
    sc_trace(mVcdFile, r_V_reg_219, "r_V_reg_219");
    sc_trace(mVcdFile, exitcond_fu_91_p2, "exitcond_fu_91_p2");
    sc_trace(mVcdFile, tmp_2_fu_123_p2, "tmp_2_fu_123_p2");
    sc_trace(mVcdFile, tmp_2_reg_225, "tmp_2_reg_225");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st3_fsm_2, "ap_sig_cseq_ST_st3_fsm_2");
    sc_trace(mVcdFile, ap_sig_74, "ap_sig_74");
    sc_trace(mVcdFile, grp_fu_141_p2, "grp_fu_141_p2");
    sc_trace(mVcdFile, S_V_3_reg_235, "S_V_3_reg_235");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st4_fsm_3, "ap_sig_cseq_ST_st4_fsm_3");
    sc_trace(mVcdFile, ap_sig_83, "ap_sig_83");
    sc_trace(mVcdFile, tmp_7_fu_146_p1, "tmp_7_fu_146_p1");
    sc_trace(mVcdFile, tmp_7_reg_240, "tmp_7_reg_240");
    sc_trace(mVcdFile, tmp_3_reg_245, "tmp_3_reg_245");
    sc_trace(mVcdFile, tmp_reg_250, "tmp_reg_250");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st6_fsm_5, "ap_sig_cseq_ST_st6_fsm_5");
    sc_trace(mVcdFile, ap_sig_96, "ap_sig_96");
    sc_trace(mVcdFile, tmp_4_fu_174_p3, "tmp_4_fu_174_p3");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st7_fsm_6, "ap_sig_cseq_ST_st7_fsm_6");
    sc_trace(mVcdFile, ap_sig_108, "ap_sig_108");
    sc_trace(mVcdFile, grp_fu_128_p2, "grp_fu_128_p2");
    sc_trace(mVcdFile, S_V_reg_260, "S_V_reg_260");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st8_fsm_7, "ap_sig_cseq_ST_st8_fsm_7");
    sc_trace(mVcdFile, ap_sig_117, "ap_sig_117");
    sc_trace(mVcdFile, p_s_reg_56, "p_s_reg_56");
    sc_trace(mVcdFile, bvh_d_index_reg_68, "bvh_d_index_reg_68");
    sc_trace(mVcdFile, index_assign_cast1_fu_87_p1, "index_assign_cast1_fu_87_p1");
    sc_trace(mVcdFile, tmp_5_fu_103_p3, "tmp_5_fu_103_p3");
    sc_trace(mVcdFile, tmp_cast_fu_110_p3, "tmp_cast_fu_110_p3");
    sc_trace(mVcdFile, grp_fu_141_p0, "grp_fu_141_p0");
    sc_trace(mVcdFile, grp_fu_136_p2, "grp_fu_136_p2");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st5_fsm_4, "ap_sig_cseq_ST_st5_fsm_4");
    sc_trace(mVcdFile, ap_sig_167, "ap_sig_167");
    sc_trace(mVcdFile, grp_fu_160_p2, "grp_fu_160_p2");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st9_fsm_8, "ap_sig_cseq_ST_st9_fsm_8");
    sc_trace(mVcdFile, ap_sig_184, "ap_sig_184");
    sc_trace(mVcdFile, ssdm_int_V_write_assign_fu_179_p3, "ssdm_int_V_write_assign_fu_179_p3");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

ModExp_montMult::~ModExp_montMult() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete ModExp_sub_1024ns_1024ns_1024_2_U1;
    delete ModExp_add_1024ns_1024ns_1024_2_U2;
    delete ModExp_add_1025ns_1025ns_1025_2_U3;
    delete ModExp_add_1025ns_1025ns_1025_2_U4;
}

void ModExp_montMult::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void ModExp_montMult::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st7_fsm_6.read())) {
        bvh_d_index_reg_68 = i_reg_214.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
                !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        bvh_d_index_reg_68 = ap_const_lv11_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st7_fsm_6.read())) {
        p_s_reg_56 = tmp_4_fu_174_p3.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
                !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        p_s_reg_56 = ap_const_lv1024_lc_1;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        M_V_read_reg_185 = M_V.read();
        X_V_read_reg_196 = X_V.read();
        Y_V_read_reg_191 = Y_V.read();
        tmp_1_reg_201 = tmp_1_fu_79_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read())) {
        S_V_3_reg_235 = grp_fu_141_p2.read();
        tmp_3_reg_245 = grp_fu_141_p2.read().range(1024, 1);
        tmp_7_reg_240 = tmp_7_fu_146_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st8_fsm_7.read())) {
        S_V_reg_260 = grp_fu_128_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st9_fsm_8.read())) {
        ap_return = ssdm_int_V_write_assign_fu_179_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read())) {
        i_reg_214 = i_fu_97_p2.read();
        p_cast_reg_206 = p_cast_fu_83_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && esl_seteq<1,1,1>(exitcond_fu_91_p2.read(), ap_const_lv1_0))) {
        r_V_reg_219 = r_V_fu_118_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && !esl_seteq<1,1,1>(exitcond_fu_91_p2.read(), ap_const_lv1_0))) {
        tmp_2_reg_225 = tmp_2_fu_123_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st6_fsm_5.read()) && !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_7_reg_240.read()))) {
        tmp_reg_250 = grp_fu_160_p2.read().range(1024, 1);
    }
}

void ModExp_montMult::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void ModExp_montMult::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void ModExp_montMult::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st9_fsm_8.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void ModExp_montMult::thread_ap_sig_108() {
    ap_sig_108 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(6, 6));
}

void ModExp_montMult::thread_ap_sig_117() {
    ap_sig_117 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(7, 7));
}

void ModExp_montMult::thread_ap_sig_167() {
    ap_sig_167 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(4, 4));
}

void ModExp_montMult::thread_ap_sig_184() {
    ap_sig_184 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(8, 8));
}

void ModExp_montMult::thread_ap_sig_26() {
    ap_sig_26 = esl_seteq<1,1,1>(ap_CS_fsm.read().range(0, 0), ap_const_lv1_1);
}

void ModExp_montMult::thread_ap_sig_53() {
    ap_sig_53 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(1, 1));
}

void ModExp_montMult::thread_ap_sig_74() {
    ap_sig_74 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(2, 2));
}

void ModExp_montMult::thread_ap_sig_83() {
    ap_sig_83 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(3, 3));
}

void ModExp_montMult::thread_ap_sig_96() {
    ap_sig_96 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(5, 5));
}

void ModExp_montMult::thread_ap_sig_cseq_ST_st1_fsm_0() {
    if (ap_sig_26.read()) {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    }
}

void ModExp_montMult::thread_ap_sig_cseq_ST_st2_fsm_1() {
    if (ap_sig_53.read()) {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    }
}

void ModExp_montMult::thread_ap_sig_cseq_ST_st3_fsm_2() {
    if (ap_sig_74.read()) {
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    }
}

void ModExp_montMult::thread_ap_sig_cseq_ST_st4_fsm_3() {
    if (ap_sig_83.read()) {
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    }
}

void ModExp_montMult::thread_ap_sig_cseq_ST_st5_fsm_4() {
    if (ap_sig_167.read()) {
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_0;
    }
}

void ModExp_montMult::thread_ap_sig_cseq_ST_st6_fsm_5() {
    if (ap_sig_96.read()) {
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_0;
    }
}

void ModExp_montMult::thread_ap_sig_cseq_ST_st7_fsm_6() {
    if (ap_sig_108.read()) {
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_0;
    }
}

void ModExp_montMult::thread_ap_sig_cseq_ST_st8_fsm_7() {
    if (ap_sig_117.read()) {
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_0;
    }
}

void ModExp_montMult::thread_ap_sig_cseq_ST_st9_fsm_8() {
    if (ap_sig_184.read()) {
        ap_sig_cseq_ST_st9_fsm_8 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st9_fsm_8 = ap_const_logic_0;
    }
}

void ModExp_montMult::thread_exitcond_fu_91_p2() {
    exitcond_fu_91_p2 = (!bvh_d_index_reg_68.read().is_01() || !ap_const_lv11_400.is_01())? sc_lv<1>(): sc_lv<1>(bvh_d_index_reg_68.read() == ap_const_lv11_400);
}

void ModExp_montMult::thread_grp_fu_141_p0() {
    grp_fu_141_p0 = esl_zext<1025,1024>(r_V_reg_219.read());
}

void ModExp_montMult::thread_i_fu_97_p2() {
    i_fu_97_p2 = (!bvh_d_index_reg_68.read().is_01() || !ap_const_lv11_1.is_01())? sc_lv<11>(): (sc_biguint<11>(bvh_d_index_reg_68.read()) + sc_biguint<11>(ap_const_lv11_1));
}

void ModExp_montMult::thread_index_assign_cast1_fu_87_p1() {
    index_assign_cast1_fu_87_p1 = esl_zext<32,11>(bvh_d_index_reg_68.read());
}

void ModExp_montMult::thread_p_cast_fu_83_p1() {
    p_cast_fu_83_p1 = esl_zext<1025,1024>(p_s_reg_56.read());
}

void ModExp_montMult::thread_r_V_fu_118_p2() {
    r_V_fu_118_p2 = (tmp_cast_fu_110_p3.read() & Y_V_read_reg_191.read());
}

void ModExp_montMult::thread_ssdm_int_V_write_assign_fu_179_p3() {
    ssdm_int_V_write_assign_fu_179_p3 = (!tmp_2_reg_225.read()[0].is_01())? sc_lv<1024>(): ((tmp_2_reg_225.read()[0].to_bool())? p_s_reg_56.read(): S_V_reg_260.read());
}

void ModExp_montMult::thread_tmp_1_fu_79_p1() {
    tmp_1_fu_79_p1 = esl_zext<1025,1024>(M_V.read());
}

void ModExp_montMult::thread_tmp_2_fu_123_p2() {
    tmp_2_fu_123_p2 = (!p_s_reg_56.read().is_01() || !M_V_read_reg_185.read().is_01())? sc_lv<1>(): (sc_biguint<1024>(p_s_reg_56.read()) < sc_biguint<1024>(M_V_read_reg_185.read()));
}

void ModExp_montMult::thread_tmp_4_fu_174_p3() {
    tmp_4_fu_174_p3 = (!tmp_7_reg_240.read()[0].is_01())? sc_lv<1024>(): ((tmp_7_reg_240.read()[0].to_bool())? tmp_reg_250.read(): tmp_3_reg_245.read());
}

void ModExp_montMult::thread_tmp_5_fu_103_p3() {
    tmp_5_fu_103_p3 = (!index_assign_cast1_fu_87_p1.read().is_01() || sc_biguint<32>(index_assign_cast1_fu_87_p1.read()).to_uint() >= 1024)? sc_lv<1>(): X_V_read_reg_196.read().range(sc_biguint<32>(index_assign_cast1_fu_87_p1.read()).to_uint(), sc_biguint<32>(index_assign_cast1_fu_87_p1.read()).to_uint());
}

void ModExp_montMult::thread_tmp_7_fu_146_p1() {
    tmp_7_fu_146_p1 = grp_fu_136_p2.read().range(1-1, 0);
}

void ModExp_montMult::thread_tmp_cast_fu_110_p3() {
    tmp_cast_fu_110_p3 = (!tmp_5_fu_103_p3.read()[0].is_01())? sc_lv<1024>(): ((tmp_5_fu_103_p3.read()[0].to_bool())? ap_const_lv1024_lc_2: ap_const_lv1024_lc_1);
}

void ModExp_montMult::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            }
            break;
        case 2 : 
            if (!esl_seteq<1,1,1>(exitcond_fu_91_p2.read(), ap_const_lv1_0)) {
                ap_NS_fsm = ap_ST_st8_fsm_7;
            } else {
                ap_NS_fsm = ap_ST_st3_fsm_2;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_st4_fsm_3;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_st5_fsm_4;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_st6_fsm_5;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_st7_fsm_6;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_st2_fsm_1;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_st9_fsm_8;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_st1_fsm_0;
            break;
        default : 
            ap_NS_fsm = "XXXXXXXXX";
            break;
    }
}

}

