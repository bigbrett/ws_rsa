// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module rsaModExp_interleaveModMult (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Y_V,
        M_V,
        ap_return
);

parameter    ap_ST_st1_fsm_0 = 7'b1;
parameter    ap_ST_st2_fsm_1 = 7'b10;
parameter    ap_ST_st3_fsm_2 = 7'b100;
parameter    ap_ST_st4_fsm_3 = 7'b1000;
parameter    ap_ST_st5_fsm_4 = 7'b10000;
parameter    ap_ST_st6_fsm_5 = 7'b100000;
parameter    ap_ST_st7_fsm_6 = 7'b1000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv1028_lc_1 = 1028'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv12_400 = 12'b10000000000;
parameter    ap_const_lv32_B = 32'b1011;
parameter    ap_const_lv1028_lc_2 = 1028'b1;
parameter    ap_const_lv1025_lc_3 = 1025'b
parameter    ap_const_lv12_FFF = 12'b111111111111;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv1024_lc_1 = 1024'b

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [1023:0] Y_V;
input  [1023:0] M_V;
output  [1023:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[1023:0] ap_return;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_24;
wire   [1027:0] tmp_fu_60_p1;
reg   [1027:0] tmp_reg_144;
wire   [1027:0] tmp_s_fu_64_p1;
reg   [1027:0] tmp_s_reg_152;
wire   [1027:0] r_V_fu_80_p2;
reg   [1027:0] r_V_reg_160;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_46;
wire   [0:0] tmp_10_fu_72_p3;
wire   [0:0] tmp_13_fu_86_p3;
reg   [0:0] tmp_13_reg_166;
wire   [11:0] i_fu_99_p2;
reg   [11:0] i_reg_171;
wire   [1027:0] P_V_4_fu_109_p3;
reg   [1027:0] P_V_4_reg_176;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_63;
wire   [1027:0] p_036_1_P_V_2_fu_123_p3;
reg   [1027:0] p_036_1_P_V_2_reg_183;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_72;
wire   [0:0] tmp_5_fu_130_p2;
reg   [0:0] tmp_5_reg_190;
reg    ap_sig_cseq_ST_st6_fsm_5;
reg    ap_sig_81;
wire   [1027:0] P_V_5_fu_138_p3;
reg    ap_sig_cseq_ST_st7_fsm_6;
reg    ap_sig_90;
reg   [1027:0] p_Val2_s_reg_38;
reg   [11:0] i_assign_reg_49;
wire  signed [31:0] i_assign_cast_fu_68_p1;
wire   [1027:0] grp_fu_94_p0;
wire   [1027:0] grp_fu_94_p2;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_130;
wire   [0:0] tmp_4_fu_119_p2;
wire   [1027:0] grp_fu_115_p2;
wire   [1027:0] grp_fu_134_p2;
wire   [1023:0] tmp_11_fu_105_p1;
reg   [1023:0] ap_return_preg;
reg   [6:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'b1;
#0 ap_return_preg = 1024'b
end

rsaModExp_add_1028ns_1028ns_1028_2 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 1028 ),
    .din1_WIDTH( 1028 ),
    .dout_WIDTH( 1028 ))
rsaModExp_add_1028ns_1028ns_1028_2_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_94_p0),
    .din1(tmp_s_reg_152),
    .ce(1'b1),
    .dout(grp_fu_94_p2)
);

rsaModExp_sub_1028ns_1028ns_1028_2 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 1028 ),
    .din1_WIDTH( 1028 ),
    .dout_WIDTH( 1028 ))
rsaModExp_sub_1028ns_1028ns_1028_2_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(P_V_4_reg_176),
    .din1(tmp_reg_144),
    .ce(1'b1),
    .dout(grp_fu_115_p2)
);

rsaModExp_sub_1028ns_1028ns_1028_2 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 1028 ),
    .din1_WIDTH( 1028 ),
    .dout_WIDTH( 1028 ))
rsaModExp_sub_1028ns_1028ns_1028_2_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p_036_1_P_V_2_reg_183),
    .din1(tmp_reg_144),
    .ce(1'b1),
    .dout(grp_fu_134_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= ap_const_lv1024_lc_1;
    end else begin
        if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(tmp_10_fu_72_p3 == 1'b0))) begin
            ap_return_preg <= tmp_11_fu_105_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        i_assign_reg_49 <= i_reg_171;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        i_assign_reg_49 <= ap_const_lv12_400;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        p_Val2_s_reg_38 <= P_V_5_fu_138_p3;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        p_Val2_s_reg_38 <= ap_const_lv1028_lc_1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        P_V_4_reg_176 <= P_V_4_fu_109_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(tmp_10_fu_72_p3 == 1'b0))) begin
        ap_return <= tmp_11_fu_105_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (tmp_10_fu_72_p3 == 1'b0))) begin
        i_reg_171 <= i_fu_99_p2;
        r_V_reg_160[1027 : 1] <= r_V_fu_80_p2[1027 : 1];
        tmp_13_reg_166 <= tmp_13_fu_86_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        p_036_1_P_V_2_reg_183 <= p_036_1_P_V_2_fu_123_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        tmp_5_reg_190 <= tmp_5_fu_130_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        tmp_reg_144[1023 : 0] <= tmp_fu_60_p1[1023 : 0];
        tmp_s_reg_152[1023 : 0] <= tmp_s_fu_64_p1[1023 : 0];
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(tmp_10_fu_72_p3 == 1'b0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_24) begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_46) begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_63) begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_130) begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_72) begin
        ap_sig_cseq_ST_st5_fsm_4 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_81) begin
        ap_sig_cseq_ST_st6_fsm_5 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st6_fsm_5 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_90) begin
        ap_sig_cseq_ST_st7_fsm_6 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st7_fsm_6 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : begin
            if (~(tmp_10_fu_72_p3 == 1'b0)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : begin
            ap_NS_fsm = ap_ST_st4_fsm_3;
        end
        ap_ST_st4_fsm_3 : begin
            ap_NS_fsm = ap_ST_st5_fsm_4;
        end
        ap_ST_st5_fsm_4 : begin
            ap_NS_fsm = ap_ST_st6_fsm_5;
        end
        ap_ST_st6_fsm_5 : begin
            ap_NS_fsm = ap_ST_st7_fsm_6;
        end
        ap_ST_st7_fsm_6 : begin
            ap_NS_fsm = ap_ST_st2_fsm_1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign P_V_4_fu_109_p3 = ((tmp_13_reg_166[0:0] === 1'b1) ? grp_fu_94_p2 : r_V_reg_160);

assign P_V_5_fu_138_p3 = ((tmp_5_reg_190[0:0] === 1'b1) ? p_036_1_P_V_2_reg_183 : grp_fu_134_p2);

always @ (*) begin
    ap_sig_130 = (1'b1 == ap_CS_fsm[ap_const_lv32_3]);
end

always @ (*) begin
    ap_sig_24 = (ap_CS_fsm[ap_const_lv32_0] == 1'b1);
end

always @ (*) begin
    ap_sig_46 = (1'b1 == ap_CS_fsm[ap_const_lv32_1]);
end

always @ (*) begin
    ap_sig_63 = (1'b1 == ap_CS_fsm[ap_const_lv32_2]);
end

always @ (*) begin
    ap_sig_72 = (1'b1 == ap_CS_fsm[ap_const_lv32_4]);
end

always @ (*) begin
    ap_sig_81 = (1'b1 == ap_CS_fsm[ap_const_lv32_5]);
end

always @ (*) begin
    ap_sig_90 = (1'b1 == ap_CS_fsm[ap_const_lv32_6]);
end

assign grp_fu_94_p0 = p_Val2_s_reg_38 << ap_const_lv1028_lc_2;

assign i_assign_cast_fu_68_p1 = $signed(i_assign_reg_49);

assign i_fu_99_p2 = ($signed(ap_const_lv12_FFF) + $signed(i_assign_reg_49));

assign p_036_1_P_V_2_fu_123_p3 = ((tmp_4_fu_119_p2[0:0] === 1'b1) ? P_V_4_reg_176 : grp_fu_115_p2);

assign r_V_fu_80_p2 = p_Val2_s_reg_38 << ap_const_lv1028_lc_2;

assign tmp_10_fu_72_p3 = i_assign_reg_49[ap_const_lv32_B];

assign tmp_11_fu_105_p1 = p_Val2_s_reg_38[1023:0];

assign tmp_13_fu_86_p3 = ap_const_lv1025_lc_3[i_assign_cast_fu_68_p1];

assign tmp_4_fu_119_p2 = ((P_V_4_reg_176 < tmp_reg_144) ? 1'b1 : 1'b0);

assign tmp_5_fu_130_p2 = ((p_036_1_P_V_2_reg_183 < tmp_reg_144) ? 1'b1 : 1'b0);

assign tmp_fu_60_p1 = M_V;

assign tmp_s_fu_64_p1 = Y_V;

always @ (posedge ap_clk) begin
    tmp_reg_144[1027:1024] <= 4'b0000;
    tmp_s_reg_152[1027:1024] <= 4'b0000;
    r_V_reg_160[0] <= 1'b0;
end

endmodule //rsaModExp_interleaveModMult
