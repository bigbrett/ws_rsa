-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity rsaModExp_montMult is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    X0_V : IN STD_LOGIC_VECTOR (1023 downto 0);
    Y0_V : IN STD_LOGIC_VECTOR (1023 downto 0);
    M0_V : IN STD_LOGIC_VECTOR (1023 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (1023 downto 0) );
end;


architecture behav of rsaModExp_montMult is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1025_lc_1 : STD_LOGIC_VECTOR (1024 downto
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv32_401 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1024_lc_1 : STD_LOGIC_VECTOR (1023 downto

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_23 : BOOLEAN;
    signal M0_V_read_reg_188 : STD_LOGIC_VECTOR (1023 downto 0);
    signal X_V_fu_76_p1 : STD_LOGIC_VECTOR (1025 downto 0);
    signal X_V_reg_193 : STD_LOGIC_VECTOR (1025 downto 0);
    signal Y_V_fu_80_p1 : STD_LOGIC_VECTOR (1025 downto 0);
    signal Y_V_reg_198 : STD_LOGIC_VECTOR (1025 downto 0);
    signal M_V_fu_84_p1 : STD_LOGIC_VECTOR (1025 downto 0);
    signal M_V_reg_203 : STD_LOGIC_VECTOR (1025 downto 0);
    signal M_V_cast_fu_88_p1 : STD_LOGIC_VECTOR (1024 downto 0);
    signal M_V_cast_reg_208 : STD_LOGIC_VECTOR (1024 downto 0);
    signal p_cast_fu_92_p1 : STD_LOGIC_VECTOR (1025 downto 0);
    signal p_cast_reg_213 : STD_LOGIC_VECTOR (1025 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_52 : BOOLEAN;
    signal i_fu_106_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_reg_222 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_8_fu_112_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_reg_227 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_fu_100_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_124_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_232 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_133_p1 : STD_LOGIC_VECTOR (1023 downto 0);
    signal tmp_6_reg_242 : STD_LOGIC_VECTOR (1023 downto 0);
    signal p_Val2_1_fu_142_p3 : STD_LOGIC_VECTOR (1025 downto 0);
    signal p_Val2_1_reg_247 : STD_LOGIC_VECTOR (1025 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_77 : BOOLEAN;
    signal tmp_9_fu_148_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_reg_252 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_reg_257 : STD_LOGIC_VECTOR (1024 downto 0);
    signal tmp_5_fu_176_p3 : STD_LOGIC_VECTOR (1024 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_90 : BOOLEAN;
    signal p_s_reg_54 : STD_LOGIC_VECTOR (1024 downto 0);
    signal i_assign_reg_65 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_assign_cast1_fu_96_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_119_p1 : STD_LOGIC_VECTOR (1025 downto 0);
    signal grp_fu_137_p0 : STD_LOGIC_VECTOR (1023 downto 0);
    signal grp_fu_119_p2 : STD_LOGIC_VECTOR (1025 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_139 : BOOLEAN;
    signal grp_fu_162_p2 : STD_LOGIC_VECTOR (1025 downto 0);
    signal tmp_3_fu_166_p4 : STD_LOGIC_VECTOR (1024 downto 0);
    signal grp_fu_137_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_158 : BOOLEAN;
    signal ssdm_int_V_write_assign_fu_182_p3 : STD_LOGIC_VECTOR (1023 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (1023 downto
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);

    component rsaModExp_add_1026ns_1026ns_1026_2 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (1025 downto 0);
        din1 : IN STD_LOGIC_VECTOR (1025 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (1025 downto 0) );
    end component;


    component rsaModExp_sub_1024ns_1024ns_1024_2 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (1023 downto 0);
        din1 : IN STD_LOGIC_VECTOR (1023 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (1023 downto 0) );
    end component;



begin
    rsaModExp_add_1026ns_1026ns_1026_2_U6 : component rsaModExp_add_1026ns_1026ns_1026_2
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 1026,
        din1_WIDTH => 1026,
        dout_WIDTH => 1026)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => Y_V_reg_198,
        din1 => grp_fu_119_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_119_p2);

    rsaModExp_sub_1024ns_1024ns_1024_2_U7 : component rsaModExp_sub_1024ns_1024ns_1024_2
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 1024,
        din1_WIDTH => 1024,
        dout_WIDTH => 1024)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_137_p0,
        din1 => M0_V_read_reg_188,
        ce => ap_const_logic_1,
        dout => grp_fu_137_p2);

    rsaModExp_add_1026ns_1026ns_1026_2_U8 : component rsaModExp_add_1026ns_1026ns_1026_2
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 1026,
        din1_WIDTH => 1026,
        dout_WIDTH => 1026)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => M_V_reg_203,
        din1 => p_Val2_1_reg_247,
        ce => ap_const_logic_1,
        dout => grp_fu_162_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv1024_lc_1;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
                    ap_return_preg <= ssdm_int_V_write_assign_fu_182_p3;
                end if; 
            end if;
        end if;
    end process;


    i_assign_reg_65_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
                i_assign_reg_65 <= i_reg_222;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                i_assign_reg_65 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    p_s_reg_54_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
                p_s_reg_54 <= tmp_5_fu_176_p3;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                p_s_reg_54 <= ap_const_lv1025_lc_1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then
                M0_V_read_reg_188 <= M0_V;
                    M_V_cast_reg_208(1023 downto 0) <= M_V_cast_fu_88_p1(1023 downto 0);
                    M_V_reg_203(1023 downto 0) <= M_V_fu_84_p1(1023 downto 0);
                    X_V_reg_193(1023 downto 0) <= X_V_fu_76_p1(1023 downto 0);
                    Y_V_reg_198(1023 downto 0) <= Y_V_fu_80_p1(1023 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then
                ap_return <= ssdm_int_V_write_assign_fu_182_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                i_reg_222 <= i_fu_106_p2;
                    p_cast_reg_213(1024 downto 0) <= p_cast_fu_92_p1(1024 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                p_Val2_1_reg_247 <= p_Val2_1_fu_142_p3;
                tmp_4_reg_257 <= p_Val2_1_fu_142_p3(1025 downto 1);
                tmp_9_reg_252 <= tmp_9_fu_148_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond_fu_100_p2 = ap_const_lv1_0)))) then
                tmp_6_reg_242 <= tmp_6_fu_133_p1;
                tmp_reg_232 <= tmp_fu_124_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond_fu_100_p2 = ap_const_lv1_0))) then
                tmp_8_reg_227 <= tmp_8_fu_112_p3;
            end if;
        end if;
    end process;
    X_V_reg_193(1025 downto 1024) <= "00";
    Y_V_reg_198(1025 downto 1024) <= "00";
    M_V_reg_203(1025 downto 1024) <= "00";
    M_V_cast_reg_208(1024) <= '0';
    p_cast_reg_213(1025) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond_fu_100_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((exitcond_fu_100_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st2_fsm_1;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    M_V_cast_fu_88_p1 <= std_logic_vector(resize(unsigned(M0_V),1025));
    M_V_fu_84_p1 <= std_logic_vector(resize(unsigned(M0_V),1026));
    X_V_fu_76_p1 <= std_logic_vector(resize(unsigned(X0_V),1026));
    Y_V_fu_80_p1 <= std_logic_vector(resize(unsigned(Y0_V),1026));

    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_139_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_139 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    ap_sig_158_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_158 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    ap_sig_23_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_23 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_52_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_52 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_77_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_77 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    ap_sig_90_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_90 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_23)
    begin
        if (ap_sig_23) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_52)
    begin
        if (ap_sig_52) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_77)
    begin
        if (ap_sig_77) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_139)
    begin
        if (ap_sig_139) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_90)
    begin
        if (ap_sig_90) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_158)
    begin
        if (ap_sig_158) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_fu_100_p2 <= "1" when (i_assign_reg_65 = ap_const_lv11_400) else "0";
    grp_fu_119_p1 <= std_logic_vector(resize(unsigned(p_s_reg_54),1026));
    grp_fu_137_p0 <= p_s_reg_54(1024 - 1 downto 0);
    i_assign_cast1_fu_96_p1 <= std_logic_vector(resize(unsigned(i_assign_reg_65),32));
    i_fu_106_p2 <= std_logic_vector(unsigned(i_assign_reg_65) + unsigned(ap_const_lv11_1));
    p_Val2_1_fu_142_p3 <= 
        grp_fu_119_p2 when (tmp_8_reg_227(0) = '1') else 
        p_cast_reg_213;
    p_cast_fu_92_p1 <= std_logic_vector(resize(unsigned(p_s_reg_54),1026));
    ssdm_int_V_write_assign_fu_182_p3 <= 
        tmp_6_reg_242 when (tmp_reg_232(0) = '1') else 
        grp_fu_137_p2;
    tmp_3_fu_166_p4 <= grp_fu_162_p2(1025 downto 1);
    tmp_5_fu_176_p3 <= 
        tmp_3_fu_166_p4 when (tmp_9_reg_252(0) = '1') else 
        tmp_4_reg_257;
    tmp_6_fu_133_p1 <= p_s_reg_54(1024 - 1 downto 0);
    tmp_8_fu_112_p3 <= X_V_reg_193(to_integer(unsigned(i_assign_cast1_fu_96_p1)) downto to_integer(unsigned(i_assign_cast1_fu_96_p1))) when (to_integer(unsigned(i_assign_cast1_fu_96_p1))>= 0 and to_integer(unsigned(i_assign_cast1_fu_96_p1))<=1025) else "-";
    tmp_9_fu_148_p1 <= p_Val2_1_fu_142_p3(1 - 1 downto 0);
    tmp_fu_124_p2 <= "1" when (unsigned(p_s_reg_54) < unsigned(M_V_cast_reg_208)) else "0";
end behav;
