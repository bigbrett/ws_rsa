-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity rsa_toplevel is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 9;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    interrupt : OUT STD_LOGIC );
end;


architecture behav of rsa_toplevel is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "rsa_toplevel,hls_ip_2016_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=100.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=62.656625,HLS_SYN_LAT=1069,HLS_SYN_TPT=1070,HLS_SYN_MEM=0,HLS_SYN_DSP=4,HLS_SYN_FF=11728,HLS_SYN_LUT=18146}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_S_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_S_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv1024_lc_1 : STD_LOGIC_VECTOR (1023 downto
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_true : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal inData_V : STD_LOGIC_VECTOR (1023 downto 0);
    signal rsa_toplevel_Block_codeRepl5_proc_U0_ap_start : STD_LOGIC;
    signal rsa_toplevel_Block_codeRepl5_proc_U0_ap_done : STD_LOGIC;
    signal rsa_toplevel_Block_codeRepl5_proc_U0_ap_continue : STD_LOGIC;
    signal rsa_toplevel_Block_codeRepl5_proc_U0_ap_idle : STD_LOGIC;
    signal rsa_toplevel_Block_codeRepl5_proc_U0_ap_ready : STD_LOGIC;
    signal rsa_toplevel_Block_codeRepl5_proc_U0_outData_V : STD_LOGIC_VECTOR (1023 downto 0);
    signal rsa_toplevel_Block_codeRepl5_proc_U0_outData_V_ap_vld : STD_LOGIC;
    signal ap_sig_hs_continue : STD_LOGIC;
    signal ap_sig_hs_done : STD_LOGIC;
    signal ap_sig_hs_ready : STD_LOGIC;

    component rsa_toplevel_Block_codeRepl5_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        inData_V : IN STD_LOGIC_VECTOR (1023 downto 0);
        outData_V : OUT STD_LOGIC_VECTOR (1023 downto 0);
        outData_V_ap_vld : OUT STD_LOGIC );
    end component;


    component rsa_toplevel_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        inData_V : OUT STD_LOGIC_VECTOR (1023 downto 0);
        outData_V : IN STD_LOGIC_VECTOR (1023 downto 0);
        outData_V_ap_vld : IN STD_LOGIC );
    end component;



begin
    rsa_toplevel_AXILiteS_s_axi_U : component rsa_toplevel_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        inData_V => inData_V,
        outData_V => rsa_toplevel_Block_codeRepl5_proc_U0_outData_V,
        outData_V_ap_vld => rsa_toplevel_Block_codeRepl5_proc_U0_outData_V_ap_vld);

    rsa_toplevel_Block_codeRepl5_proc_U0 : component rsa_toplevel_Block_codeRepl5_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => rsa_toplevel_Block_codeRepl5_proc_U0_ap_start,
        ap_done => rsa_toplevel_Block_codeRepl5_proc_U0_ap_done,
        ap_continue => rsa_toplevel_Block_codeRepl5_proc_U0_ap_continue,
        ap_idle => rsa_toplevel_Block_codeRepl5_proc_U0_ap_idle,
        ap_ready => rsa_toplevel_Block_codeRepl5_proc_U0_ap_ready,
        inData_V => inData_V,
        outData_V => rsa_toplevel_Block_codeRepl5_proc_U0_outData_V,
        outData_V_ap_vld => rsa_toplevel_Block_codeRepl5_proc_U0_outData_V_ap_vld);




    ap_done <= ap_sig_hs_done;

    ap_idle_assign_proc : process(rsa_toplevel_Block_codeRepl5_proc_U0_ap_idle)
    begin
        if ((ap_const_logic_1 = rsa_toplevel_Block_codeRepl5_proc_U0_ap_idle)) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= rsa_toplevel_Block_codeRepl5_proc_U0_ap_ready;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sig_hs_continue <= ap_const_logic_1;

    ap_sig_hs_done_assign_proc : process(rsa_toplevel_Block_codeRepl5_proc_U0_ap_done)
    begin
        if ((ap_const_logic_1 = rsa_toplevel_Block_codeRepl5_proc_U0_ap_done)) then 
            ap_sig_hs_done <= ap_const_logic_1;
        else 
            ap_sig_hs_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_sig_hs_ready <= rsa_toplevel_Block_codeRepl5_proc_U0_ap_ready;
    rsa_toplevel_Block_codeRepl5_proc_U0_ap_continue <= ap_const_logic_1;
    rsa_toplevel_Block_codeRepl5_proc_U0_ap_start <= ap_start;
end behav;
