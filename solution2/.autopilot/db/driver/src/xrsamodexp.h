// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef XRSAMODEXP_H
#define XRSAMODEXP_H

#ifdef __cplusplus
extern "C" {
#endif

/***************************** Include Files *********************************/
#ifndef __linux__
#include "xil_types.h"
#include "xil_assert.h"
#include "xstatus.h"
#include "xil_io.h"
#else
#include <stdint.h>
#include <assert.h>
#include <dirent.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>
#include <unistd.h>
#include <stddef.h>
#endif
#include "xrsamodexp_hw.h"

/**************************** Type Definitions ******************************/
#ifdef __linux__
typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
#else
typedef struct {
    u16 DeviceId;
    u32 Axilites_BaseAddress;
} XRsamodexp_Config;
#endif

typedef struct {
    u32 Axilites_BaseAddress;
    u32 IsReady;
} XRsamodexp;

typedef struct {
    u32 word_0;
    u32 word_1;
    u32 word_2;
    u32 word_3;
    u32 word_4;
    u32 word_5;
    u32 word_6;
    u32 word_7;
    u32 word_8;
    u32 word_9;
    u32 word_10;
    u32 word_11;
    u32 word_12;
    u32 word_13;
    u32 word_14;
    u32 word_15;
    u32 word_16;
    u32 word_17;
    u32 word_18;
    u32 word_19;
    u32 word_20;
    u32 word_21;
    u32 word_22;
    u32 word_23;
    u32 word_24;
    u32 word_25;
    u32 word_26;
    u32 word_27;
    u32 word_28;
    u32 word_29;
    u32 word_30;
    u32 word_31;
    u32 word_32;
    u32 word_33;
    u32 word_34;
    u32 word_35;
    u32 word_36;
    u32 word_37;
    u32 word_38;
    u32 word_39;
    u32 word_40;
    u32 word_41;
    u32 word_42;
    u32 word_43;
    u32 word_44;
    u32 word_45;
    u32 word_46;
    u32 word_47;
    u32 word_48;
    u32 word_49;
    u32 word_50;
    u32 word_51;
    u32 word_52;
    u32 word_53;
    u32 word_54;
    u32 word_55;
    u32 word_56;
    u32 word_57;
    u32 word_58;
    u32 word_59;
    u32 word_60;
    u32 word_61;
    u32 word_62;
    u32 word_63;
} XRsamodexp_M_v;

typedef struct {
    u32 word_0;
    u32 word_1;
    u32 word_2;
    u32 word_3;
    u32 word_4;
    u32 word_5;
    u32 word_6;
    u32 word_7;
    u32 word_8;
    u32 word_9;
    u32 word_10;
    u32 word_11;
    u32 word_12;
    u32 word_13;
    u32 word_14;
    u32 word_15;
    u32 word_16;
    u32 word_17;
    u32 word_18;
    u32 word_19;
    u32 word_20;
    u32 word_21;
    u32 word_22;
    u32 word_23;
    u32 word_24;
    u32 word_25;
    u32 word_26;
    u32 word_27;
    u32 word_28;
    u32 word_29;
    u32 word_30;
    u32 word_31;
    u32 word_32;
    u32 word_33;
    u32 word_34;
    u32 word_35;
    u32 word_36;
    u32 word_37;
    u32 word_38;
    u32 word_39;
    u32 word_40;
    u32 word_41;
    u32 word_42;
    u32 word_43;
    u32 word_44;
    u32 word_45;
    u32 word_46;
    u32 word_47;
    u32 word_48;
    u32 word_49;
    u32 word_50;
    u32 word_51;
    u32 word_52;
    u32 word_53;
    u32 word_54;
    u32 word_55;
    u32 word_56;
    u32 word_57;
    u32 word_58;
    u32 word_59;
    u32 word_60;
    u32 word_61;
    u32 word_62;
    u32 word_63;
} XRsamodexp_E_v;

typedef struct {
    u32 word_0;
    u32 word_1;
    u32 word_2;
    u32 word_3;
    u32 word_4;
    u32 word_5;
    u32 word_6;
    u32 word_7;
    u32 word_8;
    u32 word_9;
    u32 word_10;
    u32 word_11;
    u32 word_12;
    u32 word_13;
    u32 word_14;
    u32 word_15;
    u32 word_16;
    u32 word_17;
    u32 word_18;
    u32 word_19;
    u32 word_20;
    u32 word_21;
    u32 word_22;
    u32 word_23;
    u32 word_24;
    u32 word_25;
    u32 word_26;
    u32 word_27;
    u32 word_28;
    u32 word_29;
    u32 word_30;
    u32 word_31;
    u32 word_32;
    u32 word_33;
    u32 word_34;
    u32 word_35;
    u32 word_36;
    u32 word_37;
    u32 word_38;
    u32 word_39;
    u32 word_40;
    u32 word_41;
    u32 word_42;
    u32 word_43;
    u32 word_44;
    u32 word_45;
    u32 word_46;
    u32 word_47;
    u32 word_48;
    u32 word_49;
    u32 word_50;
    u32 word_51;
    u32 word_52;
    u32 word_53;
    u32 word_54;
    u32 word_55;
    u32 word_56;
    u32 word_57;
    u32 word_58;
    u32 word_59;
    u32 word_60;
    u32 word_61;
    u32 word_62;
    u32 word_63;
} XRsamodexp_N_v;

typedef struct {
    u32 word_0;
    u32 word_1;
    u32 word_2;
    u32 word_3;
    u32 word_4;
    u32 word_5;
    u32 word_6;
    u32 word_7;
    u32 word_8;
    u32 word_9;
    u32 word_10;
    u32 word_11;
    u32 word_12;
    u32 word_13;
    u32 word_14;
    u32 word_15;
    u32 word_16;
    u32 word_17;
    u32 word_18;
    u32 word_19;
    u32 word_20;
    u32 word_21;
    u32 word_22;
    u32 word_23;
    u32 word_24;
    u32 word_25;
    u32 word_26;
    u32 word_27;
    u32 word_28;
    u32 word_29;
    u32 word_30;
    u32 word_31;
    u32 word_32;
    u32 word_33;
    u32 word_34;
    u32 word_35;
    u32 word_36;
    u32 word_37;
    u32 word_38;
    u32 word_39;
    u32 word_40;
    u32 word_41;
    u32 word_42;
    u32 word_43;
    u32 word_44;
    u32 word_45;
    u32 word_46;
    u32 word_47;
    u32 word_48;
    u32 word_49;
    u32 word_50;
    u32 word_51;
    u32 word_52;
    u32 word_53;
    u32 word_54;
    u32 word_55;
    u32 word_56;
    u32 word_57;
    u32 word_58;
    u32 word_59;
    u32 word_60;
    u32 word_61;
    u32 word_62;
    u32 word_63;
} XRsamodexp_Out_v;

/***************** Macros (Inline Functions) Definitions *********************/
#ifndef __linux__
#define XRsamodexp_WriteReg(BaseAddress, RegOffset, Data) \
    Xil_Out32((BaseAddress) + (RegOffset), (u32)(Data))
#define XRsamodexp_ReadReg(BaseAddress, RegOffset) \
    Xil_In32((BaseAddress) + (RegOffset))
#else
#define XRsamodexp_WriteReg(BaseAddress, RegOffset, Data) \
    *(volatile u32*)((BaseAddress) + (RegOffset)) = (u32)(Data)
#define XRsamodexp_ReadReg(BaseAddress, RegOffset) \
    *(volatile u32*)((BaseAddress) + (RegOffset))

#define Xil_AssertVoid(expr)    assert(expr)
#define Xil_AssertNonvoid(expr) assert(expr)

#define XST_SUCCESS             0
#define XST_DEVICE_NOT_FOUND    2
#define XST_OPEN_DEVICE_FAILED  3
#define XIL_COMPONENT_IS_READY  1
#endif

/************************** Function Prototypes *****************************/
#ifndef __linux__
int XRsamodexp_Initialize(XRsamodexp *InstancePtr, u16 DeviceId);
XRsamodexp_Config* XRsamodexp_LookupConfig(u16 DeviceId);
int XRsamodexp_CfgInitialize(XRsamodexp *InstancePtr, XRsamodexp_Config *ConfigPtr);
#else
int XRsamodexp_Initialize(XRsamodexp *InstancePtr, const char* InstanceName);
int XRsamodexp_Release(XRsamodexp *InstancePtr);
#endif

void XRsamodexp_Start(XRsamodexp *InstancePtr);
u32 XRsamodexp_IsDone(XRsamodexp *InstancePtr);
u32 XRsamodexp_IsIdle(XRsamodexp *InstancePtr);
u32 XRsamodexp_IsReady(XRsamodexp *InstancePtr);
void XRsamodexp_EnableAutoRestart(XRsamodexp *InstancePtr);
void XRsamodexp_DisableAutoRestart(XRsamodexp *InstancePtr);

void XRsamodexp_Set_M_V(XRsamodexp *InstancePtr, XRsamodexp_M_v Data);
XRsamodexp_M_v XRsamodexp_Get_M_V(XRsamodexp *InstancePtr);
void XRsamodexp_Set_e_V(XRsamodexp *InstancePtr, XRsamodexp_E_v Data);
XRsamodexp_E_v XRsamodexp_Get_e_V(XRsamodexp *InstancePtr);
void XRsamodexp_Set_n_V(XRsamodexp *InstancePtr, XRsamodexp_N_v Data);
XRsamodexp_N_v XRsamodexp_Get_n_V(XRsamodexp *InstancePtr);
XRsamodexp_Out_v XRsamodexp_Get_out_V(XRsamodexp *InstancePtr);
u32 XRsamodexp_Get_out_V_vld(XRsamodexp *InstancePtr);

void XRsamodexp_InterruptGlobalEnable(XRsamodexp *InstancePtr);
void XRsamodexp_InterruptGlobalDisable(XRsamodexp *InstancePtr);
void XRsamodexp_InterruptEnable(XRsamodexp *InstancePtr, u32 Mask);
void XRsamodexp_InterruptDisable(XRsamodexp *InstancePtr, u32 Mask);
void XRsamodexp_InterruptClear(XRsamodexp *InstancePtr, u32 Mask);
u32 XRsamodexp_InterruptGetEnabled(XRsamodexp *InstancePtr);
u32 XRsamodexp_InterruptGetStatus(XRsamodexp *InstancePtr);

#ifdef __cplusplus
}
#endif

#endif
