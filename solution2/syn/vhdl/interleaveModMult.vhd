-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity interleaveModMult is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    Y_V : IN STD_LOGIC_VECTOR (2047 downto 0);
    M_V : IN STD_LOGIC_VECTOR (2047 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (2047 downto 0) );
end;


architecture behav of interleaveModMult is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv2052_lc_1 : STD_LOGIC_VECTOR (2051 downto
    constant ap_const_lv13_800 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_const_lv2052_lc_2 : STD_LOGIC_VECTOR (2051 downto
    constant ap_const_lv2049_lc_3 : STD_LOGIC_VECTOR (2048 downto
    constant ap_const_lv13_1FFF : STD_LOGIC_VECTOR (12 downto 0) := "1111111111111";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv2048_lc_1 : STD_LOGIC_VECTOR (2047 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_fu_60_p1 : STD_LOGIC_VECTOR (2051 downto 0);
    signal tmp_reg_143 : STD_LOGIC_VECTOR (2051 downto 0);
    signal tmp_s_fu_64_p1 : STD_LOGIC_VECTOR (2051 downto 0);
    signal tmp_s_reg_151 : STD_LOGIC_VECTOR (2051 downto 0);
    signal r_V_fu_80_p2 : STD_LOGIC_VECTOR (2051 downto 0);
    signal r_V_reg_159 : STD_LOGIC_VECTOR (2051 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_10_fu_72_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_86_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_reg_165 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_99_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal i_reg_170 : STD_LOGIC_VECTOR (12 downto 0);
    signal P_V_4_fu_109_p3 : STD_LOGIC_VECTOR (2051 downto 0);
    signal P_V_4_reg_175 : STD_LOGIC_VECTOR (2051 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_4_fu_119_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_reg_182 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal p_036_1_P_V_2_fu_123_p3 : STD_LOGIC_VECTOR (2051 downto 0);
    signal p_036_1_P_V_2_reg_187 : STD_LOGIC_VECTOR (2051 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_5_fu_129_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_194 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal P_V_5_fu_137_p3 : STD_LOGIC_VECTOR (2051 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal p_Val2_s_reg_38 : STD_LOGIC_VECTOR (2051 downto 0);
    signal i_assign_reg_49 : STD_LOGIC_VECTOR (12 downto 0);
    signal i_assign_cast_fu_68_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_94_p0 : STD_LOGIC_VECTOR (2051 downto 0);
    signal grp_fu_94_p2 : STD_LOGIC_VECTOR (2051 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_fu_115_p2 : STD_LOGIC_VECTOR (2051 downto 0);
    signal grp_fu_133_p2 : STD_LOGIC_VECTOR (2051 downto 0);
    signal tmp_11_fu_105_p1 : STD_LOGIC_VECTOR (2047 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (2047 downto
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);

    component rsaModExp_add_205bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (2051 downto 0);
        din1 : IN STD_LOGIC_VECTOR (2051 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (2051 downto 0) );
    end component;


    component rsaModExp_sub_205cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (2051 downto 0);
        din1 : IN STD_LOGIC_VECTOR (2051 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (2051 downto 0) );
    end component;



begin
    rsaModExp_add_205bkb_U1 : component rsaModExp_add_205bkb
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 2052,
        din1_WIDTH => 2052,
        dout_WIDTH => 2052)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_94_p0,
        din1 => tmp_s_reg_151,
        ce => ap_const_logic_1,
        dout => grp_fu_94_p2);

    rsaModExp_sub_205cud_U2 : component rsaModExp_sub_205cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 2052,
        din1_WIDTH => 2052,
        dout_WIDTH => 2052)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => P_V_4_reg_175,
        din1 => tmp_reg_143,
        ce => ap_const_logic_1,
        dout => grp_fu_115_p2);

    rsaModExp_sub_205cud_U3 : component rsaModExp_sub_205cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 2052,
        din1_WIDTH => 2052,
        dout_WIDTH => 2052)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_036_1_P_V_2_reg_187,
        din1 => tmp_reg_143,
        ce => ap_const_logic_1,
        dout => grp_fu_133_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv2048_lc_1;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_state2) and not((tmp_10_fu_72_p3 = ap_const_lv1_0)))) then 
                    ap_return_preg <= tmp_11_fu_105_p1;
                end if; 
            end if;
        end if;
    end process;


    i_assign_reg_49_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state13))) then 
                i_assign_reg_49 <= i_reg_170;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                i_assign_reg_49 <= ap_const_lv13_800;
            end if; 
        end if;
    end process;

    p_Val2_s_reg_38_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state13))) then 
                p_Val2_s_reg_38 <= P_V_5_fu_137_p3;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                p_Val2_s_reg_38 <= ap_const_lv2052_lc_1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state5))) then
                P_V_4_reg_175 <= P_V_4_fu_109_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2) and not((tmp_10_fu_72_p3 = ap_const_lv1_0)))) then
                ap_return <= tmp_11_fu_105_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2) and (tmp_10_fu_72_p3 = ap_const_lv1_0))) then
                i_reg_170 <= i_fu_99_p2;
                    r_V_reg_159(2051 downto 1) <= r_V_fu_80_p2(2051 downto 1);
                tmp_13_reg_165 <= tmp_13_fu_86_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state9))) then
                p_036_1_P_V_2_reg_187 <= p_036_1_P_V_2_fu_123_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state8))) then
                tmp_4_reg_182 <= tmp_4_fu_119_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state10))) then
                tmp_5_reg_194 <= tmp_5_fu_129_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then
                    tmp_reg_143(2047 downto 0) <= tmp_fu_60_p1(2047 downto 0);
                    tmp_s_reg_151(2047 downto 0) <= tmp_s_fu_64_p1(2047 downto 0);
            end if;
        end if;
    end process;
    tmp_reg_143(2051 downto 2048) <= "0000";
    tmp_s_reg_151(2051 downto 2048) <= "0000";
    r_V_reg_159(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, tmp_10_fu_72_p3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (not((tmp_10_fu_72_p3 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;
    P_V_4_fu_109_p3 <= 
        grp_fu_94_p2 when (tmp_13_reg_165(0) = '1') else 
        r_V_reg_159;
    P_V_5_fu_137_p3 <= 
        p_036_1_P_V_2_reg_187 when (tmp_5_reg_194(0) = '1') else 
        grp_fu_133_p2;
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9 downto 9);
    ap_CS_fsm_state13 <= ap_CS_fsm(12 downto 12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_state5 <= ap_CS_fsm(4 downto 4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5 downto 5);
    ap_CS_fsm_state8 <= ap_CS_fsm(7 downto 7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8 downto 8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, tmp_10_fu_72_p3)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state2) and not((tmp_10_fu_72_p3 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_94_p0 <= std_logic_vector(shift_left(unsigned(p_Val2_s_reg_38),to_integer(unsigned('0' & ap_const_lv2052_lc_2(31-1 downto 0)))));
        i_assign_cast_fu_68_p1 <= std_logic_vector(resize(signed(i_assign_reg_49),32));

    i_fu_99_p2 <= std_logic_vector(signed(ap_const_lv13_1FFF) + signed(i_assign_reg_49));
    p_036_1_P_V_2_fu_123_p3 <= 
        P_V_4_reg_175 when (tmp_4_reg_182(0) = '1') else 
        grp_fu_115_p2;
    r_V_fu_80_p2 <= std_logic_vector(shift_left(unsigned(p_Val2_s_reg_38),to_integer(unsigned('0' & ap_const_lv2052_lc_2(31-1 downto 0)))));
    tmp_10_fu_72_p3 <= i_assign_reg_49(12 downto 12);
    tmp_11_fu_105_p1 <= p_Val2_s_reg_38(2048 - 1 downto 0);
    tmp_13_fu_86_p3 <= ap_const_lv2049_lc_3(to_integer(unsigned(i_assign_cast_fu_68_p1)) downto to_integer(unsigned(i_assign_cast_fu_68_p1))) when (to_integer(unsigned(i_assign_cast_fu_68_p1))>= 0 and to_integer(unsigned(i_assign_cast_fu_68_p1))<=2048) else "-";
    tmp_4_fu_119_p2 <= "1" when (unsigned(P_V_4_reg_175) < unsigned(tmp_reg_143)) else "0";
    tmp_5_fu_129_p2 <= "1" when (unsigned(p_036_1_P_V_2_reg_187) < unsigned(tmp_reg_143)) else "0";
    tmp_fu_60_p1 <= std_logic_vector(resize(unsigned(M_V),2052));
    tmp_s_fu_64_p1 <= std_logic_vector(resize(unsigned(Y_V),2052));
end behav;
