-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity rsaModExp is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 11;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of rsaModExp is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "rsaModExp,hls_ip_2016_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=25.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=21.967750,HLS_SYN_LAT=50419749,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=137486,HLS_SYN_LUT=59533}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv12_7FF : STD_LOGIC_VECTOR (11 downto 0) := "011111111111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv2048_lc_2 : STD_LOGIC_VECTOR (2047 downto
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv12_FFF : STD_LOGIC_VECTOR (11 downto 0) := "111111111111";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal M_V : STD_LOGIC_VECTOR (2047 downto 0);
    signal e_V : STD_LOGIC_VECTOR (2047 downto 0);
    signal n_V : STD_LOGIC_VECTOR (2047 downto 0);
    signal out_V_ap_vld : STD_LOGIC;
    signal reg_157 : STD_LOGIC_VECTOR (2047 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_fu_172_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal n_V_read_reg_200 : STD_LOGIC_VECTOR (2047 downto 0);
    signal e_V_read_reg_206 : STD_LOGIC_VECTOR (2047 downto 0);
    signal M_V_read_reg_211 : STD_LOGIC_VECTOR (2047 downto 0);
    signal grp_interleaveModMult_fu_95_ap_return : STD_LOGIC_VECTOR (2047 downto 0);
    signal Mbar_V_reg_216 : STD_LOGIC_VECTOR (2047 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_interleaveModMult_fu_95_ap_done : STD_LOGIC;
    signal tmp_1_fu_180_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_224 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_montMult_fu_118_ap_return : STD_LOGIC_VECTOR (2047 downto 0);
    signal xbar_V_2_reg_228 : STD_LOGIC_VECTOR (2047 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_montMult_fu_118_ap_done : STD_LOGIC;
    signal i_fu_187_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_interleaveModMult_fu_95_ap_start : STD_LOGIC;
    signal grp_interleaveModMult_fu_95_ap_idle : STD_LOGIC;
    signal grp_interleaveModMult_fu_95_ap_ready : STD_LOGIC;
    signal grp_interleaveModMult_fu_95_Y_V : STD_LOGIC_VECTOR (2047 downto 0);
    signal grp_montMult_fu_118_ap_start : STD_LOGIC;
    signal grp_montMult_fu_118_ap_idle : STD_LOGIC;
    signal grp_montMult_fu_118_ap_ready : STD_LOGIC;
    signal grp_montMult_fu_118_X0_V : STD_LOGIC_VECTOR (2047 downto 0);
    signal grp_montMult_fu_118_Y0_V : STD_LOGIC_VECTOR (2047 downto 0);
    signal i_assign_reg_83 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_reg_grp_interleaveModMult_fu_95_ap_start : STD_LOGIC := '0';
    signal ap_reg_grp_montMult_fu_118_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal xbar_V_1_fu_54 : STD_LOGIC_VECTOR (2047 downto 0);
    signal i_assign_cast_fu_168_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);

    component interleaveModMult IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        Y_V : IN STD_LOGIC_VECTOR (2047 downto 0);
        M_V : IN STD_LOGIC_VECTOR (2047 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (2047 downto 0) );
    end component;


    component montMult IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        X0_V : IN STD_LOGIC_VECTOR (2047 downto 0);
        Y0_V : IN STD_LOGIC_VECTOR (2047 downto 0);
        M0_V : IN STD_LOGIC_VECTOR (2047 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (2047 downto 0) );
    end component;


    component rsaModExp_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        M_V : OUT STD_LOGIC_VECTOR (2047 downto 0);
        e_V : OUT STD_LOGIC_VECTOR (2047 downto 0);
        n_V : OUT STD_LOGIC_VECTOR (2047 downto 0);
        out_V : IN STD_LOGIC_VECTOR (2047 downto 0);
        out_V_ap_vld : IN STD_LOGIC );
    end component;



begin
    rsaModExp_AXILiteS_s_axi_U : component rsaModExp_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        M_V => M_V,
        e_V => e_V,
        n_V => n_V,
        out_V => grp_montMult_fu_118_ap_return,
        out_V_ap_vld => out_V_ap_vld);

    grp_interleaveModMult_fu_95 : component interleaveModMult
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_interleaveModMult_fu_95_ap_start,
        ap_done => grp_interleaveModMult_fu_95_ap_done,
        ap_idle => grp_interleaveModMult_fu_95_ap_idle,
        ap_ready => grp_interleaveModMult_fu_95_ap_ready,
        Y_V => grp_interleaveModMult_fu_95_Y_V,
        M_V => n_V_read_reg_200,
        ap_return => grp_interleaveModMult_fu_95_ap_return);

    grp_montMult_fu_118 : component montMult
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_montMult_fu_118_ap_start,
        ap_done => grp_montMult_fu_118_ap_done,
        ap_idle => grp_montMult_fu_118_ap_idle,
        ap_ready => grp_montMult_fu_118_ap_ready,
        X0_V => grp_montMult_fu_118_X0_V,
        Y0_V => grp_montMult_fu_118_Y0_V,
        M0_V => n_V_read_reg_200,
        ap_return => grp_montMult_fu_118_ap_return);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_grp_interleaveModMult_fu_95_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_interleaveModMult_fu_95_ap_start <= ap_const_logic_0;
            else
                if ((((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0))) or ((ap_const_lv1_1 = ap_CS_fsm_state2) and not((ap_const_logic_0 = grp_interleaveModMult_fu_95_ap_done))))) then 
                    ap_reg_grp_interleaveModMult_fu_95_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_interleaveModMult_fu_95_ap_ready)) then 
                    ap_reg_grp_interleaveModMult_fu_95_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_montMult_fu_118_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_montMult_fu_118_ap_start <= ap_const_logic_0;
            else
                if ((((ap_const_lv1_1 = ap_CS_fsm_state4) and (tmp_fu_172_p3 = ap_const_lv1_0)) or ((ap_const_lv1_1 = ap_CS_fsm_state4) and not((tmp_fu_172_p3 = ap_const_lv1_0))) or ((ap_const_lv1_1 = ap_CS_fsm_state5) and not((ap_const_logic_0 = grp_montMult_fu_118_ap_done)) and not((ap_const_lv1_0 = tmp_1_reg_224))))) then 
                    ap_reg_grp_montMult_fu_118_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_montMult_fu_118_ap_ready)) then 
                    ap_reg_grp_montMult_fu_118_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_assign_reg_83_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state6) and not(((ap_const_logic_0 = grp_montMult_fu_118_ap_done) and not((ap_const_lv1_0 = tmp_1_reg_224)))))) then 
                i_assign_reg_83 <= i_fu_187_p2;
            elsif ((not((ap_const_logic_0 = grp_interleaveModMult_fu_95_ap_done)) and (ap_const_lv1_1 = ap_CS_fsm_state3))) then 
                i_assign_reg_83 <= ap_const_lv12_7FF;
            end if; 
        end if;
    end process;

    xbar_V_1_fu_54_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_1 = ap_CS_fsm_state5) and not((ap_const_logic_0 = grp_montMult_fu_118_ap_done)) and (ap_const_lv1_0 = tmp_1_reg_224)) or ((ap_const_lv1_1 = ap_CS_fsm_state6) and not((ap_const_lv1_0 = tmp_1_reg_224)) and not(((ap_const_logic_0 = grp_montMult_fu_118_ap_done) and not((ap_const_lv1_0 = tmp_1_reg_224))))))) then 
                xbar_V_1_fu_54 <= grp_montMult_fu_118_ap_return;
            elsif ((not((ap_const_logic_0 = grp_interleaveModMult_fu_95_ap_done)) and (ap_const_lv1_1 = ap_CS_fsm_state3))) then 
                xbar_V_1_fu_54 <= grp_interleaveModMult_fu_95_ap_return;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then
                M_V_read_reg_211 <= M_V;
                e_V_read_reg_206 <= e_V;
                n_V_read_reg_200 <= n_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2) and not((ap_const_logic_0 = grp_interleaveModMult_fu_95_ap_done)))) then
                Mbar_V_reg_216 <= grp_interleaveModMult_fu_95_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_1 = ap_CS_fsm_state4) and (tmp_fu_172_p3 = ap_const_lv1_0)) or ((ap_const_lv1_1 = ap_CS_fsm_state4) and not((tmp_fu_172_p3 = ap_const_lv1_0))))) then
                reg_157 <= xbar_V_1_fu_54;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state4) and (tmp_fu_172_p3 = ap_const_lv1_0))) then
                tmp_1_reg_224 <= tmp_1_fu_180_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state5) and not((ap_const_logic_0 = grp_montMult_fu_118_ap_done)))) then
                xbar_V_2_reg_228 <= grp_montMult_fu_118_ap_return;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, tmp_fu_172_p3, grp_interleaveModMult_fu_95_ap_done, tmp_1_reg_224, grp_montMult_fu_118_ap_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (not((ap_const_logic_0 = grp_interleaveModMult_fu_95_ap_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (not((ap_const_logic_0 = grp_interleaveModMult_fu_95_ap_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (not((tmp_fu_172_p3 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (not((ap_const_logic_0 = grp_montMult_fu_118_ap_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (not(((ap_const_logic_0 = grp_montMult_fu_118_ap_done) and not((ap_const_lv1_0 = tmp_1_reg_224))))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (not((ap_const_logic_0 = grp_montMult_fu_118_ap_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2 downto 2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3 downto 3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4 downto 4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5 downto 5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6 downto 6);

    ap_done_assign_proc : process(grp_montMult_fu_118_ap_done, ap_CS_fsm_state7)
    begin
        if ((not((ap_const_logic_0 = grp_montMult_fu_118_ap_done)) and (ap_const_lv1_1 = ap_CS_fsm_state7))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_montMult_fu_118_ap_done, ap_CS_fsm_state7)
    begin
        if ((not((ap_const_logic_0 = grp_montMult_fu_118_ap_done)) and (ap_const_lv1_1 = ap_CS_fsm_state7))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    grp_interleaveModMult_fu_95_Y_V_assign_proc : process(M_V_read_reg_211, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state3))) then 
            grp_interleaveModMult_fu_95_Y_V <= ap_const_lv2048_lc_2;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state2))) then 
            grp_interleaveModMult_fu_95_Y_V <= M_V_read_reg_211;
        else 
            grp_interleaveModMult_fu
        end if; 
    end process;

    grp_interleaveModMult_fu_95_ap_start <= ap_reg_grp_interleaveModMult_fu_95_ap_start;

    grp_montMult_fu_118_X0_V_assign_proc : process(reg_157, Mbar_V_reg_216, tmp_1_reg_224, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state6) and not((ap_const_lv1_0 = tmp_1_reg_224)))) then 
            grp_montMult_fu_118_X0_V <= Mbar_V_reg_216;
        elsif ((((ap_const_lv1_1 = ap_CS_fsm_state5)) or ((ap_const_lv1_1 = ap_CS_fsm_state7)))) then 
            grp_montMult_fu_118_X0_V <= reg_157;
        else 
            grp_montMult_fu
        end if; 
    end process;


    grp_montMult_fu_118_Y0_V_assign_proc : process(reg_157, tmp_1_reg_224, xbar_V_2_reg_228, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state6) and not((ap_const_lv1_0 = tmp_1_reg_224)))) then 
            grp_montMult_fu_118_Y0_V <= xbar_V_2_reg_228;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state7))) then 
            grp_montMult_fu_118_Y0_V <= ap_const_lv2048_lc_2;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state5))) then 
            grp_montMult_fu_118_Y0_V <= reg_157;
        else 
            grp_montMult_fu
        end if; 
    end process;

    grp_montMult_fu_118_ap_start <= ap_reg_grp_montMult_fu_118_ap_start;
        i_assign_cast_fu_168_p1 <= std_logic_vector(resize(signed(i_assign_reg_83),32));

    i_fu_187_p2 <= std_logic_vector(unsigned(i_assign_reg_83) + unsigned(ap_const_lv12_FFF));

    out_V_ap_vld_assign_proc : process(grp_montMult_fu_118_ap_done, ap_CS_fsm_state7)
    begin
        if ((not((ap_const_logic_0 = grp_montMult_fu_118_ap_done)) and (ap_const_lv1_1 = ap_CS_fsm_state7))) then 
            out_V_ap_vld <= ap_const_logic_1;
        else 
            out_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_180_p3 <= e_V_read_reg_206(to_integer(unsigned(i_assign_cast_fu_168_p1)) downto to_integer(unsigned(i_assign_cast_fu_168_p1))) when (to_integer(unsigned(i_assign_cast_fu_168_p1))>= 0 and to_integer(unsigned(i_assign_cast_fu_168_p1))<=2047) else "-";
    tmp_fu_172_p3 <= i_assign_reg_83(11 downto 11);
end behav;
