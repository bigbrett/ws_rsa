-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity montMult is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    X0_V : IN STD_LOGIC_VECTOR (2047 downto 0);
    Y0_V : IN STD_LOGIC_VECTOR (2047 downto 0);
    M0_V : IN STD_LOGIC_VECTOR (2047 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (2047 downto 0) );
end;


architecture behav of montMult is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv2049_lc_1 : STD_LOGIC_VECTOR (2048 downto
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv12_800 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv32_801 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000100000000001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv2048_lc_1 : STD_LOGIC_VECTOR (2047 downto

    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal M0_V_read_reg_180 : STD_LOGIC_VECTOR (2047 downto 0);
    signal X_V_fu_68_p1 : STD_LOGIC_VECTOR (2049 downto 0);
    signal X_V_reg_185 : STD_LOGIC_VECTOR (2049 downto 0);
    signal Y_V_fu_72_p1 : STD_LOGIC_VECTOR (2049 downto 0);
    signal Y_V_reg_190 : STD_LOGIC_VECTOR (2049 downto 0);
    signal M_V_fu_76_p1 : STD_LOGIC_VECTOR (2049 downto 0);
    signal M_V_reg_195 : STD_LOGIC_VECTOR (2049 downto 0);
    signal M_V_cast_fu_80_p1 : STD_LOGIC_VECTOR (2048 downto 0);
    signal M_V_cast_reg_200 : STD_LOGIC_VECTOR (2048 downto 0);
    signal p_cast_fu_84_p1 : STD_LOGIC_VECTOR (2049 downto 0);
    signal p_cast_reg_205 : STD_LOGIC_VECTOR (2049 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_fu_98_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_reg_214 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_8_fu_104_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_reg_219 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_fu_92_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_116_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_224 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_125_p1 : STD_LOGIC_VECTOR (2047 downto 0);
    signal tmp_6_reg_234 : STD_LOGIC_VECTOR (2047 downto 0);
    signal p_Val2_1_fu_134_p3 : STD_LOGIC_VECTOR (2049 downto 0);
    signal p_Val2_1_reg_239 : STD_LOGIC_VECTOR (2049 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_9_fu_140_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_reg_244 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_reg_249 : STD_LOGIC_VECTOR (2048 downto 0);
    signal tmp_5_fu_168_p3 : STD_LOGIC_VECTOR (2048 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal p_s_reg_46 : STD_LOGIC_VECTOR (2048 downto 0);
    signal i_assign_reg_57 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_assign_cast1_fu_88_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_111_p1 : STD_LOGIC_VECTOR (2049 downto 0);
    signal grp_fu_129_p0 : STD_LOGIC_VECTOR (2047 downto 0);
    signal grp_fu_111_p2 : STD_LOGIC_VECTOR (2049 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_fu_154_p2 : STD_LOGIC_VECTOR (2049 downto 0);
    signal tmp_3_fu_158_p4 : STD_LOGIC_VECTOR (2048 downto 0);
    signal grp_fu_129_p2 : STD_LOGIC_VECTOR (2047 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ssdm_int_V_write_ass_fu_174_p3 : STD_LOGIC_VECTOR (2047 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (2047 downto
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);

    component rsaModExp_add_205dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (2049 downto 0);
        din1 : IN STD_LOGIC_VECTOR (2049 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (2049 downto 0) );
    end component;


    component rsaModExp_sub_204eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (2047 downto 0);
        din1 : IN STD_LOGIC_VECTOR (2047 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (2047 downto 0) );
    end component;



begin
    rsaModExp_add_205dEe_U6 : component rsaModExp_add_205dEe
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 2050,
        din1_WIDTH => 2050,
        dout_WIDTH => 2050)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => Y_V_reg_190,
        din1 => grp_fu_111_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_111_p2);

    rsaModExp_sub_204eOg_U7 : component rsaModExp_sub_204eOg
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 2048,
        din1_WIDTH => 2048,
        dout_WIDTH => 2048)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_129_p0,
        din1 => M0_V_read_reg_180,
        ce => ap_const_logic_1,
        dout => grp_fu_129_p2);

    rsaModExp_add_205dEe_U8 : component rsaModExp_add_205dEe
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 2050,
        din1_WIDTH => 2050,
        dout_WIDTH => 2050)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => M_V_reg_195,
        din1 => p_Val2_1_reg_239,
        ce => ap_const_logic_1,
        dout => grp_fu_154_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv2048_lc_1;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_state12))) then 
                    ap_return_preg <= ssdm_int_V_write_ass_fu_174_p3;
                end if; 
            end if;
        end if;
    end process;


    i_assign_reg_57_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state9))) then 
                i_assign_reg_57 <= i_reg_214;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                i_assign_reg_57 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    p_s_reg_46_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state9))) then 
                p_s_reg_46 <= tmp_5_fu_168_p3;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                p_s_reg_46 <= ap_const_lv2049_lc_1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then
                M0_V_read_reg_180 <= M0_V;
                    M_V_cast_reg_200(2047 downto 0) <= M_V_cast_fu_80_p1(2047 downto 0);
                    M_V_reg_195(2047 downto 0) <= M_V_fu_76_p1(2047 downto 0);
                    X_V_reg_185(2047 downto 0) <= X_V_fu_68_p1(2047 downto 0);
                    Y_V_reg_190(2047 downto 0) <= Y_V_fu_72_p1(2047 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state12))) then
                ap_return <= ssdm_int_V_write_ass_fu_174_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2))) then
                i_reg_214 <= i_fu_98_p2;
                    p_cast_reg_205(2048 downto 0) <= p_cast_fu_84_p1(2048 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state5))) then
                p_Val2_1_reg_239 <= p_Val2_1_fu_134_p3;
                tmp_4_reg_249 <= p_Val2_1_fu_134_p3(2049 downto 1);
                tmp_9_reg_244 <= tmp_9_fu_140_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2) and not((exitcond_fu_92_p2 = ap_const_lv1_0)))) then
                tmp_6_reg_234 <= tmp_6_fu_125_p1;
                tmp_reg_224 <= tmp_fu_116_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2) and (exitcond_fu_92_p2 = ap_const_lv1_0))) then
                tmp_8_reg_219 <= tmp_8_fu_104_p3;
            end if;
        end if;
    end process;
    X_V_reg_185(2049 downto 2048) <= "00";
    Y_V_reg_190(2049 downto 2048) <= "00";
    M_V_reg_195(2049 downto 2048) <= "00";
    M_V_cast_reg_200(2048) <= '0';
    p_cast_reg_205(2049) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond_fu_92_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (not((exitcond_fu_92_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;
    M_V_cast_fu_80_p1 <= std_logic_vector(resize(unsigned(M0_V),2049));
    M_V_fu_76_p1 <= std_logic_vector(resize(unsigned(M0_V),2050));
    X_V_fu_68_p1 <= std_logic_vector(resize(unsigned(X0_V),2050));
    Y_V_fu_72_p1 <= std_logic_vector(resize(unsigned(Y0_V),2050));
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state12 <= ap_CS_fsm(11 downto 11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_state5 <= ap_CS_fsm(4 downto 4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5 downto 5);
    ap_CS_fsm_state9 <= ap_CS_fsm(8 downto 8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state12)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state12))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_fu_92_p2 <= "1" when (i_assign_reg_57 = ap_const_lv12_800) else "0";
    grp_fu_111_p1 <= std_logic_vector(resize(unsigned(p_s_reg_46),2050));
    grp_fu_129_p0 <= p_s_reg_46(2048 - 1 downto 0);
    i_assign_cast1_fu_88_p1 <= std_logic_vector(resize(unsigned(i_assign_reg_57),32));
    i_fu_98_p2 <= std_logic_vector(unsigned(i_assign_reg_57) + unsigned(ap_const_lv12_1));
    p_Val2_1_fu_134_p3 <= 
        grp_fu_111_p2 when (tmp_8_reg_219(0) = '1') else 
        p_cast_reg_205;
    p_cast_fu_84_p1 <= std_logic_vector(resize(unsigned(p_s_reg_46),2050));
    ssdm_int_V_write_ass_fu_174_p3 <= 
        tmp_6_reg_234 when (tmp_reg_224(0) = '1') else 
        grp_fu_129_p2;
    tmp_3_fu_158_p4 <= grp_fu_154_p2(2049 downto 1);
    tmp_5_fu_168_p3 <= 
        tmp_3_fu_158_p4 when (tmp_9_reg_244(0) = '1') else 
        tmp_4_reg_249;
    tmp_6_fu_125_p1 <= p_s_reg_46(2048 - 1 downto 0);
    tmp_8_fu_104_p3 <= X_V_reg_185(to_integer(unsigned(i_assign_cast1_fu_88_p1)) downto to_integer(unsigned(i_assign_cast1_fu_88_p1))) when (to_integer(unsigned(i_assign_cast1_fu_88_p1))>= 0 and to_integer(unsigned(i_assign_cast1_fu_88_p1))<=2049) else "-";
    tmp_9_fu_140_p1 <= p_Val2_1_fu_134_p3(1 - 1 downto 0);
    tmp_fu_116_p2 <= "1" when (unsigned(p_s_reg_46) < unsigned(M_V_cast_reg_200)) else "0";
end behav;
