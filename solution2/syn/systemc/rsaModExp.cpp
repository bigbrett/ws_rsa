// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "rsaModExp.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic rsaModExp::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic rsaModExp::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<7> rsaModExp::ap_ST_fsm_state1 = "1";
const sc_lv<7> rsaModExp::ap_ST_fsm_state2 = "10";
const sc_lv<7> rsaModExp::ap_ST_fsm_state3 = "100";
const sc_lv<7> rsaModExp::ap_ST_fsm_state4 = "1000";
const sc_lv<7> rsaModExp::ap_ST_fsm_state5 = "10000";
const sc_lv<7> rsaModExp::ap_ST_fsm_state6 = "100000";
const sc_lv<7> rsaModExp::ap_ST_fsm_state7 = "1000000";
const sc_lv<32> rsaModExp::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> rsaModExp::ap_const_lv1_1 = "1";
const int rsaModExp::C_S_AXI_DATA_WIDTH = "100000";
const sc_lv<32> rsaModExp::ap_const_lv32_3 = "11";
const sc_lv<1> rsaModExp::ap_const_lv1_0 = "0";
const sc_lv<32> rsaModExp::ap_const_lv32_1 = "1";
const sc_lv<32> rsaModExp::ap_const_lv32_4 = "100";
const sc_lv<32> rsaModExp::ap_const_lv32_5 = "101";
const sc_lv<12> rsaModExp::ap_const_lv12_7FF = "11111111111";
const sc_lv<32> rsaModExp::ap_const_lv32_2 = "10";
const sc_lv<2048> rsaModExp::ap_const_lv2048_lc_2 = "1";
const sc_lv<32> rsaModExp::ap_const_lv32_6 = "110";
const sc_lv<32> rsaModExp::ap_const_lv32_B = "1011";
const sc_lv<12> rsaModExp::ap_const_lv12_FFF = "111111111111";

rsaModExp::rsaModExp(sc_module_name name) : sc_module(name), mVcdFile(0) {
    rsaModExp_AXILiteS_s_axi_U = new rsaModExp_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>("rsaModExp_AXILiteS_s_axi_U");
    rsaModExp_AXILiteS_s_axi_U->AWVALID(s_axi_AXILiteS_AWVALID);
    rsaModExp_AXILiteS_s_axi_U->AWREADY(s_axi_AXILiteS_AWREADY);
    rsaModExp_AXILiteS_s_axi_U->AWADDR(s_axi_AXILiteS_AWADDR);
    rsaModExp_AXILiteS_s_axi_U->WVALID(s_axi_AXILiteS_WVALID);
    rsaModExp_AXILiteS_s_axi_U->WREADY(s_axi_AXILiteS_WREADY);
    rsaModExp_AXILiteS_s_axi_U->WDATA(s_axi_AXILiteS_WDATA);
    rsaModExp_AXILiteS_s_axi_U->WSTRB(s_axi_AXILiteS_WSTRB);
    rsaModExp_AXILiteS_s_axi_U->ARVALID(s_axi_AXILiteS_ARVALID);
    rsaModExp_AXILiteS_s_axi_U->ARREADY(s_axi_AXILiteS_ARREADY);
    rsaModExp_AXILiteS_s_axi_U->ARADDR(s_axi_AXILiteS_ARADDR);
    rsaModExp_AXILiteS_s_axi_U->RVALID(s_axi_AXILiteS_RVALID);
    rsaModExp_AXILiteS_s_axi_U->RREADY(s_axi_AXILiteS_RREADY);
    rsaModExp_AXILiteS_s_axi_U->RDATA(s_axi_AXILiteS_RDATA);
    rsaModExp_AXILiteS_s_axi_U->RRESP(s_axi_AXILiteS_RRESP);
    rsaModExp_AXILiteS_s_axi_U->BVALID(s_axi_AXILiteS_BVALID);
    rsaModExp_AXILiteS_s_axi_U->BREADY(s_axi_AXILiteS_BREADY);
    rsaModExp_AXILiteS_s_axi_U->BRESP(s_axi_AXILiteS_BRESP);
    rsaModExp_AXILiteS_s_axi_U->ACLK(ap_clk);
    rsaModExp_AXILiteS_s_axi_U->ARESET(ap_rst_n_inv);
    rsaModExp_AXILiteS_s_axi_U->ACLK_EN(ap_var_for_const0);
    rsaModExp_AXILiteS_s_axi_U->ap_start(ap_start);
    rsaModExp_AXILiteS_s_axi_U->interrupt(interrupt);
    rsaModExp_AXILiteS_s_axi_U->ap_ready(ap_ready);
    rsaModExp_AXILiteS_s_axi_U->ap_done(ap_done);
    rsaModExp_AXILiteS_s_axi_U->ap_idle(ap_idle);
    rsaModExp_AXILiteS_s_axi_U->M_V(M_V);
    rsaModExp_AXILiteS_s_axi_U->e_V(e_V);
    rsaModExp_AXILiteS_s_axi_U->n_V(n_V);
    rsaModExp_AXILiteS_s_axi_U->out_V(grp_montMult_fu_118_ap_return);
    rsaModExp_AXILiteS_s_axi_U->out_V_ap_vld(out_V_ap_vld);
    grp_interleaveModMult_fu_95 = new interleaveModMult("grp_interleaveModMult_fu_95");
    grp_interleaveModMult_fu_95->ap_clk(ap_clk);
    grp_interleaveModMult_fu_95->ap_rst(ap_rst_n_inv);
    grp_interleaveModMult_fu_95->ap_start(grp_interleaveModMult_fu_95_ap_start);
    grp_interleaveModMult_fu_95->ap_done(grp_interleaveModMult_fu_95_ap_done);
    grp_interleaveModMult_fu_95->ap_idle(grp_interleaveModMult_fu_95_ap_idle);
    grp_interleaveModMult_fu_95->ap_ready(grp_interleaveModMult_fu_95_ap_ready);
    grp_interleaveModMult_fu_95->Y_V(grp_interleaveModMult_fu_95_Y_V);
    grp_interleaveModMult_fu_95->M_V(n_V_read_reg_200);
    grp_interleaveModMult_fu_95->ap_return(grp_interleaveModMult_fu_95_ap_return);
    grp_montMult_fu_118 = new montMult("grp_montMult_fu_118");
    grp_montMult_fu_118->ap_clk(ap_clk);
    grp_montMult_fu_118->ap_rst(ap_rst_n_inv);
    grp_montMult_fu_118->ap_start(grp_montMult_fu_118_ap_start);
    grp_montMult_fu_118->ap_done(grp_montMult_fu_118_ap_done);
    grp_montMult_fu_118->ap_idle(grp_montMult_fu_118_ap_idle);
    grp_montMult_fu_118->ap_ready(grp_montMult_fu_118_ap_ready);
    grp_montMult_fu_118->X0_V(grp_montMult_fu_118_X0_V);
    grp_montMult_fu_118->Y0_V(grp_montMult_fu_118_Y0_V);
    grp_montMult_fu_118->M0_V(n_V_read_reg_200);
    grp_montMult_fu_118->ap_return(grp_montMult_fu_118_ap_return);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( grp_montMult_fu_118_ap_done );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( grp_montMult_fu_118_ap_done );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_grp_interleaveModMult_fu_95_Y_V);
    sensitive << ( M_V_read_reg_211 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_grp_interleaveModMult_fu_95_ap_start);
    sensitive << ( ap_reg_grp_interleaveModMult_fu_95_ap_start );

    SC_METHOD(thread_grp_montMult_fu_118_X0_V);
    sensitive << ( reg_157 );
    sensitive << ( Mbar_V_reg_216 );
    sensitive << ( tmp_1_reg_224 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_grp_montMult_fu_118_Y0_V);
    sensitive << ( reg_157 );
    sensitive << ( tmp_1_reg_224 );
    sensitive << ( xbar_V_2_reg_228 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_grp_montMult_fu_118_ap_start);
    sensitive << ( ap_reg_grp_montMult_fu_118_ap_start );

    SC_METHOD(thread_i_assign_cast_fu_168_p1);
    sensitive << ( i_assign_reg_83 );

    SC_METHOD(thread_i_fu_187_p2);
    sensitive << ( i_assign_reg_83 );

    SC_METHOD(thread_out_V_ap_vld);
    sensitive << ( grp_montMult_fu_118_ap_done );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_tmp_1_fu_180_p3);
    sensitive << ( e_V_read_reg_206 );
    sensitive << ( i_assign_cast_fu_168_p1 );

    SC_METHOD(thread_tmp_fu_172_p3);
    sensitive << ( i_assign_reg_83 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( tmp_fu_172_p3 );
    sensitive << ( grp_interleaveModMult_fu_95_ap_done );
    sensitive << ( tmp_1_reg_224 );
    sensitive << ( grp_montMult_fu_118_ap_done );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "0000001";
    ap_reg_grp_interleaveModMult_fu_95_ap_start = SC_LOGIC_0;
    ap_reg_grp_montMult_fu_118_ap_start = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "rsaModExp_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWVALID, "(port)s_axi_AXILiteS_AWVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWREADY, "(port)s_axi_AXILiteS_AWREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWADDR, "(port)s_axi_AXILiteS_AWADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_WVALID, "(port)s_axi_AXILiteS_WVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_WREADY, "(port)s_axi_AXILiteS_WREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_WDATA, "(port)s_axi_AXILiteS_WDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_WSTRB, "(port)s_axi_AXILiteS_WSTRB");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARVALID, "(port)s_axi_AXILiteS_ARVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARREADY, "(port)s_axi_AXILiteS_ARREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARADDR, "(port)s_axi_AXILiteS_ARADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_RVALID, "(port)s_axi_AXILiteS_RVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_RREADY, "(port)s_axi_AXILiteS_RREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_RDATA, "(port)s_axi_AXILiteS_RDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_RRESP, "(port)s_axi_AXILiteS_RRESP");
    sc_trace(mVcdFile, s_axi_AXILiteS_BVALID, "(port)s_axi_AXILiteS_BVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_BREADY, "(port)s_axi_AXILiteS_BREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_BRESP, "(port)s_axi_AXILiteS_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, M_V, "M_V");
    sc_trace(mVcdFile, e_V, "e_V");
    sc_trace(mVcdFile, n_V, "n_V");
    sc_trace(mVcdFile, out_V_ap_vld, "out_V_ap_vld");
    sc_trace(mVcdFile, reg_157, "reg_157");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, tmp_fu_172_p3, "tmp_fu_172_p3");
    sc_trace(mVcdFile, n_V_read_reg_200, "n_V_read_reg_200");
    sc_trace(mVcdFile, e_V_read_reg_206, "e_V_read_reg_206");
    sc_trace(mVcdFile, M_V_read_reg_211, "M_V_read_reg_211");
    sc_trace(mVcdFile, grp_interleaveModMult_fu_95_ap_return, "grp_interleaveModMult_fu_95_ap_return");
    sc_trace(mVcdFile, Mbar_V_reg_216, "Mbar_V_reg_216");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, grp_interleaveModMult_fu_95_ap_done, "grp_interleaveModMult_fu_95_ap_done");
    sc_trace(mVcdFile, tmp_1_fu_180_p3, "tmp_1_fu_180_p3");
    sc_trace(mVcdFile, tmp_1_reg_224, "tmp_1_reg_224");
    sc_trace(mVcdFile, grp_montMult_fu_118_ap_return, "grp_montMult_fu_118_ap_return");
    sc_trace(mVcdFile, xbar_V_2_reg_228, "xbar_V_2_reg_228");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, grp_montMult_fu_118_ap_done, "grp_montMult_fu_118_ap_done");
    sc_trace(mVcdFile, i_fu_187_p2, "i_fu_187_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, grp_interleaveModMult_fu_95_ap_start, "grp_interleaveModMult_fu_95_ap_start");
    sc_trace(mVcdFile, grp_interleaveModMult_fu_95_ap_idle, "grp_interleaveModMult_fu_95_ap_idle");
    sc_trace(mVcdFile, grp_interleaveModMult_fu_95_ap_ready, "grp_interleaveModMult_fu_95_ap_ready");
    sc_trace(mVcdFile, grp_interleaveModMult_fu_95_Y_V, "grp_interleaveModMult_fu_95_Y_V");
    sc_trace(mVcdFile, grp_montMult_fu_118_ap_start, "grp_montMult_fu_118_ap_start");
    sc_trace(mVcdFile, grp_montMult_fu_118_ap_idle, "grp_montMult_fu_118_ap_idle");
    sc_trace(mVcdFile, grp_montMult_fu_118_ap_ready, "grp_montMult_fu_118_ap_ready");
    sc_trace(mVcdFile, grp_montMult_fu_118_X0_V, "grp_montMult_fu_118_X0_V");
    sc_trace(mVcdFile, grp_montMult_fu_118_Y0_V, "grp_montMult_fu_118_Y0_V");
    sc_trace(mVcdFile, i_assign_reg_83, "i_assign_reg_83");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_reg_grp_interleaveModMult_fu_95_ap_start, "ap_reg_grp_interleaveModMult_fu_95_ap_start");
    sc_trace(mVcdFile, ap_reg_grp_montMult_fu_118_ap_start, "ap_reg_grp_montMult_fu_118_ap_start");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, xbar_V_1_fu_54, "xbar_V_1_fu_54");
    sc_trace(mVcdFile, i_assign_cast_fu_168_p1, "i_assign_cast_fu_168_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("rsaModExp.hdltvin.dat");
    mHdltvoutHandle.open("rsaModExp.hdltvout.dat");
}

rsaModExp::~rsaModExp() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete rsaModExp_AXILiteS_s_axi_U;
    delete grp_interleaveModMult_fu_95;
    delete grp_montMult_fu_118;
}

void rsaModExp::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void rsaModExp::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_grp_interleaveModMult_fu_95_ap_start = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
              !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) || 
             (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()) && 
              !esl_seteq<1,1,1>(ap_const_logic_0, grp_interleaveModMult_fu_95_ap_done.read())))) {
            ap_reg_grp_interleaveModMult_fu_95_ap_start = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_interleaveModMult_fu_95_ap_ready.read())) {
            ap_reg_grp_interleaveModMult_fu_95_ap_start = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_grp_montMult_fu_118_ap_start = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state4.read()) && 
              esl_seteq<1,1,1>(tmp_fu_172_p3.read(), ap_const_lv1_0)) || 
             (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state4.read()) && 
              !esl_seteq<1,1,1>(tmp_fu_172_p3.read(), ap_const_lv1_0)) || 
             (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state5.read()) && 
              !esl_seteq<1,1,1>(ap_const_logic_0, grp_montMult_fu_118_ap_done.read()) && 
              !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_reg_224.read())))) {
            ap_reg_grp_montMult_fu_118_ap_start = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_montMult_fu_118_ap_ready.read())) {
            ap_reg_grp_montMult_fu_118_ap_start = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state6.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, grp_montMult_fu_118_ap_done.read()) && !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_reg_224.read())))) {
        i_assign_reg_83 = i_fu_187_p2.read();
    } else if ((!esl_seteq<1,1,1>(ap_const_logic_0, grp_interleaveModMult_fu_95_ap_done.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()))) {
        i_assign_reg_83 = ap_const_lv12_7FF;
    }
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state5.read()) && 
          !esl_seteq<1,1,1>(ap_const_logic_0, grp_montMult_fu_118_ap_done.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_reg_224.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state6.read()) && 
          !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_reg_224.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, grp_montMult_fu_118_ap_done.read()) && !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_reg_224.read()))))) {
        xbar_V_1_fu_54 = grp_montMult_fu_118_ap_return.read();
    } else if ((!esl_seteq<1,1,1>(ap_const_logic_0, grp_interleaveModMult_fu_95_ap_done.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()))) {
        xbar_V_1_fu_54 = grp_interleaveModMult_fu_95_ap_return.read();
    }
    if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        M_V_read_reg_211 = M_V.read();
        e_V_read_reg_206 = e_V.read();
        n_V_read_reg_200 = n_V.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()) && !esl_seteq<1,1,1>(ap_const_logic_0, grp_interleaveModMult_fu_95_ap_done.read()))) {
        Mbar_V_reg_216 = grp_interleaveModMult_fu_95_ap_return.read();
    }
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state4.read()) && 
  esl_seteq<1,1,1>(tmp_fu_172_p3.read(), ap_const_lv1_0)) || (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state4.read()) && 
  !esl_seteq<1,1,1>(tmp_fu_172_p3.read(), ap_const_lv1_0)))) {
        reg_157 = xbar_V_1_fu_54.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(tmp_fu_172_p3.read(), ap_const_lv1_0))) {
        tmp_1_reg_224 = tmp_1_fu_180_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state5.read()) && !esl_seteq<1,1,1>(ap_const_logic_0, grp_montMult_fu_118_ap_done.read()))) {
        xbar_V_2_reg_228 = grp_montMult_fu_118_ap_return.read();
    }
}

void rsaModExp::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read().range(0, 0);
}

void rsaModExp::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read().range(1, 1);
}

void rsaModExp::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read().range(2, 2);
}

void rsaModExp::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read().range(3, 3);
}

void rsaModExp::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read().range(4, 4);
}

void rsaModExp::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read().range(5, 5);
}

void rsaModExp::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read().range(6, 6);
}

void rsaModExp::thread_ap_done() {
    if ((!esl_seteq<1,1,1>(ap_const_logic_0, grp_montMult_fu_118_ap_done.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state7.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void rsaModExp::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void rsaModExp::thread_ap_ready() {
    if ((!esl_seteq<1,1,1>(ap_const_logic_0, grp_montMult_fu_118_ap_done.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state7.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void rsaModExp::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void rsaModExp::thread_grp_interleaveModMult_fu_95_Y_V() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()))) {
        grp_interleaveModMult_fu_95_Y_V = ap_const_lv2048_lc_2;
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()))) {
        grp_interleaveModMult_fu_95_Y_V = M_V_read_reg_211.read();
    } else {
        grp_interleaveModMult_fu
    }
}

void rsaModExp::thread_grp_interleaveModMult_fu_95_ap_start() {
    grp_interleaveModMult_fu_95_ap_start = ap_reg_grp_interleaveModMult_fu_95_ap_start.read();
}

void rsaModExp::thread_grp_montMult_fu_118_X0_V() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state6.read()) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_reg_224.read()))) {
        grp_montMult_fu_118_X0_V = Mbar_V_reg_216.read();
    } else if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state5.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state7.read())))) {
        grp_montMult_fu_118_X0_V = reg_157.read();
    } else {
        grp_montMult_fu_118_X0_V = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void rsaModExp::thread_grp_montMult_fu_118_Y0_V() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state6.read()) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_reg_224.read()))) {
        grp_montMult_fu_118_Y0_V = xbar_V_2_reg_228.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state7.read()))) {
        grp_montMult_fu_118_Y0_V = ap_const_lv2048_lc_2;
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state5.read()))) {
        grp_montMult_fu_118_Y0_V = reg_157.read();
    } else {
        grp_montMult_fu_118_Y0_V = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void rsaModExp::thread_grp_montMult_fu_118_ap_start() {
    grp_montMult_fu_118_ap_start = ap_reg_grp_montMult_fu_118_ap_start.read();
}

void rsaModExp::thread_i_assign_cast_fu_168_p1() {
    i_assign_cast_fu_168_p1 = esl_sext<32,12>(i_assign_reg_83.read());
}

void rsaModExp::thread_i_fu_187_p2() {
    i_fu_187_p2 = (!i_assign_reg_83.read().is_01() || !ap_const_lv12_FFF.is_01())? sc_lv<12>(): (sc_biguint<12>(i_assign_reg_83.read()) + sc_bigint<12>(ap_const_lv12_FFF));
}

void rsaModExp::thread_out_V_ap_vld() {
    if ((!esl_seteq<1,1,1>(ap_const_logic_0, grp_montMult_fu_118_ap_done.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state7.read()))) {
        out_V_ap_vld = ap_const_logic_1;
    } else {
        out_V_ap_vld = ap_const_logic_0;
    }
}

void rsaModExp::thread_tmp_1_fu_180_p3() {
    tmp_1_fu_180_p3 = (!i_assign_cast_fu_168_p1.read().is_01() || sc_biguint<32>(i_assign_cast_fu_168_p1.read()).to_uint() >= 2048)? sc_lv<1>(): e_V_read_reg_206.read().range(sc_biguint<32>(i_assign_cast_fu_168_p1.read()).to_uint(), sc_biguint<32>(i_assign_cast_fu_168_p1.read()).to_uint());
}

void rsaModExp::thread_tmp_fu_172_p3() {
    tmp_fu_172_p3 = i_assign_reg_83.read().range(11, 11);
}

void rsaModExp::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if (!esl_seteq<1,1,1>(ap_const_logic_0, grp_interleaveModMult_fu_95_ap_done.read())) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if (!esl_seteq<1,1,1>(ap_const_logic_0, grp_interleaveModMult_fu_95_ap_done.read())) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            if (!esl_seteq<1,1,1>(tmp_fu_172_p3.read(), ap_const_lv1_0)) {
                ap_NS_fsm = ap_ST_fsm_state7;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 16 : 
            if (!esl_seteq<1,1,1>(ap_const_logic_0, grp_montMult_fu_118_ap_done.read())) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 32 : 
            if (!(esl_seteq<1,1,1>(ap_const_logic_0, grp_montMult_fu_118_ap_done.read()) && !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_reg_224.read()))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 64 : 
            if (!esl_seteq<1,1,1>(ap_const_logic_0, grp_montMult_fu_118_ap_done.read())) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state7;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<7>) ("XXXXXXX");
            break;
    }
}

void rsaModExp::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWVALID\" :  \"" << s_axi_AXILiteS_AWVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"s_axi_AXILiteS_AWREADY\" :  \"" << s_axi_AXILiteS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWADDR\" :  \"" << s_axi_AXILiteS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WVALID\" :  \"" << s_axi_AXILiteS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_WREADY\" :  \"" << s_axi_AXILiteS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WDATA\" :  \"" << s_axi_AXILiteS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WSTRB\" :  \"" << s_axi_AXILiteS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARVALID\" :  \"" << s_axi_AXILiteS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_ARREADY\" :  \"" << s_axi_AXILiteS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARADDR\" :  \"" << s_axi_AXILiteS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RVALID\" :  \"" << s_axi_AXILiteS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_RREADY\" :  \"" << s_axi_AXILiteS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RDATA\" :  \"" << s_axi_AXILiteS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RRESP\" :  \"" << s_axi_AXILiteS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BVALID\" :  \"" << s_axi_AXILiteS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_BREADY\" :  \"" << s_axi_AXILiteS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BRESP\" :  \"" << s_axi_AXILiteS_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

