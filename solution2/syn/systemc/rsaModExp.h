// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _rsaModExp_HH_
#define _rsaModExp_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "interleaveModMult.h"
#include "montMult.h"
#include "rsaModExp_AXILiteS_s_axi.h"

namespace ap_rtl {

template<unsigned int C_S_AXI_AXILITES_ADDR_WIDTH = 11,
         unsigned int C_S_AXI_AXILITES_DATA_WIDTH = 32>
struct rsaModExp : public sc_module {
    // Port declarations 20
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_in< sc_logic > s_axi_AXILiteS_AWVALID;
    sc_out< sc_logic > s_axi_AXILiteS_AWREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_ADDR_WIDTH> > s_axi_AXILiteS_AWADDR;
    sc_in< sc_logic > s_axi_AXILiteS_WVALID;
    sc_out< sc_logic > s_axi_AXILiteS_WREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH> > s_axi_AXILiteS_WDATA;
    sc_in< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH/8> > s_axi_AXILiteS_WSTRB;
    sc_in< sc_logic > s_axi_AXILiteS_ARVALID;
    sc_out< sc_logic > s_axi_AXILiteS_ARREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_ADDR_WIDTH> > s_axi_AXILiteS_ARADDR;
    sc_out< sc_logic > s_axi_AXILiteS_RVALID;
    sc_in< sc_logic > s_axi_AXILiteS_RREADY;
    sc_out< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH> > s_axi_AXILiteS_RDATA;
    sc_out< sc_lv<2> > s_axi_AXILiteS_RRESP;
    sc_out< sc_logic > s_axi_AXILiteS_BVALID;
    sc_in< sc_logic > s_axi_AXILiteS_BREADY;
    sc_out< sc_lv<2> > s_axi_AXILiteS_BRESP;
    sc_out< sc_logic > interrupt;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    rsaModExp(sc_module_name name);
    SC_HAS_PROCESS(rsaModExp);

    ~rsaModExp();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    rsaModExp_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>* rsaModExp_AXILiteS_s_axi_U;
    interleaveModMult* grp_interleaveModMult_fu_95;
    montMult* grp_montMult_fu_118;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > ap_start;
    sc_signal< sc_logic > ap_done;
    sc_signal< sc_logic > ap_idle;
    sc_signal< sc_lv<7> > ap_CS_fsm;
    sc_signal< sc_lv<1> > ap_CS_fsm_state1;
    sc_signal< sc_logic > ap_ready;
    sc_signal< sc_lv<2048> > M_V;
    sc_signal< sc_lv<2048> > e_V;
    sc_signal< sc_lv<2048> > n_V;
    sc_signal< sc_logic > out_V_ap_vld;
    sc_signal< sc_lv<2048> > reg_157;
    sc_signal< sc_lv<1> > ap_CS_fsm_state4;
    sc_signal< sc_lv<1> > tmp_fu_172_p3;
    sc_signal< sc_lv<2048> > n_V_read_reg_200;
    sc_signal< sc_lv<2048> > e_V_read_reg_206;
    sc_signal< sc_lv<2048> > M_V_read_reg_211;
    sc_signal< sc_lv<2048> > grp_interleaveModMult_fu_95_ap_return;
    sc_signal< sc_lv<2048> > Mbar_V_reg_216;
    sc_signal< sc_lv<1> > ap_CS_fsm_state2;
    sc_signal< sc_logic > grp_interleaveModMult_fu_95_ap_done;
    sc_signal< sc_lv<1> > tmp_1_fu_180_p3;
    sc_signal< sc_lv<1> > tmp_1_reg_224;
    sc_signal< sc_lv<2048> > grp_montMult_fu_118_ap_return;
    sc_signal< sc_lv<2048> > xbar_V_2_reg_228;
    sc_signal< sc_lv<1> > ap_CS_fsm_state5;
    sc_signal< sc_logic > grp_montMult_fu_118_ap_done;
    sc_signal< sc_lv<12> > i_fu_187_p2;
    sc_signal< sc_lv<1> > ap_CS_fsm_state6;
    sc_signal< sc_logic > grp_interleaveModMult_fu_95_ap_start;
    sc_signal< sc_logic > grp_interleaveModMult_fu_95_ap_idle;
    sc_signal< sc_logic > grp_interleaveModMult_fu_95_ap_ready;
    sc_signal< sc_lv<2048> > grp_interleaveModMult_fu_95_Y_V;
    sc_signal< sc_logic > grp_montMult_fu_118_ap_start;
    sc_signal< sc_logic > grp_montMult_fu_118_ap_idle;
    sc_signal< sc_logic > grp_montMult_fu_118_ap_ready;
    sc_signal< sc_lv<2048> > grp_montMult_fu_118_X0_V;
    sc_signal< sc_lv<2048> > grp_montMult_fu_118_Y0_V;
    sc_signal< sc_lv<12> > i_assign_reg_83;
    sc_signal< sc_lv<1> > ap_CS_fsm_state3;
    sc_signal< sc_logic > ap_reg_grp_interleaveModMult_fu_95_ap_start;
    sc_signal< sc_logic > ap_reg_grp_montMult_fu_118_ap_start;
    sc_signal< sc_lv<1> > ap_CS_fsm_state7;
    sc_signal< sc_lv<2048> > xbar_V_1_fu_54;
    sc_signal< sc_lv<32> > i_assign_cast_fu_168_p1;
    sc_signal< sc_lv<7> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<7> ap_ST_fsm_state1;
    static const sc_lv<7> ap_ST_fsm_state2;
    static const sc_lv<7> ap_ST_fsm_state3;
    static const sc_lv<7> ap_ST_fsm_state4;
    static const sc_lv<7> ap_ST_fsm_state5;
    static const sc_lv<7> ap_ST_fsm_state6;
    static const sc_lv<7> ap_ST_fsm_state7;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const int C_S_AXI_DATA_WIDTH;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<12> ap_const_lv12_7FF;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<2048> ap_const_lv2048_lc_2;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_B;
    static const sc_lv<12> ap_const_lv12_FFF;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state7();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_grp_interleaveModMult_fu_95_Y_V();
    void thread_grp_interleaveModMult_fu_95_ap_start();
    void thread_grp_montMult_fu_118_X0_V();
    void thread_grp_montMult_fu_118_Y0_V();
    void thread_grp_montMult_fu_118_ap_start();
    void thread_i_assign_cast_fu_168_p1();
    void thread_i_fu_187_p2();
    void thread_out_V_ap_vld();
    void thread_tmp_1_fu_180_p3();
    void thread_tmp_fu_172_p3();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
