// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module montMult (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        X0_V,
        Y0_V,
        M0_V,
        ap_return
);

parameter    ap_ST_fsm_state1 = 12'b1;
parameter    ap_ST_fsm_state2 = 12'b10;
parameter    ap_ST_fsm_state3 = 12'b100;
parameter    ap_ST_fsm_state4 = 12'b1000;
parameter    ap_ST_fsm_state5 = 12'b10000;
parameter    ap_ST_fsm_state6 = 12'b100000;
parameter    ap_ST_fsm_state7 = 12'b1000000;
parameter    ap_ST_fsm_state8 = 12'b10000000;
parameter    ap_ST_fsm_state9 = 12'b100000000;
parameter    ap_ST_fsm_state10 = 12'b1000000000;
parameter    ap_ST_fsm_state11 = 12'b10000000000;
parameter    ap_ST_fsm_state12 = 12'b100000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv2049_lc_1 = 2049'b
parameter    ap_const_lv12_0 = 12'b000000000000;
parameter    ap_const_lv12_800 = 12'b100000000000;
parameter    ap_const_lv12_1 = 12'b1;
parameter    ap_const_lv32_801 = 32'b100000000001;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_B = 32'b1011;
parameter    ap_const_lv2048_lc_1 = 2048'b

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [2047:0] X0_V;
input  [2047:0] Y0_V;
input  [2047:0] M0_V;
output  [2047:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[2047:0] ap_return;

(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
reg   [2047:0] M0_V_read_reg_180;
wire   [2049:0] X_V_fu_68_p1;
reg   [2049:0] X_V_reg_185;
wire   [2049:0] Y_V_fu_72_p1;
reg   [2049:0] Y_V_reg_190;
wire   [2049:0] M_V_fu_76_p1;
reg   [2049:0] M_V_reg_195;
wire   [2048:0] M_V_cast_fu_80_p1;
reg   [2048:0] M_V_cast_reg_200;
wire   [2049:0] p_cast_fu_84_p1;
reg   [2049:0] p_cast_reg_205;
wire   [0:0] ap_CS_fsm_state2;
wire   [11:0] i_fu_98_p2;
reg   [11:0] i_reg_214;
wire   [0:0] tmp_8_fu_104_p3;
reg   [0:0] tmp_8_reg_219;
wire   [0:0] exitcond_fu_92_p2;
wire   [0:0] tmp_fu_116_p2;
reg   [0:0] tmp_reg_224;
wire   [2047:0] tmp_6_fu_125_p1;
reg   [2047:0] tmp_6_reg_234;
wire   [2049:0] p_Val2_1_fu_134_p3;
reg   [2049:0] p_Val2_1_reg_239;
wire   [0:0] ap_CS_fsm_state5;
wire   [0:0] tmp_9_fu_140_p1;
reg   [0:0] tmp_9_reg_244;
reg   [2048:0] tmp_4_reg_249;
wire   [2048:0] tmp_5_fu_168_p3;
wire   [0:0] ap_CS_fsm_state9;
reg   [2048:0] p_s_reg_46;
reg   [11:0] i_assign_reg_57;
wire   [31:0] i_assign_cast1_fu_88_p1;
wire   [2049:0] grp_fu_111_p1;
wire   [2047:0] grp_fu_129_p0;
wire   [2049:0] grp_fu_111_p2;
wire   [0:0] ap_CS_fsm_state6;
wire   [2049:0] grp_fu_154_p2;
wire   [2048:0] tmp_3_fu_158_p4;
wire   [2047:0] grp_fu_129_p2;
wire   [0:0] ap_CS_fsm_state12;
wire   [2047:0] ssdm_int_V_write_ass_fu_174_p3;
reg   [2047:0] ap_return_preg;
reg   [11:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 12'b1;
#0 ap_return_preg = 2048'b
end

rsaModExp_add_205dEe #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 2050 ),
    .din1_WIDTH( 2050 ),
    .dout_WIDTH( 2050 ))
rsaModExp_add_205dEe_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(Y_V_reg_190),
    .din1(grp_fu_111_p1),
    .ce(1'b1),
    .dout(grp_fu_111_p2)
);

rsaModExp_sub_204eOg #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 2048 ),
    .din1_WIDTH( 2048 ),
    .dout_WIDTH( 2048 ))
rsaModExp_sub_204eOg_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_129_p0),
    .din1(M0_V_read_reg_180),
    .ce(1'b1),
    .dout(grp_fu_129_p2)
);

rsaModExp_add_205dEe #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 2050 ),
    .din1_WIDTH( 2050 ),
    .dout_WIDTH( 2050 ))
rsaModExp_add_205dEe_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(M_V_reg_195),
    .din1(p_Val2_1_reg_239),
    .ce(1'b1),
    .dout(grp_fu_154_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= ap_const_lv2048_lc_1;
    end else begin
        if ((1'b1 == ap_CS_fsm_state12)) begin
            ap_return_preg <= ssdm_int_V_write_ass_fu_174_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        i_assign_reg_57 <= i_reg_214;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        i_assign_reg_57 <= ap_const_lv12_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        p_s_reg_46 <= tmp_5_fu_168_p3;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        p_s_reg_46 <= ap_const_lv2049_lc_1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        M0_V_read_reg_180 <= M0_V;
        M_V_cast_reg_200[2047 : 0] <= M_V_cast_fu_80_p1[2047 : 0];
        M_V_reg_195[2047 : 0] <= M_V_fu_76_p1[2047 : 0];
        X_V_reg_185[2047 : 0] <= X_V_fu_68_p1[2047 : 0];
        Y_V_reg_190[2047 : 0] <= Y_V_fu_72_p1[2047 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ap_return <= ssdm_int_V_write_ass_fu_174_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_214 <= i_fu_98_p2;
        p_cast_reg_205[2048 : 0] <= p_cast_fu_84_p1[2048 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        p_Val2_1_reg_239 <= p_Val2_1_fu_134_p3;
        tmp_4_reg_249 <= {{p_Val2_1_fu_134_p3[ap_const_lv32_801 : ap_const_lv32_1]}};
        tmp_9_reg_244 <= tmp_9_fu_140_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~(exitcond_fu_92_p2 == 1'b0))) begin
        tmp_6_reg_234 <= tmp_6_fu_125_p1;
        tmp_reg_224 <= tmp_fu_116_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond_fu_92_p2 == 1'b0))) begin
        tmp_8_reg_219 <= tmp_8_fu_104_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (~(exitcond_fu_92_p2 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign M_V_cast_fu_80_p1 = M0_V;

assign M_V_fu_76_p1 = M0_V;

assign X_V_fu_68_p1 = X0_V;

assign Y_V_fu_72_p1 = Y0_V;

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state12 = ap_CS_fsm[ap_const_lv32_B];

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state5 = ap_CS_fsm[ap_const_lv32_4];

assign ap_CS_fsm_state6 = ap_CS_fsm[ap_const_lv32_5];

assign ap_CS_fsm_state9 = ap_CS_fsm[ap_const_lv32_8];

assign exitcond_fu_92_p2 = ((i_assign_reg_57 == ap_const_lv12_800) ? 1'b1 : 1'b0);

assign grp_fu_111_p1 = p_s_reg_46;

assign grp_fu_129_p0 = p_s_reg_46[2047:0];

assign i_assign_cast1_fu_88_p1 = i_assign_reg_57;

assign i_fu_98_p2 = (i_assign_reg_57 + ap_const_lv12_1);

assign p_Val2_1_fu_134_p3 = ((tmp_8_reg_219[0:0] === 1'b1) ? grp_fu_111_p2 : p_cast_reg_205);

assign p_cast_fu_84_p1 = p_s_reg_46;

assign ssdm_int_V_write_ass_fu_174_p3 = ((tmp_reg_224[0:0] === 1'b1) ? tmp_6_reg_234 : grp_fu_129_p2);

assign tmp_3_fu_158_p4 = {{grp_fu_154_p2[ap_const_lv32_801 : ap_const_lv32_1]}};

assign tmp_5_fu_168_p3 = ((tmp_9_reg_244[0:0] === 1'b1) ? tmp_3_fu_158_p4 : tmp_4_reg_249);

assign tmp_6_fu_125_p1 = p_s_reg_46[2047:0];

assign tmp_8_fu_104_p3 = X_V_reg_185[i_assign_cast1_fu_88_p1];

assign tmp_9_fu_140_p1 = p_Val2_1_fu_134_p3[0:0];

assign tmp_fu_116_p2 = ((p_s_reg_46 < M_V_cast_reg_200) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    X_V_reg_185[2049:2048] <= 2'b00;
    Y_V_reg_190[2049:2048] <= 2'b00;
    M_V_reg_195[2049:2048] <= 2'b00;
    M_V_cast_reg_200[2048] <= 1'b0;
    p_cast_reg_205[2049] <= 1'b0;
end

endmodule //montMult
