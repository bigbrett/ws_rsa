// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module interleaveModMult (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Y_V,
        M_V,
        ap_return
);

parameter    ap_ST_fsm_state1 = 13'b1;
parameter    ap_ST_fsm_state2 = 13'b10;
parameter    ap_ST_fsm_state3 = 13'b100;
parameter    ap_ST_fsm_state4 = 13'b1000;
parameter    ap_ST_fsm_state5 = 13'b10000;
parameter    ap_ST_fsm_state6 = 13'b100000;
parameter    ap_ST_fsm_state7 = 13'b1000000;
parameter    ap_ST_fsm_state8 = 13'b10000000;
parameter    ap_ST_fsm_state9 = 13'b100000000;
parameter    ap_ST_fsm_state10 = 13'b1000000000;
parameter    ap_ST_fsm_state11 = 13'b10000000000;
parameter    ap_ST_fsm_state12 = 13'b100000000000;
parameter    ap_ST_fsm_state13 = 13'b1000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv32_C = 32'b1100;
parameter    ap_const_lv2052_lc_1 = 2052'b
parameter    ap_const_lv13_800 = 13'b100000000000;
parameter    ap_const_lv2052_lc_2 = 2052'b1;
parameter    ap_const_lv2049_lc_3 = 2049'b
parameter    ap_const_lv13_1FFF = 13'b1111111111111;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv2048_lc_1 = 2048'b

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [2047:0] Y_V;
input  [2047:0] M_V;
output  [2047:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[2047:0] ap_return;

(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
wire   [2051:0] tmp_fu_60_p1;
reg   [2051:0] tmp_reg_143;
wire   [2051:0] tmp_s_fu_64_p1;
reg   [2051:0] tmp_s_reg_151;
wire   [2051:0] r_V_fu_80_p2;
reg   [2051:0] r_V_reg_159;
wire   [0:0] ap_CS_fsm_state2;
wire   [0:0] tmp_10_fu_72_p3;
wire   [0:0] tmp_13_fu_86_p3;
reg   [0:0] tmp_13_reg_165;
wire   [12:0] i_fu_99_p2;
reg   [12:0] i_reg_170;
wire   [2051:0] P_V_4_fu_109_p3;
reg   [2051:0] P_V_4_reg_175;
wire   [0:0] ap_CS_fsm_state5;
wire   [0:0] tmp_4_fu_119_p2;
reg   [0:0] tmp_4_reg_182;
wire   [0:0] ap_CS_fsm_state8;
wire   [2051:0] p_036_1_P_V_2_fu_123_p3;
reg   [2051:0] p_036_1_P_V_2_reg_187;
wire   [0:0] ap_CS_fsm_state9;
wire   [0:0] tmp_5_fu_129_p2;
reg   [0:0] tmp_5_reg_194;
wire   [0:0] ap_CS_fsm_state10;
wire   [2051:0] P_V_5_fu_137_p3;
wire   [0:0] ap_CS_fsm_state13;
reg   [2051:0] p_Val2_s_reg_38;
reg   [12:0] i_assign_reg_49;
wire  signed [31:0] i_assign_cast_fu_68_p1;
wire   [2051:0] grp_fu_94_p0;
wire   [2051:0] grp_fu_94_p2;
wire   [0:0] ap_CS_fsm_state6;
wire   [2051:0] grp_fu_115_p2;
wire   [2051:0] grp_fu_133_p2;
wire   [2047:0] tmp_11_fu_105_p1;
reg   [2047:0] ap_return_preg;
reg   [12:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 13'b1;
#0 ap_return_preg = 2048'b
end

rsaModExp_add_205bkb #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 2052 ),
    .din1_WIDTH( 2052 ),
    .dout_WIDTH( 2052 ))
rsaModExp_add_205bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_94_p0),
    .din1(tmp_s_reg_151),
    .ce(1'b1),
    .dout(grp_fu_94_p2)
);

rsaModExp_sub_205cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 2052 ),
    .din1_WIDTH( 2052 ),
    .dout_WIDTH( 2052 ))
rsaModExp_sub_205cud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(P_V_4_reg_175),
    .din1(tmp_reg_143),
    .ce(1'b1),
    .dout(grp_fu_115_p2)
);

rsaModExp_sub_205cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 2052 ),
    .din1_WIDTH( 2052 ),
    .dout_WIDTH( 2052 ))
rsaModExp_sub_205cud_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p_036_1_P_V_2_reg_187),
    .din1(tmp_reg_143),
    .ce(1'b1),
    .dout(grp_fu_133_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= ap_const_lv2048_lc_1;
    end else begin
        if (((1'b1 == ap_CS_fsm_state2) & ~(tmp_10_fu_72_p3 == 1'b0))) begin
            ap_return_preg <= tmp_11_fu_105_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        i_assign_reg_49 <= i_reg_170;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        i_assign_reg_49 <= ap_const_lv13_800;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        p_Val2_s_reg_38 <= P_V_5_fu_137_p3;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        p_Val2_s_reg_38 <= ap_const_lv2052_lc_1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        P_V_4_reg_175 <= P_V_4_fu_109_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~(tmp_10_fu_72_p3 == 1'b0))) begin
        ap_return <= tmp_11_fu_105_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_10_fu_72_p3 == 1'b0))) begin
        i_reg_170 <= i_fu_99_p2;
        r_V_reg_159[2051 : 1] <= r_V_fu_80_p2[2051 : 1];
        tmp_13_reg_165 <= tmp_13_fu_86_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        p_036_1_P_V_2_reg_187 <= p_036_1_P_V_2_fu_123_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp_4_reg_182 <= tmp_4_fu_119_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        tmp_5_reg_194 <= tmp_5_fu_129_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        tmp_reg_143[2047 : 0] <= tmp_fu_60_p1[2047 : 0];
        tmp_s_reg_151[2047 : 0] <= tmp_s_fu_64_p1[2047 : 0];
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~(tmp_10_fu_72_p3 == 1'b0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (~(tmp_10_fu_72_p3 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign P_V_4_fu_109_p3 = ((tmp_13_reg_165[0:0] === 1'b1) ? grp_fu_94_p2 : r_V_reg_159);

assign P_V_5_fu_137_p3 = ((tmp_5_reg_194[0:0] === 1'b1) ? p_036_1_P_V_2_reg_187 : grp_fu_133_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state10 = ap_CS_fsm[ap_const_lv32_9];

assign ap_CS_fsm_state13 = ap_CS_fsm[ap_const_lv32_C];

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state5 = ap_CS_fsm[ap_const_lv32_4];

assign ap_CS_fsm_state6 = ap_CS_fsm[ap_const_lv32_5];

assign ap_CS_fsm_state8 = ap_CS_fsm[ap_const_lv32_7];

assign ap_CS_fsm_state9 = ap_CS_fsm[ap_const_lv32_8];

assign grp_fu_94_p0 = p_Val2_s_reg_38 << ap_const_lv2052_lc_2;

assign i_assign_cast_fu_68_p1 = $signed(i_assign_reg_49);

assign i_fu_99_p2 = ($signed(ap_const_lv13_1FFF) + $signed(i_assign_reg_49));

assign p_036_1_P_V_2_fu_123_p3 = ((tmp_4_reg_182[0:0] === 1'b1) ? P_V_4_reg_175 : grp_fu_115_p2);

assign r_V_fu_80_p2 = p_Val2_s_reg_38 << ap_const_lv2052_lc_2;

assign tmp_10_fu_72_p3 = i_assign_reg_49[ap_const_lv32_C];

assign tmp_11_fu_105_p1 = p_Val2_s_reg_38[2047:0];

assign tmp_13_fu_86_p3 = ap_const_lv2049_lc_3[i_assign_cast_fu_68_p1];

assign tmp_4_fu_119_p2 = ((P_V_4_reg_175 < tmp_reg_143) ? 1'b1 : 1'b0);

assign tmp_5_fu_129_p2 = ((p_036_1_P_V_2_reg_187 < tmp_reg_143) ? 1'b1 : 1'b0);

assign tmp_fu_60_p1 = M_V;

assign tmp_s_fu_64_p1 = Y_V;

always @ (posedge ap_clk) begin
    tmp_reg_143[2051:2048] <= 4'b0000;
    tmp_s_reg_151[2051:2048] <= 4'b0000;
    r_V_reg_159[0] <= 1'b0;
end

endmodule //interleaveModMult
