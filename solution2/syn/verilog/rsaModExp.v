// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="rsaModExp,hls_ip_2016_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=25.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=21.967750,HLS_SYN_LAT=50419749,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=137486,HLS_SYN_LUT=59533}" *)

module rsaModExp (
        ap_clk,
        ap_rst_n,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 7'b1;
parameter    ap_ST_fsm_state2 = 7'b10;
parameter    ap_ST_fsm_state3 = 7'b100;
parameter    ap_ST_fsm_state4 = 7'b1000;
parameter    ap_ST_fsm_state5 = 7'b10000;
parameter    ap_ST_fsm_state6 = 7'b100000;
parameter    ap_ST_fsm_state7 = 7'b1000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    ap_const_int64_8 = 8;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 11;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv12_7FF = 12'b11111111111;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv2048_lc_2 = 2048'b1;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_B = 32'b1011;
parameter    ap_const_lv12_FFF = 12'b111111111111;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (C_S_AXI_AXILITES_DATA_WIDTH / ap_const_int64_8);
parameter C_S_AXI_WSTRB_WIDTH = (C_S_AXI_DATA_WIDTH / ap_const_int64_8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1 : 0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1 : 0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1 : 0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1 : 0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1 : 0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
reg    ap_ready;
wire   [2047:0] M_V;
wire   [2047:0] e_V;
wire   [2047:0] n_V;
reg    out_V_ap_vld;
reg   [2047:0] reg_157;
wire   [0:0] ap_CS_fsm_state4;
wire   [0:0] tmp_fu_172_p3;
reg   [2047:0] n_V_read_reg_200;
reg   [2047:0] e_V_read_reg_206;
reg   [2047:0] M_V_read_reg_211;
wire   [2047:0] grp_interleaveModMult_fu_95_ap_return;
reg   [2047:0] Mbar_V_reg_216;
wire   [0:0] ap_CS_fsm_state2;
wire    grp_interleaveModMult_fu_95_ap_done;
wire   [0:0] tmp_1_fu_180_p3;
reg   [0:0] tmp_1_reg_224;
wire   [2047:0] grp_montMult_fu_118_ap_return;
reg   [2047:0] xbar_V_2_reg_228;
wire   [0:0] ap_CS_fsm_state5;
wire    grp_montMult_fu_118_ap_done;
wire   [11:0] i_fu_187_p2;
wire   [0:0] ap_CS_fsm_state6;
wire    grp_interleaveModMult_fu_95_ap_start;
wire    grp_interleaveModMult_fu_95_ap_idle;
wire    grp_interleaveModMult_fu_95_ap_ready;
reg   [2047:0] grp_interleaveModMult_fu_95_Y_V;
wire    grp_montMult_fu_118_ap_start;
wire    grp_montMult_fu_118_ap_idle;
wire    grp_montMult_fu_118_ap_ready;
reg   [2047:0] grp_montMult_fu_118_X0_V;
reg   [2047:0] grp_montMult_fu_118_Y0_V;
reg   [11:0] i_assign_reg_83;
wire   [0:0] ap_CS_fsm_state3;
reg    ap_reg_grp_interleaveModMult_fu_95_ap_start;
reg    ap_reg_grp_montMult_fu_118_ap_start;
wire   [0:0] ap_CS_fsm_state7;
reg   [2047:0] xbar_V_1_fu_54;
wire  signed [31:0] i_assign_cast_fu_168_p1;
reg   [6:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'b1;
#0 ap_reg_grp_interleaveModMult_fu_95_ap_start = 1'b0;
#0 ap_reg_grp_montMult_fu_118_ap_start = 1'b0;
end

rsaModExp_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
rsaModExp_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .M_V(M_V),
    .e_V(e_V),
    .n_V(n_V),
    .out_V(grp_montMult_fu_118_ap_return),
    .out_V_ap_vld(out_V_ap_vld)
);

interleaveModMult grp_interleaveModMult_fu_95(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_interleaveModMult_fu_95_ap_start),
    .ap_done(grp_interleaveModMult_fu_95_ap_done),
    .ap_idle(grp_interleaveModMult_fu_95_ap_idle),
    .ap_ready(grp_interleaveModMult_fu_95_ap_ready),
    .Y_V(grp_interleaveModMult_fu_95_Y_V),
    .M_V(n_V_read_reg_200),
    .ap_return(grp_interleaveModMult_fu_95_ap_return)
);

montMult grp_montMult_fu_118(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_montMult_fu_118_ap_start),
    .ap_done(grp_montMult_fu_118_ap_done),
    .ap_idle(grp_montMult_fu_118_ap_idle),
    .ap_ready(grp_montMult_fu_118_ap_ready),
    .X0_V(grp_montMult_fu_118_X0_V),
    .Y0_V(grp_montMult_fu_118_Y0_V),
    .M0_V(n_V_read_reg_200),
    .ap_return(grp_montMult_fu_118_ap_return)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_interleaveModMult_fu_95_ap_start <= 1'b0;
    end else begin
        if ((((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0)) | ((1'b1 == ap_CS_fsm_state2) & ~(1'b0 == grp_interleaveModMult_fu_95_ap_done)))) begin
            ap_reg_grp_interleaveModMult_fu_95_ap_start <= 1'b1;
        end else if ((1'b1 == grp_interleaveModMult_fu_95_ap_ready)) begin
            ap_reg_grp_interleaveModMult_fu_95_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_montMult_fu_118_ap_start <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state4) & (tmp_fu_172_p3 == 1'b0)) | ((1'b1 == ap_CS_fsm_state4) & ~(tmp_fu_172_p3 == 1'b0)) | ((1'b1 == ap_CS_fsm_state5) & ~(1'b0 == grp_montMult_fu_118_ap_done) & ~(1'b0 == tmp_1_reg_224)))) begin
            ap_reg_grp_montMult_fu_118_ap_start <= 1'b1;
        end else if ((1'b1 == grp_montMult_fu_118_ap_ready)) begin
            ap_reg_grp_montMult_fu_118_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & ~((1'b0 == grp_montMult_fu_118_ap_done) & ~(1'b0 == tmp_1_reg_224)))) begin
        i_assign_reg_83 <= i_fu_187_p2;
    end else if ((~(1'b0 == grp_interleaveModMult_fu_95_ap_done) & (1'b1 == ap_CS_fsm_state3))) begin
        i_assign_reg_83 <= ap_const_lv12_7FF;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state5) & ~(1'b0 == grp_montMult_fu_118_ap_done) & (1'b0 == tmp_1_reg_224)) | ((1'b1 == ap_CS_fsm_state6) & ~(1'b0 == tmp_1_reg_224) & ~((1'b0 == grp_montMult_fu_118_ap_done) & ~(1'b0 == tmp_1_reg_224))))) begin
        xbar_V_1_fu_54 <= grp_montMult_fu_118_ap_return;
    end else if ((~(1'b0 == grp_interleaveModMult_fu_95_ap_done) & (1'b1 == ap_CS_fsm_state3))) begin
        xbar_V_1_fu_54 <= grp_interleaveModMult_fu_95_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        M_V_read_reg_211 <= M_V;
        e_V_read_reg_206 <= e_V;
        n_V_read_reg_200 <= n_V;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~(1'b0 == grp_interleaveModMult_fu_95_ap_done))) begin
        Mbar_V_reg_216 <= grp_interleaveModMult_fu_95_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (tmp_fu_172_p3 == 1'b0)) | ((1'b1 == ap_CS_fsm_state4) & ~(tmp_fu_172_p3 == 1'b0)))) begin
        reg_157 <= xbar_V_1_fu_54;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (tmp_fu_172_p3 == 1'b0))) begin
        tmp_1_reg_224 <= tmp_1_fu_180_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & ~(1'b0 == grp_montMult_fu_118_ap_done))) begin
        xbar_V_2_reg_228 <= grp_montMult_fu_118_ap_return;
    end
end

always @ (*) begin
    if ((~(1'b0 == grp_montMult_fu_118_ap_done) & (1'b1 == ap_CS_fsm_state7))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~(1'b0 == grp_montMult_fu_118_ap_done) & (1'b1 == ap_CS_fsm_state7))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_interleaveModMult_fu_95_Y_V = ap_const_lv2048_lc_2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_interleaveModMult_fu_95_Y_V = M_V_read_reg_211;
    end else begin
        grp_interleaveModMult_fu_95_Y_V = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & ~(1'b0 == tmp_1_reg_224))) begin
        grp_montMult_fu_118_X0_V = Mbar_V_reg_216;
    end else if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state7))) begin
        grp_montMult_fu_118_X0_V = reg_157;
    end else begin
        grp_montMult_fu_118_X0_V = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & ~(1'b0 == tmp_1_reg_224))) begin
        grp_montMult_fu_118_Y0_V = xbar_V_2_reg_228;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_montMult_fu_118_Y0_V = ap_const_lv2048_lc_2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_montMult_fu_118_Y0_V = reg_157;
    end else begin
        grp_montMult_fu_118_Y0_V = 'bx;
    end
end

always @ (*) begin
    if ((~(1'b0 == grp_montMult_fu_118_ap_done) & (1'b1 == ap_CS_fsm_state7))) begin
        out_V_ap_vld = 1'b1;
    end else begin
        out_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (~(1'b0 == grp_interleaveModMult_fu_95_ap_done)) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (~(1'b0 == grp_interleaveModMult_fu_95_ap_done)) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (~(tmp_fu_172_p3 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (~(1'b0 == grp_montMult_fu_118_ap_done)) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (~((1'b0 == grp_montMult_fu_118_ap_done) & ~(1'b0 == tmp_1_reg_224))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (~(1'b0 == grp_montMult_fu_118_ap_done)) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state3 = ap_CS_fsm[ap_const_lv32_2];

assign ap_CS_fsm_state4 = ap_CS_fsm[ap_const_lv32_3];

assign ap_CS_fsm_state5 = ap_CS_fsm[ap_const_lv32_4];

assign ap_CS_fsm_state6 = ap_CS_fsm[ap_const_lv32_5];

assign ap_CS_fsm_state7 = ap_CS_fsm[ap_const_lv32_6];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_interleaveModMult_fu_95_ap_start = ap_reg_grp_interleaveModMult_fu_95_ap_start;

assign grp_montMult_fu_118_ap_start = ap_reg_grp_montMult_fu_118_ap_start;

assign i_assign_cast_fu_168_p1 = $signed(i_assign_reg_83);

assign i_fu_187_p2 = ($signed(i_assign_reg_83) + $signed(ap_const_lv12_FFF));

assign tmp_1_fu_180_p3 = e_V_read_reg_206[i_assign_cast_fu_168_p1];

assign tmp_fu_172_p3 = i_assign_reg_83[ap_const_lv32_B];

endmodule //rsaModExp
